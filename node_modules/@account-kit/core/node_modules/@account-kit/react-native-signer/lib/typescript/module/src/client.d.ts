import "./utils/buffer-polyfill.js";
import "./utils/mmkv-localstorage-polyfill.js";
import { BaseSignerClient, type AlchemySignerClientEvents, type AuthenticatingEventMetadata, type CreateAccountParams, type EmailAuthParams, type GetWebAuthnAttestationResult, type OauthConfig, type OauthParams, type OtpParams, type SignupResponse, type User } from "@account-kit/signer";
import { z } from "zod";
export declare const RNSignerClientParamsSchema: z.ZodObject<{
    connection: z.ZodType<{
        apiKey: string;
        rpcUrl?: undefined;
        jwt?: undefined;
    } | {
        jwt: string;
        rpcUrl?: undefined;
        apiKey?: undefined;
    } | {
        rpcUrl: string;
        apiKey?: undefined;
        jwt?: undefined;
    } | {
        rpcUrl: string;
        jwt: string;
        apiKey?: undefined;
    }, z.ZodTypeDef, {
        apiKey: string;
        rpcUrl?: undefined;
        jwt?: undefined;
    } | {
        jwt: string;
        rpcUrl?: undefined;
        apiKey?: undefined;
    } | {
        rpcUrl: string;
        apiKey?: undefined;
        jwt?: undefined;
    } | {
        rpcUrl: string;
        jwt: string;
        apiKey?: undefined;
    }>;
    rootOrgId: z.ZodOptional<z.ZodString>;
    oauthCallbackUrl: z.ZodDefault<z.ZodOptional<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    connection: {
        apiKey: string;
        rpcUrl?: undefined;
        jwt?: undefined;
    } | {
        jwt: string;
        rpcUrl?: undefined;
        apiKey?: undefined;
    } | {
        rpcUrl: string;
        apiKey?: undefined;
        jwt?: undefined;
    } | {
        rpcUrl: string;
        jwt: string;
        apiKey?: undefined;
    };
    oauthCallbackUrl: string;
    rootOrgId?: string | undefined;
}, {
    connection: {
        apiKey: string;
        rpcUrl?: undefined;
        jwt?: undefined;
    } | {
        jwt: string;
        rpcUrl?: undefined;
        apiKey?: undefined;
    } | {
        rpcUrl: string;
        apiKey?: undefined;
        jwt?: undefined;
    } | {
        rpcUrl: string;
        jwt: string;
        apiKey?: undefined;
    };
    rootOrgId?: string | undefined;
    oauthCallbackUrl?: string | undefined;
}>;
export type RNSignerClientParams = z.input<typeof RNSignerClientParamsSchema>;
export declare class RNSignerClient extends BaseSignerClient<undefined> {
    private stamper;
    oauthCallbackUrl: string;
    private validAuthenticatingTypes;
    constructor(params: RNSignerClientParams);
    submitOtpCode(args: Omit<OtpParams, "targetPublicKey">): Promise<{
        bundle: string;
    }>;
    createAccount(params: CreateAccountParams): Promise<SignupResponse>;
    initEmailAuth(params: Omit<EmailAuthParams, "targetPublicKey">): Promise<{
        orgId: string;
    }>;
    completeAuthWithBundle(params: {
        bundle: string;
        orgId: string;
        connectedEventName: keyof AlchemySignerClientEvents;
        authenticatingType: AuthenticatingEventMetadata["type"];
        idToken?: string;
    }): Promise<User>;
    oauthWithRedirect: (args: Extract<OauthParams, {
        mode: "redirect";
    }>) => Promise<User>;
    oauthWithPopup(_args: Extract<OauthParams, {
        mode: "popup";
    }>): Promise<User>;
    disconnect(): Promise<void>;
    exportWallet(_params: unknown): Promise<boolean>;
    lookupUserWithPasskey(_user?: User): Promise<User>;
    targetPublicKey(): Promise<string>;
    protected getWebAuthnAttestation(_options: CredentialCreationOptions, _userDetails?: {
        username: string;
    }): Promise<GetWebAuthnAttestationResult>;
    protected getOauthConfig: () => Promise<OauthConfig>;
}
//# sourceMappingURL=client.d.ts.map