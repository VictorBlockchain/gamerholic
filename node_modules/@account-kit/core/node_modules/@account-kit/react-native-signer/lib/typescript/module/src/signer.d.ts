import { BaseAlchemySigner } from "@account-kit/signer";
import { z } from "zod";
import { RNSignerClient } from "./client.js";
declare const RNAlchemySignerParamsSchema: z.ZodObject<{
    client: z.ZodUnion<[z.ZodType<RNSignerClient, z.ZodTypeDef, RNSignerClient>, z.ZodObject<{
        connection: z.ZodType<{
            apiKey: string;
            rpcUrl?: undefined;
            jwt?: undefined;
        } | {
            jwt: string;
            rpcUrl?: undefined;
            apiKey?: undefined;
        } | {
            rpcUrl: string;
            apiKey?: undefined;
            jwt?: undefined;
        } | {
            rpcUrl: string;
            jwt: string;
            apiKey?: undefined;
        }, z.ZodTypeDef, {
            apiKey: string;
            rpcUrl?: undefined;
            jwt?: undefined;
        } | {
            jwt: string;
            rpcUrl?: undefined;
            apiKey?: undefined;
        } | {
            rpcUrl: string;
            apiKey?: undefined;
            jwt?: undefined;
        } | {
            rpcUrl: string;
            jwt: string;
            apiKey?: undefined;
        }>;
        rootOrgId: z.ZodOptional<z.ZodString>;
        oauthCallbackUrl: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        connection: {
            apiKey: string;
            rpcUrl?: undefined;
            jwt?: undefined;
        } | {
            jwt: string;
            rpcUrl?: undefined;
            apiKey?: undefined;
        } | {
            rpcUrl: string;
            apiKey?: undefined;
            jwt?: undefined;
        } | {
            rpcUrl: string;
            jwt: string;
            apiKey?: undefined;
        };
        oauthCallbackUrl: string;
        rootOrgId?: string | undefined;
    }, {
        connection: {
            apiKey: string;
            rpcUrl?: undefined;
            jwt?: undefined;
        } | {
            jwt: string;
            rpcUrl?: undefined;
            apiKey?: undefined;
        } | {
            rpcUrl: string;
            apiKey?: undefined;
            jwt?: undefined;
        } | {
            rpcUrl: string;
            jwt: string;
            apiKey?: undefined;
        };
        rootOrgId?: string | undefined;
        oauthCallbackUrl?: string | undefined;
    }>]>;
    sessionConfig: z.ZodOptional<z.ZodObject<Omit<{
        sessionKey: z.ZodDefault<z.ZodString>;
        storage: z.ZodUnion<[z.ZodDefault<z.ZodEnum<["localStorage", "sessionStorage"]>>, z.ZodType<Storage, z.ZodTypeDef, Storage>]>;
        expirationTimeMs: z.ZodDefault<z.ZodNumber>;
        client: z.ZodType<import("@account-kit/signer").BaseSignerClient<unknown>, z.ZodTypeDef, import("@account-kit/signer").BaseSignerClient<unknown>>;
    }, "client" | "storage">, "strip", z.ZodTypeAny, {
        sessionKey: string;
        expirationTimeMs: number;
    }, {
        sessionKey?: string | undefined;
        expirationTimeMs?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    client: ({
        connection: {
            apiKey: string;
            rpcUrl?: undefined;
            jwt?: undefined;
        } | {
            jwt: string;
            rpcUrl?: undefined;
            apiKey?: undefined;
        } | {
            rpcUrl: string;
            apiKey?: undefined;
            jwt?: undefined;
        } | {
            rpcUrl: string;
            jwt: string;
            apiKey?: undefined;
        };
        oauthCallbackUrl: string;
        rootOrgId?: string | undefined;
    } | RNSignerClient) & ({
        connection: {
            apiKey: string;
            rpcUrl?: undefined;
            jwt?: undefined;
        } | {
            jwt: string;
            rpcUrl?: undefined;
            apiKey?: undefined;
        } | {
            rpcUrl: string;
            apiKey?: undefined;
            jwt?: undefined;
        } | {
            rpcUrl: string;
            jwt: string;
            apiKey?: undefined;
        };
        oauthCallbackUrl: string;
        rootOrgId?: string | undefined;
    } | RNSignerClient | undefined);
    sessionConfig?: {
        sessionKey: string;
        expirationTimeMs: number;
    } | undefined;
}, {
    client: ({
        connection: {
            apiKey: string;
            rpcUrl?: undefined;
            jwt?: undefined;
        } | {
            jwt: string;
            rpcUrl?: undefined;
            apiKey?: undefined;
        } | {
            rpcUrl: string;
            apiKey?: undefined;
            jwt?: undefined;
        } | {
            rpcUrl: string;
            jwt: string;
            apiKey?: undefined;
        };
        rootOrgId?: string | undefined;
        oauthCallbackUrl?: string | undefined;
    } | RNSignerClient) & ({
        connection: {
            apiKey: string;
            rpcUrl?: undefined;
            jwt?: undefined;
        } | {
            jwt: string;
            rpcUrl?: undefined;
            apiKey?: undefined;
        } | {
            rpcUrl: string;
            apiKey?: undefined;
            jwt?: undefined;
        } | {
            rpcUrl: string;
            jwt: string;
            apiKey?: undefined;
        };
        rootOrgId?: string | undefined;
        oauthCallbackUrl?: string | undefined;
    } | RNSignerClient | undefined);
    sessionConfig?: {
        sessionKey?: string | undefined;
        expirationTimeMs?: number | undefined;
    } | undefined;
}>;
export type RNAlchemySignerParams = z.input<typeof RNAlchemySignerParamsSchema>;
export declare class RNAlchemySignerSingleton extends BaseAlchemySigner<RNSignerClient> {
    private static instance;
    private constructor();
    static getInstance(params: RNAlchemySignerParams): RNAlchemySignerSingleton;
}
/**
 * Factory function to create or retrieve a singleton instance of RNAlchemySigner.
 *
 * @example
 * ```ts twoslash
 * import { RNAlchemySigner } from "@account-kit/react-native-signer";
 *
 * const signer = RNAlchemySigner({
 *  client: {
 *    connection: {
 *      apiKey: "YOUR_API_KEY"
 *    },
 *  },
 *  // optional config to override default session manager configs
 *  sessionConfig: {
 *    expirationTimeMs: 1000 * 60 * 60 // 60 minutes
 *  }
 * });
 * ```
 *
 * @param {RNAlchemySignerParams} params The parameters required to configure the RNAlchemySigner instance.
 * @returns {RNAlchemySignerSingleton} The singleton instance of RNAlchemySigner configured with the provided parameters.
 */
export declare function RNAlchemySigner(params: RNAlchemySignerParams): RNAlchemySignerSingleton;
export type RNAlchemySignerType = RNAlchemySignerSingleton;
export {};
//# sourceMappingURL=signer.d.ts.map