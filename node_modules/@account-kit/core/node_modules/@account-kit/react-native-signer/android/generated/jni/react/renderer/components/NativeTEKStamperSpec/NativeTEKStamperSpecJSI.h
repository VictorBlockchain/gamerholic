/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleH.js
 */

#pragma once

#include <ReactCommon/TurboModule.h>
#include <react/bridging/Bridging.h>

namespace facebook::react {


  
#pragma mark - NativeTEKStamperTStamp

template <typename P0, typename P1>
struct NativeTEKStamperTStamp {
  P0 stampHeaderName;
  P1 stampHeaderValue;
  bool operator==(const NativeTEKStamperTStamp &other) const {
    return stampHeaderName == other.stampHeaderName && stampHeaderValue == other.stampHeaderValue;
  }
};

template <typename T>
struct NativeTEKStamperTStampBridging {
  static T types;

  static T fromJs(
      jsi::Runtime &rt,
      const jsi::Object &value,
      const std::shared_ptr<CallInvoker> &jsInvoker) {
    T result{
      bridging::fromJs<decltype(types.stampHeaderName)>(rt, value.getProperty(rt, "stampHeaderName"), jsInvoker),
      bridging::fromJs<decltype(types.stampHeaderValue)>(rt, value.getProperty(rt, "stampHeaderValue"), jsInvoker)};
    return result;
  }

#ifdef DEBUG
  static jsi::String stampHeaderNameToJs(jsi::Runtime &rt, decltype(types.stampHeaderName) value) {
    return bridging::toJs(rt, value);
  }

  static jsi::String stampHeaderValueToJs(jsi::Runtime &rt, decltype(types.stampHeaderValue) value) {
    return bridging::toJs(rt, value);
  }
#endif

  static jsi::Object toJs(
      jsi::Runtime &rt,
      const T &value,
      const std::shared_ptr<CallInvoker> &jsInvoker) {
    auto result = facebook::jsi::Object(rt);
    result.setProperty(rt, "stampHeaderName", bridging::toJs(rt, value.stampHeaderName, jsInvoker));
    result.setProperty(rt, "stampHeaderValue", bridging::toJs(rt, value.stampHeaderValue, jsInvoker));
    return result;
  }
};

class JSI_EXPORT NativeTEKStamperCxxSpecJSI : public TurboModule {
protected:
  NativeTEKStamperCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual jsi::Value init(jsi::Runtime &rt) = 0;
  virtual void clear(jsi::Runtime &rt) = 0;
  virtual std::optional<jsi::String> publicKey(jsi::Runtime &rt) = 0;
  virtual jsi::Value injectCredentialBundle(jsi::Runtime &rt, jsi::String bundle) = 0;
  virtual jsi::Value stamp(jsi::Runtime &rt, jsi::String payload) = 0;

};

template <typename T>
class JSI_EXPORT NativeTEKStamperCxxSpec : public TurboModule {
public:
  jsi::Value get(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.get(rt, propName);
  }

  static constexpr std::string_view kModuleName = "NativeTEKStamper";

protected:
  NativeTEKStamperCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule(std::string{NativeTEKStamperCxxSpec::kModuleName}, jsInvoker),
      delegate_(reinterpret_cast<T*>(this), jsInvoker) {}


private:
  class Delegate : public NativeTEKStamperCxxSpecJSI {
  public:
    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
      NativeTEKStamperCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {

    }

    jsi::Value init(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::init) == 1,
          "Expected init(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::init, jsInvoker_, instance_);
    }
    void clear(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::clear) == 1,
          "Expected clear(...) to have 1 parameters");

      return bridging::callFromJs<void>(
          rt, &T::clear, jsInvoker_, instance_);
    }
    std::optional<jsi::String> publicKey(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::publicKey) == 1,
          "Expected publicKey(...) to have 1 parameters");

      return bridging::callFromJs<std::optional<jsi::String>>(
          rt, &T::publicKey, jsInvoker_, instance_);
    }
    jsi::Value injectCredentialBundle(jsi::Runtime &rt, jsi::String bundle) override {
      static_assert(
          bridging::getParameterCount(&T::injectCredentialBundle) == 2,
          "Expected injectCredentialBundle(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::injectCredentialBundle, jsInvoker_, instance_, std::move(bundle));
    }
    jsi::Value stamp(jsi::Runtime &rt, jsi::String payload) override {
      static_assert(
          bridging::getParameterCount(&T::stamp) == 2,
          "Expected stamp(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::stamp, jsInvoker_, instance_, std::move(payload));
    }

  private:
    friend class NativeTEKStamperCxxSpec;
    T *instance_;
  };

  Delegate delegate_;
};

} // namespace facebook::react
