import { AlchemySignerStatus, AlchemyWebSigner, type ErrorInfo } from "@account-kit/signer";
import type { Chain } from "viem";
import type { SupportedAccountTypes } from "../types.js";
import { type AccountState, type ClientStoreConfig, type CreateAccountKitStoreParams, type SignerStatus, type Store } from "./types.js";
export declare const STORAGE_VERSION = 14;
export declare const createAccountKitStore: (params: CreateAccountKitStoreParams) => Store;
/**
 * Given initial client store parameters, it initializes an AlchemySigner instance.
 * This should only be called on the client.
 *
 * @param {CreateClientStoreParams} params to configure and create the signer
 * @returns {AlchemySigner} an instance of the AlchemySigner
 */
export declare const createSigner: (params: ClientStoreConfig) => AlchemyWebSigner;
/**
 * Converts the AlchemySigner's status to a more readable object
 *
 * @param {AlchemySignerStatus} alchemySignerStatus Enum value of the AlchemySigner's status to convert
 * @param {ErrorInfo | undefined} error the current signer error, if present
 * @returns {SignerStatus} an object containing the original status as well as booleans to check the current state
 */
export declare const convertSignerStatusToState: (alchemySignerStatus: AlchemySignerStatus, error: ErrorInfo | undefined) => SignerStatus;
/**
 * Returns the default state for an account of a supported type.
 *
 * @example
 * ```ts
 * import { defaultAccountState } from "@account-kit/core";
 *
 * const defaultLightAccountState = defaultAccountState<"LightAccount">();
 * ```
 *
 * @template T
 * @returns {AccountState<T>} The default state for the specified account type
 */
export declare const defaultAccountState: <T extends SupportedAccountTypes>() => AccountState<T>;
/**
 * Creates the default account state for the given chains.
 *
 * @param {Chain[]} chains The chains to create the account state for
 * @returns {NoUndefined<StoreState["accounts"]>} The default account state for the given chains
 */
export declare const createDefaultAccountState: (chains: Chain[]) => {
    [chain: number]: {
        MultiOwnerLightAccount: AccountState<"MultiOwnerLightAccount">;
        LightAccount: AccountState<"LightAccount">;
        MultiOwnerModularAccount: AccountState<"MultiOwnerModularAccount">;
        ModularAccountV2: AccountState<"ModularAccountV2">;
    };
};
export declare const createEmptySmartAccountClientState: (chains: Chain[]) => {
    [chain: number]: Partial<{
        MultiOwnerLightAccount: import("../index.js").GetSmartAccountClientResult<Chain, import("@account-kit/smart-contracts").MultiOwnerLightAccount<import("../types.js").AlchemySigner>>;
        LightAccount: import("../index.js").GetSmartAccountClientResult<Chain, import("@account-kit/smart-contracts").LightAccount<import("../types.js").AlchemySigner>>;
        MultiOwnerModularAccount: import("../index.js").GetSmartAccountClientResult<Chain, import("@account-kit/smart-contracts").MultiOwnerModularAccount<import("../types.js").AlchemySigner>>;
        ModularAccountV2: import("../index.js").GetSmartAccountClientResult<Chain, import("@account-kit/smart-contracts").ModularAccountV2<import("../types.js").AlchemySigner>>;
    }>;
};
//# sourceMappingURL=store.d.ts.map