{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/types.ts"],"names":[],"mappings":"AAkBA,OAAO,EAA8B,MAAM,aAAa,CAAC","sourcesContent":["import type { ConnectionConfig } from \"@aa-sdk/core\";\nimport type {\n  AlchemyTransport,\n  AlchemyTransportConfig,\n} from \"@account-kit/infra\";\nimport type {\n  AlchemySignerParams,\n  AlchemySignerWebClient,\n  AlchemyWebSigner,\n} from \"@account-kit/signer\";\nimport type {\n  LightAccount,\n  LightAccountVersion,\n  MultiOwnerLightAccount,\n  MultiOwnerModularAccount,\n  ModularAccountV2,\n} from \"@account-kit/smart-contracts\";\nimport type { CreateConnectorFn } from \"@wagmi/core\";\nimport { type Config as WagmiConfig } from \"@wagmi/core\";\nimport type { Chain } from \"viem\";\nimport type { PartialBy } from \"viem/chains\";\nimport type { ClientStoreConfig, Store, StoredState } from \"./store/types\";\nimport type {\n  RNAlchemySignerSingleton as RNAlchemySigner,\n  RNSignerClient,\n} from \"@account-kit/react-native-signer\";\n\nexport type SupportedAccountTypes =\n  | \"MultiOwnerLightAccount\"\n  | \"LightAccount\"\n  | \"MultiOwnerModularAccount\"\n  | \"ModularAccountV2\";\n\nexport type SupportedAccounts =\n  | LightAccount<AlchemySigner, LightAccountVersion<\"LightAccount\">>\n  | MultiOwnerModularAccount<AlchemySigner>\n  | MultiOwnerLightAccount<\n      AlchemySigner,\n      LightAccountVersion<\"MultiOwnerLightAccount\">\n    >\n  | ModularAccountV2<AlchemySigner>;\n\nexport type SupportedAccount<T extends SupportedAccountTypes> =\n  T extends \"LightAccount\"\n    ? LightAccount<AlchemySigner>\n    : T extends \"MultiOwnerModularAccount\"\n    ? MultiOwnerModularAccount<AlchemySigner>\n    : T extends \"MultiOwnerLightAccount\"\n    ? MultiOwnerLightAccount<AlchemySigner>\n    : T extends \"ModularAccountV2\"\n    ? ModularAccountV2<AlchemySigner>\n    : never;\n\nexport type AlchemyAccountsConfig = {\n  store: Store;\n  _internal: {\n    // if not provided, the default signer will be used\n    createSigner: (config: ClientStoreConfig) => AlchemySigner;\n    wagmiConfig: WagmiConfig;\n    ssr?: boolean;\n    storageKey: string;\n    sessionLength: number;\n  };\n};\n\n// [!region CreateCorConfigProps]\nexport type Connection = {\n  transport: AlchemyTransportConfig;\n  chain: Chain;\n  policyId?: string | string[];\n};\n\ntype RpcConnectionConfig =\n  | {\n      chain: Chain;\n      chains: {\n        chain: Chain;\n        policyId?: string | string[];\n        // optional transport override\n        transport?: AlchemyTransport;\n      }[];\n      // optional global transport to use for all chains\n      transport: AlchemyTransport;\n      // When providing multiple chains and no default transport, the signer connection is required\n      signerConnection?: ConnectionConfig;\n      policyId?: never;\n    }\n  | {\n      chain: Chain;\n      chains: {\n        chain: Chain;\n        policyId?: string | string[];\n        transport: AlchemyTransport;\n      }[];\n      transport?: never;\n      // When providing multiple chains, then the signer connection is required\n      signerConnection: ConnectionConfig;\n      policyId?: never;\n    }\n  | {\n      transport: AlchemyTransport;\n      chain: Chain;\n      policyId?: string | string[];\n      signerConnection?: ConnectionConfig;\n      chains?: never;\n    };\n\ntype CreateStorageFn = (config?: {\n  /** @deprecated Use `sessionConfig` to define session length instead. */\n  sessionLength?: number;\n  domain?: string;\n}) => Storage;\n\nexport type AlchemyClientState = StoredState;\n\nexport type AlchemySigner = AlchemyWebSigner | RNAlchemySigner;\n\nexport type AlchemySignerClient = (AlchemyWebSigner | RNSignerClient) & {};\n\nexport type BaseCreateConfigProps = RpcConnectionConfig & {\n  sessionConfig?: AlchemySignerParams[\"sessionConfig\"] & { domain?: string };\n  /**\n   * Enable this parameter if you are using the config in an SSR setting (eg. NextJS)\n   * Turing this setting on will disable automatic hydration of the client store\n   */\n  ssr?: boolean;\n\n  storage?: CreateStorageFn;\n\n  connectors?: CreateConnectorFn[];\n\n  /**\n   * If set, calls `preparePopupOauth` immediately upon initializing the signer.\n   * If you intend to use popup-based OAuth login, you must either set this\n   * option to true or manually ensure that you call\n   * `signer.preparePopupOauth()` at some point before the user interaction that\n   * triggers the OAuth authentication flow.\n   */\n  enablePopupOauth?: boolean;\n} & Omit<\n    PartialBy<\n      Exclude<AlchemySignerParams[\"client\"], AlchemySignerWebClient>,\n      \"iframeConfig\"\n    >,\n    \"connection\"\n  >;\n\nexport type CreateConfigProps = BaseCreateConfigProps & {\n  _internal?: {\n    createSigner?: (config: ClientStoreConfig) => AlchemySigner;\n  };\n};\n"]}