{"version":3,"file":"cookies.js","sourceRoot":"","sources":["../../../src/utils/cookies.ts"],"names":[],"mappings":"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","sourcesContent":["import { cookieToInitialState as wagmiCookieToInitialState } from \"@wagmi/core\";\nimport Cookies from \"js-cookie\";\nimport type { StoredState } from \"../store/types.js\";\nimport type { AlchemyAccountsConfig } from \"../types.js\";\nimport { deserialize } from \"./deserialize.js\";\n\n// The maximum duration of a cookie according to the spec is 400 days.\n// https://httpwg.org/http-extensions/draft-ietf-httpbis-rfc6265bis.html#name-cookie-lifetime-limits\nconst MAX_COOKIE_DURATION_MS = 1000 * 60 * 60 * 24 * 400;\n\n/**\n * Function to create cookie based Storage\n *\n * @param {{sessionLength: number; domain?: string}} config optional config object\n * @param {number} config.sessionLength the duration until the cookie expires in milliseconds (deprecated)\n * @param {string} config.domain optional domain to set the cookie on, eg: `example.com` if you want the cookie to work on all subdomains of example.com\n * @returns {Storage} an instance of a browser storage object that leverages cookies\n */\nexport const cookieStorage = (config?: {\n  /** @deprecated this option is deprecated and will be ignored */\n  sessionLength?: number;\n  domain?: string;\n}): Storage => {\n  if (config?.sessionLength) {\n    console.warn(\n      \"The cookieStorage sessionLength option is deprecated and will be ignored.\"\n    );\n  }\n  return {\n    // this is unused for now, we should update this if we do need it\n    length: 0,\n\n    clear: function (): void {\n      throw new Error(\n        \"clearing cookies is not supported as this could lead to unexpected behaviour.\\n\" +\n          \" Use removeItem instead or you can manually clear cookies with document.cookie = ''\"\n      );\n    },\n\n    getItem: function (key: string): string | null {\n      if (typeof document === \"undefined\") return null;\n\n      const cookieValue = Cookies.get(key);\n      return cookieValue ? decodeURIComponent(cookieValue) : null;\n    },\n\n    // we will not be using this, if we have need for it add it back later\n    key: function (): string | null {\n      throw new Error(\"Function not implemented.\");\n    },\n\n    removeItem: function (key: string): void {\n      if (typeof document === \"undefined\") return;\n\n      Cookies.remove(key);\n    },\n\n    setItem: function (key: string, value: string): void {\n      if (typeof document === \"undefined\") return;\n\n      Cookies.set(key, value, {\n        expires: new Date(Date.now() + MAX_COOKIE_DURATION_MS),\n        domain: config?.domain,\n      });\n    },\n  };\n};\n\n/**\n * Converts a cookie into an initial state object\n *\n * @param {AlchemyAccountsConfig} config the account config containing the client store\n * @param {string | undefined} cookie optional cookie string\n * @returns {StoredState | undefined} the deserialized AlchemyClientState if the cookie exists, otherwise undefined\n */\nexport function cookieToInitialState(\n  config: AlchemyAccountsConfig,\n  cookie?: string\n): StoredState | undefined {\n  if (!cookie) return;\n\n  const state = parseCookie(cookie, config._internal.storageKey);\n  if (!state) return;\n\n  const alchemyClientState = deserialize<{\n    state: StoredState[\"alchemy\"];\n  }>(state).state;\n\n  // If the expirationTimeMs is changed in the config, we should use the new config\n  // value instead of restoring the value from the cookie, otherwise it can lead\n  // to confusion and unexpected behavior when it seems like the expirationTimeMs\n  // is being ignored.\n  alchemyClientState.config.sessionConfig = {\n    ...alchemyClientState.config.sessionConfig,\n    expirationTimeMs:\n      config.store.getInitialState().config.sessionConfig?.expirationTimeMs ??\n      alchemyClientState.config.sessionConfig?.expirationTimeMs,\n  };\n\n  const wagmiClientState = wagmiCookieToInitialState(\n    config._internal.wagmiConfig,\n    decodeURIComponent(cookie)\n  );\n\n  return {\n    alchemy: alchemyClientState,\n    wagmi: wagmiClientState,\n  };\n}\n\n/**\n * Helper function that can be used to parse a cookie string on the server or client\n *\n * @param {string} cookie the cookie string to parse\n * @param {string} key the key of the cookie to parse\n * @returns {string} the value of the cookie given a key if it exists, otherwise undefined\n */\nexport function parseCookie(cookie: string, key: string) {\n  const keyValue = cookie.split(\"; \").find((x) => x.startsWith(`${key}=`));\n  if (!keyValue) return undefined;\n  return keyValue.substring(key.length + 1);\n}\n"]}