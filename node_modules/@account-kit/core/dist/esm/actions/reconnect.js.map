{"version":3,"file":"reconnect.js","sourceRoot":"","sources":["../../../src/actions/reconnect.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,aAAa,EAAE,MAAM,oBAAoB,CAAC;AACnD,OAAO,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AAEzC;;;;;;;;;;;;;GAaG;AACH,MAAM,CAAC,KAAK,UAAU,SAAS,CAAC,MAA6B;IAC3D,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,CAAC;IACzB,MAAM,YAAY,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC;IAC7C,MAAM,cAAc,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,cAAc,CAAC;IAEvD,oDAAoD;IACpD,+DAA+D;IAC/D,MAAM,MAAM,GACV,KAAK,CAAC,QAAQ,EAAE,CAAC,MAAM,IAAI,MAAM,CAAC,SAAS,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;IAEzE,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,MAAM,EAAE,CAAC;QAC7B,KAAK,CAAC,QAAQ,CAAC;YACb,MAAM;SACP,CAAC,CAAC;IACL,CAAC;IAED,MAAM,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;IAE/B,MAAM,cAAc,GAAG,MAAM,CAAC,EAAE,CAAC,WAAW,EAAE,KAAK,IAAI,EAAE;QACvD,IAAI,cAAc,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,cAAc,CAAC,EAAE,CAAC;YAC/C,MAAM,aAAa,CACjB;gBACE,IAAI,EAAE,cAAc;gBACpB,aAAa,EAAE,cAAc,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,cAAc,CAAC;aACxD,EACD,MAAM,CACP,CAAC;QACJ,CAAC;QAED,IAAI,cAAc,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,0BAA0B,CAAC,EAAE,CAAC;YAC3D,MAAM,aAAa,CACjB;gBACE,IAAI,EAAE,0BAA0B;gBAChC,aAAa,EAAE,cAAc,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,0BAA0B,CAAC;aACpE,EACD,MAAM,CACP,CAAC;QACJ,CAAC;QAED,IAAI,cAAc,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,kBAAkB,CAAC,EAAE,CAAC;YACnD,MAAM,aAAa,CACjB;gBACE,IAAI,EAAE,kBAAkB;gBACxB,aAAa,EAAE,cAAc,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,kBAAkB,CAAC;aAC5D,EACD,MAAM,CACP,CAAC;QACJ,CAAC;QAED,UAAU,CAAC,GAAG,EAAE,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,MAAM,iBAAiB,GAAG,MAAM,CAAC,EAAE,CAAC,cAAc,EAAE,GAAG,EAAE;QACvD,KAAK,CAAC,QAAQ,CAAC;YACb,cAAc,EAAE,EAAE;SACnB,CAAC,CAAC;QACH,UAAU,CAAC,GAAG,EAAE,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import type { AlchemyAccountsConfig } from \"../types.js\";\nimport { createAccount } from \"./createAccount.js\";\nimport { getChain } from \"./getChain.js\";\n\n/**\n * This method will use the current state in the client store and attempt to restore\n * connected instances of previously used accounts and the signer.\n *\n * @example\n * ```ts\n * import { reconnect } from \"@account-kit/core\";\n * import { config } from \"./config\";\n *\n * await reconnect(config);\n * ```\n *\n * @param {AlchemyAccountsConfig} config the account config which contains the client store\n */\nexport async function reconnect(config: AlchemyAccountsConfig) {\n  const { store } = config;\n  const signerConfig = store.getState().config;\n  const accountConfigs = store.getState().accountConfigs;\n\n  // If signer isn't already set, create a new signer.\n  // If the createSigner function isn't provided from the config,\n  const signer =\n    store.getState().signer ?? config._internal.createSigner(signerConfig);\n\n  if (!store.getState().signer) {\n    store.setState({\n      signer,\n    });\n  }\n\n  const chain = getChain(config);\n\n  const unsubConnected = signer.on(\"connected\", async () => {\n    if (accountConfigs[chain.id]?.[\"LightAccount\"]) {\n      await createAccount(\n        {\n          type: \"LightAccount\",\n          accountParams: accountConfigs[chain.id][\"LightAccount\"],\n        },\n        config\n      );\n    }\n\n    if (accountConfigs[chain.id]?.[\"MultiOwnerModularAccount\"]) {\n      await createAccount(\n        {\n          type: \"MultiOwnerModularAccount\",\n          accountParams: accountConfigs[chain.id][\"MultiOwnerModularAccount\"],\n        },\n        config\n      );\n    }\n\n    if (accountConfigs[chain.id]?.[\"ModularAccountV2\"]) {\n      await createAccount(\n        {\n          type: \"ModularAccountV2\",\n          accountParams: accountConfigs[chain.id][\"ModularAccountV2\"],\n        },\n        config\n      );\n    }\n\n    setTimeout(() => unsubConnected(), 1);\n  });\n\n  const unsubDisconnected = signer.on(\"disconnected\", () => {\n    store.setState({\n      accountConfigs: {},\n    });\n    setTimeout(() => unsubDisconnected(), 1);\n  });\n}\n"]}