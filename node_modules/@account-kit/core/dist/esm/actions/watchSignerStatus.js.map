{"version":3,"file":"watchSignerStatus.js","sourceRoot":"","sources":["../../../src/actions/watchSignerStatus.ts"],"names":[],"mappings":"AAGA;;;;;;;;;;;;;;GAcG;AACH,MAAM,CAAC,MAAM,iBAAiB,GAC5B,CAAC,MAA6B,EAAE,EAAE,CAClC,CAAC,QAAwC,EAAE,EAAE;IAC3C,OAAO,MAAM,CAAC,KAAK,CAAC,SAAS,CAC3B,CAAC,EAAE,YAAY,EAAE,EAAE,EAAE,CAAC,YAAY,EAClC,QAAQ,EACR,EAAE,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,KAAK,EAAE,CACvE,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import type { SignerStatus } from \"../store/types.js\";\nimport type { AlchemyAccountsConfig } from \"../types.js\";\n\n/**\n * Watches the signer status in the client store and triggers the provided callback function when the status changes.\n *\n * @example\n * ```ts\n * import { watchSignerStatus } from \"@account-kit/core\";\n * // see createConfig for more information on how to create a config\n * import { config } from \"./config\";\n *\n * watchSignerStatus(config)(console.log);\n * ```\n *\n * @param {AlchemyAccountsConfig} config The configuration object containing the client store\n * @returns {(onChange: (status: SignerStatus) => void) => (() => void)} A function that accepts a callback to be called when the signer status changes which returns a function to unsubscribe from the store\n */\nexport const watchSignerStatus =\n  (config: AlchemyAccountsConfig) =>\n  (onChange: (status: SignerStatus) => void) => {\n    return config.store.subscribe(\n      ({ signerStatus }) => signerStatus,\n      onChange,\n      { equalityFn: (a, b) => a.status === b.status && a.error === b.error }\n    );\n  };\n"]}