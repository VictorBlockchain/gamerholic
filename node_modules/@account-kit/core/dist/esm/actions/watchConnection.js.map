{"version":3,"file":"watchConnection.js","sourceRoot":"","sources":["../../../src/actions/watchConnection.ts"],"names":[],"mappings":"AAEA;;;;;;;;;;;;;;GAcG;AACH,MAAM,UAAU,eAAe,CAAC,MAA6B;IAC3D,OAAO,CAAC,QAA0C,EAAE,EAAE;QACpD,OAAO,MAAM,CAAC,KAAK,CAAC,SAAS,CAC3B,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,KAAK,EACpB,CAAC,KAAK,EAAE,EAAE;YACR,MAAM,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YAErE,IAAI,UAAU,EAAE,CAAC;gBACf,QAAQ,CAAC,UAAU,CAAC,CAAC;YACvB,CAAC;QACH,CAAC,CACF,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import type { AlchemyAccountsConfig, Connection } from \"../types\";\n\n/**\n * Subscribe to changes to the active connection\n *\n * @example\n * ```ts\n * import { watchConnection } from \"@account-kit/core\";\n * // see createConfig for more information on how to create a config\n * import { config } from \"./config\";\n *\n * watchConnection(config)(console.log);\n * ```\n *\n * @param {AlchemyAccountsConfig} config the account config\n * @returns {(onChange: (connection: Connection) => void) => (() => void)} a function which accepts an onChange callback that will be fired when the connection changes and returns a function to unsubscribe from the store\n */\nexport function watchConnection(config: AlchemyAccountsConfig) {\n  return (onChange: (connection: Connection) => void) => {\n    return config.store.subscribe(\n      ({ chain }) => chain,\n      (chain) => {\n        const connection = config.store.getState().connections.get(chain.id);\n\n        if (connection) {\n          onChange(connection);\n        }\n      }\n    );\n  };\n}\n"]}