{"version":3,"file":"getSmartAccountClient.js","sourceRoot":"","sources":["../../../src/actions/getSmartAccountClient.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  createAlchemySmartAccountClient,\n  type AlchemySmartAccountClient,\n  type AlchemySmartAccountClientConfig,\n} from \"@account-kit/infra\";\nimport {\n  accountLoupeActions,\n  lightAccountClientActions,\n  multiOwnerLightAccountClientActions,\n  multiOwnerPluginActions,\n  pluginManagerActions,\n  type AccountLoupeActions,\n  type LightAccount,\n  type LightAccountClientActions,\n  type MultiOwnerLightAccount,\n  type MultiOwnerLightAccountClientActions,\n  type MultiOwnerModularAccount,\n  type MultiOwnerPluginActions,\n  type PluginManagerActions,\n  type ModularAccountV2,\n} from \"@account-kit/smart-contracts\";\nimport type { Address, Chain } from \"viem\";\nimport type {\n  AlchemyAccountsConfig,\n  AlchemySigner,\n  Connection,\n  SupportedAccount,\n  SupportedAccounts,\n  SupportedAccountTypes,\n} from \"../types\";\nimport { createAccount, isModularV2AccountParams } from \"./createAccount.js\";\nimport { getAccount, type GetAccountParams } from \"./getAccount.js\";\nimport { getAlchemyTransport } from \"./getAlchemyTransport.js\";\nimport { getConnection } from \"./getConnection.js\";\nimport { getSignerStatus } from \"./getSignerStatus.js\";\nimport { default7702GasEstimator, default7702UserOpSigner } from \"@aa-sdk/core\";\n\nexport type GetSmartAccountClientParams<\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SupportedAccountTypes = SupportedAccountTypes\n> = Omit<\n  AlchemySmartAccountClientConfig<TChain, SupportedAccount<TAccount>>,\n  \"transport\" | \"account\" | \"chain\"\n> &\n  GetAccountParams<TAccount>;\n\nexport type ClientActions<\n  TAccount extends SupportedAccounts = SupportedAccounts\n> = TAccount extends LightAccount\n  ? LightAccountClientActions<AlchemySigner>\n  : TAccount extends MultiOwnerModularAccount\n  ? MultiOwnerPluginActions<MultiOwnerModularAccount<AlchemySigner>> &\n      PluginManagerActions<MultiOwnerModularAccount<AlchemySigner>> &\n      AccountLoupeActions<MultiOwnerModularAccount<AlchemySigner>>\n  : TAccount extends MultiOwnerLightAccount\n  ? MultiOwnerLightAccountClientActions<AlchemySigner>\n  : TAccount extends ModularAccountV2\n  ? {} // no ma v2 actions\n  : never;\n\nexport type GetSmartAccountClientResult<\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SupportedAccounts = SupportedAccounts\n> = {\n  client?: AlchemySmartAccountClient<TChain, TAccount, ClientActions<TAccount>>;\n  address?: Address;\n  isLoadingClient: boolean;\n  error?: Error;\n};\n\nexport function getSmartAccountClient<\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SupportedAccountTypes = SupportedAccountTypes\n>(\n  params: GetSmartAccountClientParams<TChain, TAccount>,\n  config: AlchemyAccountsConfig\n): GetSmartAccountClientResult<TChain, SupportedAccount<TAccount>>;\n\n/**\n * Obtains a smart account client based on the provided parameters and configuration. Supports creating any of the SupportAccountTypes in Account Kit.\n * If the signer is not connected, or an account is already being intializes, this results in a loading state.\n *\n * @example\n * ```ts\n * import { getSmartAccountClient } from \"@account-kit/core\";\n * // see createConfig for more information on how to create a config\n * import { config } from \"./config\";\n *\n * const { client, address, isLoadingClient } = getSmartAccountClient({\n *  type: \"LightAccount\",\n * }, config);\n * ```\n *\n * @param {GetSmartAccountClientParams} params Parameters for getting the smart account client, including account parameters and client parameters\n * @param {AlchemyAccountsConfig} config The configuration containing the client store and other necessary information\n * @returns {GetSmartAccountClientResult} The result object which includes the client, address, and loading status of the client\n */\nexport function getSmartAccountClient(\n  params: GetSmartAccountClientParams,\n  config: AlchemyAccountsConfig\n): GetSmartAccountClientResult {\n  const { accountParams, type, ...clientParams } = params;\n  const { account, status, error } = getAccount(\n    {\n      type,\n      accountParams,\n    },\n    config\n  );\n  const signerStatus = getSignerStatus(config);\n  const transport = getAlchemyTransport(config);\n  const connection = getConnection(config);\n  const clientState =\n    config.store.getState().smartAccountClients[connection.chain.id]?.[type];\n\n  if (status === \"ERROR\" && clientState?.error) {\n    return clientState;\n  } else if (status === \"ERROR\") {\n    setSmartAccountClientState({\n      config,\n      newState: {\n        client: undefined,\n        address: undefined,\n        isLoadingClient: false,\n        error,\n      },\n      type,\n      connection,\n    });\n\n    return getSmartAccountClientState({\n      config,\n      chainId: connection.chain.id,\n      type,\n    });\n  }\n\n  if (\n    !account ||\n    status === \"INITIALIZING\" ||\n    status === \"RECONNECTING\" ||\n    signerStatus.isAuthenticating ||\n    signerStatus.isInitializing\n  ) {\n    if (!account && signerStatus.isConnected) {\n      createAccount({ type, accountParams }, config);\n    }\n\n    if (clientState && clientState.isLoadingClient) {\n      return clientState;\n    }\n\n    const loadingState = {\n      client: undefined,\n      address:\n        status === \"RECONNECTING\" || status === \"READY\"\n          ? account.address\n          : undefined,\n      isLoadingClient: true,\n    };\n\n    setSmartAccountClientState({\n      config,\n      newState: loadingState,\n      type,\n      connection,\n    });\n\n    return getSmartAccountClientState({\n      config,\n      chainId: connection.chain.id,\n      type,\n    });\n  }\n\n  // if the state of the client wasn't loading before, then we can just return the cached client\n  if (clientState && !clientState.isLoadingClient) {\n    return clientState;\n  }\n\n  const newState = (() => {\n    switch (account.source) {\n      case \"LightAccount\":\n        return {\n          client: createAlchemySmartAccountClient({\n            transport,\n            chain: connection.chain,\n            account: account,\n            policyId: connection.policyId,\n            ...clientParams,\n          }).extend(lightAccountClientActions),\n          address: account.address,\n          isLoadingClient: false,\n        };\n      case \"MultiOwnerLightAccount\":\n        return {\n          client: createAlchemySmartAccountClient({\n            transport,\n            chain: connection.chain,\n            account: account,\n            policyId: connection.policyId,\n            ...clientParams,\n          }).extend(multiOwnerLightAccountClientActions),\n          address: account.address,\n          isLoadingClient: false,\n        };\n      case \"MultiOwnerModularAccount\":\n        return {\n          client: createAlchemySmartAccountClient({\n            transport,\n            chain: connection.chain,\n            account: account,\n            policyId: connection.policyId,\n            ...clientParams,\n          })\n            .extend(multiOwnerPluginActions)\n            .extend(pluginManagerActions)\n            .extend(accountLoupeActions),\n          address: account.address,\n          isLoadingClient: false,\n        };\n      case \"ModularAccountV2\":\n        const is7702 =\n          isModularV2AccountParams(params) &&\n          params.accountParams?.mode === \"7702\";\n        return {\n          client: createAlchemySmartAccountClient({\n            transport,\n            chain: connection.chain,\n            account: account,\n            policyId: connection.policyId,\n            ...(is7702\n              ? {\n                  gasEstimator: default7702GasEstimator(\n                    clientParams.gasEstimator\n                  ),\n                  signUserOperation: default7702UserOpSigner(\n                    clientParams.signUserOperation\n                  ),\n                }\n              : {}),\n            ...clientParams,\n          }),\n          address: account.address,\n          isLoadingClient: false,\n        };\n      default:\n        assertNeverAccountType(account);\n    }\n  })();\n\n  setSmartAccountClientState({\n    config,\n    newState,\n    type,\n    connection,\n  });\n\n  return getSmartAccountClientState({\n    config,\n    chainId: connection.chain.id,\n    type,\n  });\n}\n\nfunction getSmartAccountClientState<\n  TAccountType extends SupportedAccountTypes\n>({\n  config,\n  chainId,\n  type,\n}: {\n  chainId: number;\n  type: TAccountType;\n  config: AlchemyAccountsConfig;\n}) {\n  return config.store.getState().smartAccountClients[chainId][type]!;\n}\n\nfunction setSmartAccountClientState<\n  TAccountType extends SupportedAccountTypes\n>({\n  config,\n  newState,\n  type,\n  connection,\n}: {\n  config: AlchemyAccountsConfig;\n  type: TAccountType;\n  newState: GetSmartAccountClientResult;\n  connection: Connection;\n}) {\n  config.store.setState((state) => ({\n    smartAccountClients: {\n      ...state.smartAccountClients,\n      [connection.chain.id]: {\n        ...state.smartAccountClients[connection.chain.id],\n        [type]: newState,\n      },\n    },\n  }));\n}\n\nfunction assertNeverAccountType(_accountType: never): never {\n  throw new Error(\"Unsupported account type\");\n}\n"]}