import { type CreateLightAccountParams, type CreateMultiOwnerLightAccountParams, type CreateMultiOwnerModularAccountParams, type LightAccountVersion, type CreateModularAccountV2Params } from "@account-kit/smart-contracts";
import { type Transport } from "viem";
import type { AlchemyAccountsConfig, AlchemySigner, SupportedAccountTypes, SupportedAccounts } from "../types.js";
import type { GetAccountParams } from "./getAccount";
type OmitSignerTransportChain<T> = Omit<T, "signer" | "transport" | "chain">;
export type AccountConfig<TAccount extends SupportedAccountTypes> = TAccount extends "LightAccount" ? OmitSignerTransportChain<CreateLightAccountParams<Transport, AlchemySigner, LightAccountVersion<"LightAccount">>> : TAccount extends "MultiOwnerLightAccount" ? OmitSignerTransportChain<CreateMultiOwnerLightAccountParams<Transport, AlchemySigner, LightAccountVersion<"MultiOwnerLightAccount">>> : TAccount extends "MultiOwnerModularAccount" ? OmitSignerTransportChain<CreateMultiOwnerModularAccountParams<Transport, AlchemySigner>> : TAccount extends "ModularAccountV2" ? OmitSignerTransportChain<CreateModularAccountV2Params<Transport, AlchemySigner>> : never;
export type CreateAccountParams<TAccount extends SupportedAccountTypes> = {
    type: TAccount;
    accountParams?: AccountConfig<TAccount>;
};
/**
 * Creates an account of a specified type using the provided parameters and configuration. Supports creating LightAccount and MultiOwnerModularAccount types.
 *
 * @example
 * ```ts
 * import { createAccount } from "@account-kit/core";
 * // see createConfig for more information on how to create a config
 * import { config } from "./config";
 *
 * const account = createAccount({
 *  type: "LightAccount",
 * }, config);
 * ```
 *
 * @param {CreateAccountParams<TAccount>} params The parameters required to create the account, including the type and account parameters
 * @param {AlchemyAccountsConfig} config The configuration object for Alchemy accounts
 * @returns {Promise<SupportedAccounts>} A promise that resolves to the created account object
 */
export declare function createAccount<TAccount extends SupportedAccountTypes>(params: CreateAccountParams<TAccount>, config: AlchemyAccountsConfig): Promise<SupportedAccounts>;
export declare const isModularV2AccountParams: (params: CreateAccountParams<SupportedAccountTypes>) => params is GetAccountParams<"ModularAccountV2">;
export declare const isLightAccountParams: (params: CreateAccountParams<SupportedAccountTypes>) => params is GetAccountParams<"LightAccount">;
export declare const isMultiOwnerLightAccountParams: (params: CreateAccountParams<SupportedAccountTypes>) => params is GetAccountParams<"MultiOwnerLightAccount">;
export declare const isMultiOwnerModularAccountParams: (params: CreateAccountParams<SupportedAccountTypes>) => params is GetAccountParams<"MultiOwnerModularAccount">;
export {};
