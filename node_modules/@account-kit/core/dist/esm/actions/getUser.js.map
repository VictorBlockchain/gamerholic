{"version":3,"file":"getUser.js","sourceRoot":"","sources":["../../../src/actions/getUser.ts"],"names":[],"mappings":"AAKA;;;;;;;;;;;;;;GAcG;AACH,MAAM,CAAC,MAAM,OAAO,GAAG,CACrB,MAA6B,EACY,EAAE;IAC3C,MAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC;IAC1C,IAAI,IAAI,IAAI,IAAI;QAAE,OAAO,IAAI,IAAI,IAAI,CAAC;IAEtC,aAAa;IACb,IAAI,CAAC,IAAI,GAAG,KAAc,CAAC;IAC3B,aAAa;IACb,OAAO,IAAI,CAAC;AACd,CAAC,CAAC","sourcesContent":["import type { User } from \"@account-kit/signer\";\nimport type { AlchemyAccountsConfig } from \"../types\";\n\nexport type GetUserResult = (User & { type: \"eoa\" | \"sca\" }) | null;\n\n/**\n * Returns the currently logged in user if using an SCA with the AlchemySigner\n * or the connected EOA details.\n *\n * @example\n * ```ts\n * import { getUser } from \"@account-kit/core\";\n * import { config } from \"./config\";\n *\n * const user = getUser(config);\n * ```\n *\n * @param {AlchemyAccountsConfig} config the account config containing app state\n * @returns {GetUserResult} the user if the signer or an EOA are connected\n */\nexport const getUser = (\n  config: AlchemyAccountsConfig\n): (User & { type: \"eoa\" | \"sca\" }) | null => {\n  const user = config.store.getState().user;\n  if (user == null) return user ?? null;\n\n  // @ts-ignore\n  user.type = \"sca\" as const;\n  // @ts-ignore\n  return user;\n};\n"]}