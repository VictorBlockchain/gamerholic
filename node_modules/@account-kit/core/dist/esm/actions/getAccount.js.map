{"version":3,"file":"getAccount.js","sourceRoot":"","sources":["../../../src/actions/getAccount.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,mBAAmB,CAAC;AAGxD,OAAO,EACL,wBAAwB,GAEzB,MAAM,oBAAoB,CAAC;AAC5B,OAAO,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AAQzC;;;;;;;;;;;;;;;;;GAiBG;AACH,MAAM,CAAC,MAAM,UAAU,GAAG,CACxB,MAAkC,EAClC,MAA6B,EACD,EAAE;IAC9B,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC;IAClD,MAAM,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;IAC/B,MAAM,OAAO,GAAG,QAAQ,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACpD,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,OAAO,mBAAmB,EAAE,CAAC;IAC/B,CAAC;IAED,IAAI,wBAAwB,CAAC,MAAM,CAAC,IAAI,OAAO,EAAE,MAAM,KAAK,OAAO,EAAE,CAAC;QACpE,MAAM,aAAa,GACjB,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAClE,MAAM,QAAQ,GAAG,aAAa,EAAE,IAAI,IAAI,SAAS,CAAC;QAClD,MAAM,QAAQ,GAAG,MAAM,CAAC,aAAa,EAAE,IAAI,IAAI,SAAS,CAAC;QACzD,IAAI,QAAQ,KAAK,QAAQ,EAAE,CAAC;YAC1B,OAAO,mBAAmB,EAAE,CAAC;QAC/B,CAAC;IACH,CAAC;IAED,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC","sourcesContent":["import { defaultAccountState } from \"../store/store.js\";\nimport type { AccountState } from \"../store/types.js\";\nimport type { AlchemyAccountsConfig, SupportedAccountTypes } from \"../types.js\";\nimport {\n  isModularV2AccountParams,\n  type CreateAccountParams,\n} from \"./createAccount.js\";\nimport { getChain } from \"./getChain.js\";\n\nexport type GetAccountResult<TAccount extends SupportedAccountTypes> =\n  AccountState<TAccount>;\n\nexport type GetAccountParams<TAccount extends SupportedAccountTypes> =\n  CreateAccountParams<TAccount>;\n\n/**\n * Retrieves the account of the specified type from the client store based on the provided configuration.\n *\n * @example\n * ```ts\n * import { getAccount } from \"@account-kit/core\";\n * // see createConfig for more information on how to create a config\n * import { config } from \"./config\";\n *\n * const { account, status } = getAccount({\n *  type: \"LightAccount\"\n * }, config)\n * ```\n *\n * @param {GetAccountParams<TAccount>} params The parameters containing the type of the account to retrieve\n * @param {AlchemyAccountsConfig} config The configuration containing the client store\n * @returns {GetAccountResult<TAccount>} The result which includes the account if found and its status\n */\nexport const getAccount = <TAccount extends SupportedAccountTypes>(\n  params: GetAccountParams<TAccount>,\n  config: AlchemyAccountsConfig\n): GetAccountResult<TAccount> => {\n  const accounts = config.store.getState().accounts;\n  const chain = getChain(config);\n  const account = accounts?.[chain.id]?.[params.type];\n  if (!account) {\n    return defaultAccountState();\n  }\n\n  if (isModularV2AccountParams(params) && account?.status === \"READY\") {\n    const accountConfig =\n      config.store.getState().accountConfigs[chain.id]?.[params.type];\n    const haveMode = accountConfig?.mode ?? \"default\";\n    const wantMode = params.accountParams?.mode ?? \"default\";\n    if (haveMode !== wantMode) {\n      return defaultAccountState();\n    }\n  }\n\n  return account;\n};\n"]}