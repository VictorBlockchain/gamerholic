{"version":3,"file":"watchSmartAccountClient.js","sourceRoot":"","sources":["../../../src/actions/watchSmartAccountClient.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,uBAAuB,EAAE,MAAM,cAAc,CAAC;AAMvD,OAAO,EACL,qBAAqB,GAGtB,MAAM,4BAA4B,CAAC;AAEpC;;;;;;;;;;;;;;;;;;;GAmBG,CAAC,MAAM,UAAU,uBAAuB,CAIzC,MAAqD,EACrD,MAA6B;IAE7B,OAAO,CACL,QAES,EACT,EAAE;QACF,MAAM,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC;QACnD,IAAI,CAAC,SAAS,EAAE,CAAC;YACf,MAAM,IAAI,uBAAuB,CAAC,SAAS,CAAC,CAAC;QAC/C,CAAC;QAED,OAAO,MAAM,CAAC,KAAK,CAAC,SAAS,CAC3B,CAAC,EAAE,YAAY,EAAE,QAAQ,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC;YACtC,YAAY;YACZ,OAAO,EAAE,QAAS,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC;YACzC,KAAK;SACN,CAAC,EACF,GAAG,EAAE;YACH,QAAQ,CAAC,qBAAqB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;QAClD,CAAC,EACD;YACE,UAAU,CAAC,CAAC,EAAE,CAAC;gBACb,OAAO,CACL,CAAC,CAAC,YAAY,KAAK,CAAC,CAAC,YAAY;oBACjC,CAAC,CAAC,OAAO,KAAK,CAAC,CAAC,OAAO;oBACvB,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,KAAK,CACpB,CAAC;YACJ,CAAC;SACF,CACF,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import type { Chain } from \"viem\";\nimport { ClientOnlyPropertyError } from \"../errors.js\";\nimport type {\n  AlchemyAccountsConfig,\n  SupportedAccount,\n  SupportedAccountTypes,\n} from \"../types\";\nimport {\n  getSmartAccountClient,\n  type GetSmartAccountClientParams,\n  type GetSmartAccountClientResult,\n} from \"./getSmartAccountClient.js\";\n\n/**\n * Watches for changes to the smart account client and triggers the provided callback when a change is detected.\n *\n * @example\n * ```ts\n * import { watchSmartAccountClient } from \"@account-kit/core\";\n * // see createConfig for more information on how to create a config\n * import { config } from \"./config\";\n *\n * watchSmartAccountClient({ type: \"LightAccount\" }, config)(console.log);\n * ```\n *\n * @template TAccount extends SupportedAccountTypes\n * @template TTransport extends Transport = Transport\n * @template TChain extends Chain | undefined = Chain | undefined\n *\n * @param {GetSmartAccountClientParams<TChain, TAccount>} params the parameters needed to get the smart account client\n * @param {AlchemyAccountsConfig} config the configuration containing the client store and other settings\n * @returns {(onChange: (client: GetSmartAccountClientResult<TChain, SupportedAccount<TAccount>>) => void) => (() => void)} a function that accepts a callback to be called when the client changes and returns a function to unsubscribe from the store\n */ export function watchSmartAccountClient<\n  TAccount extends SupportedAccountTypes,\n  TChain extends Chain | undefined = Chain | undefined\n>(\n  params: GetSmartAccountClientParams<TChain, TAccount>,\n  config: AlchemyAccountsConfig\n) {\n  return (\n    onChange: (\n      client: GetSmartAccountClientResult<TChain, SupportedAccount<TAccount>>\n    ) => void\n  ) => {\n    const accounts_ = config.store.getState().accounts;\n    if (!accounts_) {\n      throw new ClientOnlyPropertyError(\"account\");\n    }\n\n    return config.store.subscribe(\n      ({ signerStatus, accounts, chain }) => ({\n        signerStatus,\n        account: accounts![chain.id][params.type],\n        chain,\n      }),\n      () => {\n        onChange(getSmartAccountClient(params, config));\n      },\n      {\n        equalityFn(a, b) {\n          return (\n            a.signerStatus === b.signerStatus &&\n            a.account === b.account &&\n            a.chain === b.chain\n          );\n        },\n      }\n    );\n  };\n}\n"]}