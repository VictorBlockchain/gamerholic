{"version":3,"file":"getSigner.js","sourceRoot":"","sources":["../../../src/actions/getSigner.ts"],"names":[],"mappings":"AAEA;;;;;;;;;;;;;;;GAeG;AACH,MAAM,CAAC,MAAM,SAAS,GAAG,CACvB,MAA6B,EACnB,EAAE;IACZ,MAAM,MAAM,GAAa,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,MAAkB,CAAC;IAEpE,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC","sourcesContent":["import type { AlchemyAccountsConfig, AlchemySigner } from \"../types.js\";\n\n/**\n * If there is a signer attached to the client state, it will return it.\n * The signer should always be null on the server, and will be set on the client\n * if the store was properly hydrated.\n *\n * @example\n * ```ts\n * import { getSigner } from \"@account-kit/core\";\n * import { config } from \"./config\";\n *\n * const signer = getSigner(config);\n * ```\n *\n * @param {AlchemyAccountsConfig} config The account config which contains the client store\n * @returns {AlchemySigner | null} the instance of the signer present in the store if it exists, otherwise null\n */\nexport const getSigner = <T extends AlchemySigner>(\n  config: AlchemyAccountsConfig\n): T | null => {\n  const signer: T | null = config.store.getState().signer as T | null;\n\n  return signer;\n};\n"]}