import { type AlchemySmartAccountClient, type AlchemySmartAccountClientConfig } from "@account-kit/infra";
import { type AccountLoupeActions, type LightAccount, type LightAccountClientActions, type MultiOwnerLightAccount, type MultiOwnerLightAccountClientActions, type MultiOwnerModularAccount, type MultiOwnerPluginActions, type PluginManagerActions, type ModularAccountV2 } from "@account-kit/smart-contracts";
import type { Address, Chain } from "viem";
import type { AlchemyAccountsConfig, AlchemySigner, SupportedAccount, SupportedAccounts, SupportedAccountTypes } from "../types";
import { type GetAccountParams } from "./getAccount.js";
export type GetSmartAccountClientParams<TChain extends Chain | undefined = Chain | undefined, TAccount extends SupportedAccountTypes = SupportedAccountTypes> = Omit<AlchemySmartAccountClientConfig<TChain, SupportedAccount<TAccount>>, "transport" | "account" | "chain"> & GetAccountParams<TAccount>;
export type ClientActions<TAccount extends SupportedAccounts = SupportedAccounts> = TAccount extends LightAccount ? LightAccountClientActions<AlchemySigner> : TAccount extends MultiOwnerModularAccount ? MultiOwnerPluginActions<MultiOwnerModularAccount<AlchemySigner>> & PluginManagerActions<MultiOwnerModularAccount<AlchemySigner>> & AccountLoupeActions<MultiOwnerModularAccount<AlchemySigner>> : TAccount extends MultiOwnerLightAccount ? MultiOwnerLightAccountClientActions<AlchemySigner> : TAccount extends ModularAccountV2 ? {} : never;
export type GetSmartAccountClientResult<TChain extends Chain | undefined = Chain | undefined, TAccount extends SupportedAccounts = SupportedAccounts> = {
    client?: AlchemySmartAccountClient<TChain, TAccount, ClientActions<TAccount>>;
    address?: Address;
    isLoadingClient: boolean;
    error?: Error;
};
export declare function getSmartAccountClient<TChain extends Chain | undefined = Chain | undefined, TAccount extends SupportedAccountTypes = SupportedAccountTypes>(params: GetSmartAccountClientParams<TChain, TAccount>, config: AlchemyAccountsConfig): GetSmartAccountClientResult<TChain, SupportedAccount<TAccount>>;
