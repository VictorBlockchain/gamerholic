{"version":3,"file":"createAccount.js","sourceRoot":"","sources":["../../../src/actions/createAccount.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  createLightAccount,\n  createMultiOwnerLightAccount,\n  createMultiOwnerModularAccount,\n  createModularAccountV2,\n  type CreateLightAccountParams,\n  type CreateMultiOwnerLightAccountParams,\n  type CreateMultiOwnerModularAccountParams,\n  type LightAccountVersion,\n  type CreateModularAccountV2Params,\n} from \"@account-kit/smart-contracts\";\nimport { custom, type Transport } from \"viem\";\nimport { ClientOnlyPropertyError } from \"../errors.js\";\nimport { CoreLogger } from \"../metrics.js\";\nimport type {\n  AlchemyAccountsConfig,\n  AlchemySigner,\n  SupportedAccountTypes,\n  SupportedAccounts,\n} from \"../types.js\";\nimport { getBundlerClient } from \"./getBundlerClient.js\";\nimport { getSigner } from \"./getSigner.js\";\nimport { getSignerStatus } from \"./getSignerStatus.js\";\nimport type { GetAccountParams } from \"./getAccount\";\n\ntype OmitSignerTransportChain<T> = Omit<T, \"signer\" | \"transport\" | \"chain\">;\n\nexport type AccountConfig<TAccount extends SupportedAccountTypes> =\n  TAccount extends \"LightAccount\"\n    ? OmitSignerTransportChain<\n        CreateLightAccountParams<\n          Transport,\n          AlchemySigner,\n          LightAccountVersion<\"LightAccount\">\n        >\n      >\n    : TAccount extends \"MultiOwnerLightAccount\"\n    ? OmitSignerTransportChain<\n        CreateMultiOwnerLightAccountParams<\n          Transport,\n          AlchemySigner,\n          LightAccountVersion<\"MultiOwnerLightAccount\">\n        >\n      >\n    : TAccount extends \"MultiOwnerModularAccount\"\n    ? OmitSignerTransportChain<\n        CreateMultiOwnerModularAccountParams<Transport, AlchemySigner>\n      >\n    : TAccount extends \"ModularAccountV2\"\n    ? OmitSignerTransportChain<\n        CreateModularAccountV2Params<Transport, AlchemySigner>\n      >\n    : never;\n\nexport type CreateAccountParams<TAccount extends SupportedAccountTypes> = {\n  type: TAccount;\n  accountParams?: AccountConfig<TAccount>;\n};\n\n/**\n * Creates an account of a specified type using the provided parameters and configuration. Supports creating LightAccount and MultiOwnerModularAccount types.\n *\n * @example\n * ```ts\n * import { createAccount } from \"@account-kit/core\";\n * // see createConfig for more information on how to create a config\n * import { config } from \"./config\";\n *\n * const account = createAccount({\n *  type: \"LightAccount\",\n * }, config);\n * ```\n *\n * @param {CreateAccountParams<TAccount>} params The parameters required to create the account, including the type and account parameters\n * @param {AlchemyAccountsConfig} config The configuration object for Alchemy accounts\n * @returns {Promise<SupportedAccounts>} A promise that resolves to the created account object\n */\nexport async function createAccount<TAccount extends SupportedAccountTypes>(\n  params: CreateAccountParams<TAccount>,\n  config: AlchemyAccountsConfig\n): Promise<SupportedAccounts> {\n  const store = config.store;\n  const accounts = store.getState().accounts;\n  if (!accounts) {\n    throw new ClientOnlyPropertyError(\"account\");\n  }\n  const accountConfigs = store.getState().accountConfigs;\n\n  const bundlerClient = getBundlerClient(config);\n  const transport = custom(bundlerClient);\n  const chain = bundlerClient.chain;\n  const signer = getSigner(config);\n  const signerStatus = getSignerStatus(config);\n\n  if (!signerStatus.isConnected || !signer) {\n    throw new Error(\"Signer not connected\");\n  }\n\n  const cachedAccount = accounts[chain.id]?.[params.type];\n  if (cachedAccount.status !== \"RECONNECTING\" && cachedAccount.account) {\n    return cachedAccount.account;\n  }\n\n  const accountPromise = (() => {\n    if (isLightAccountParams(params)) {\n      return createLightAccount({\n        ...accountConfigs[chain.id]?.[params.type],\n        ...params.accountParams,\n        signer,\n        transport: (opts) => transport({ ...opts, retryCount: 0 }),\n        chain,\n      }).then((account) => {\n        CoreLogger.trackEvent({\n          name: \"account_initialized\",\n          data: {\n            accountType: \"LightAccount\",\n            accountVersion: account.getLightAccountVersion(),\n          },\n        });\n        return account;\n      });\n    } else if (isMultiOwnerLightAccountParams(params)) {\n      return createMultiOwnerLightAccount({\n        ...accountConfigs[chain.id]?.[params.type],\n        ...params.accountParams,\n        signer,\n        transport: (opts) => transport({ ...opts, retryCount: 0 }),\n        chain,\n      }).then((account) => {\n        CoreLogger.trackEvent({\n          name: \"account_initialized\",\n          data: {\n            accountType: \"MultiOwnerLightAccount\",\n            accountVersion: account.getLightAccountVersion(),\n          },\n        });\n        return account;\n      });\n    } else if (isMultiOwnerModularAccountParams(params)) {\n      return createMultiOwnerModularAccount({\n        ...accountConfigs[chain.id]?.[params.type],\n        ...params.accountParams,\n        signer,\n        transport: (opts) => transport({ ...opts, retryCount: 0 }),\n        chain,\n      }).then((account) => {\n        CoreLogger.trackEvent({\n          name: \"account_initialized\",\n          data: {\n            accountType: \"MultiOwnerModularAccount\",\n            accountVersion: \"v1.0.0\",\n          },\n        });\n        return account;\n      });\n    } else if (isModularV2AccountParams(params)) {\n      return createModularAccountV2({\n        ...accountConfigs[chain.id]?.[params.type],\n        ...params.accountParams,\n        signer,\n        transport: (opts) => transport({ ...opts, retryCount: 0 }),\n        chain,\n      }).then((account) => {\n        CoreLogger.trackEvent({\n          name: \"account_initialized\",\n          data: {\n            accountType: \"ModularAccountV2\",\n            accountVersion: \"v2.0.0\",\n          },\n        });\n        return account;\n      });\n    } else {\n      throw new Error(`Unsupported account type: ${params.type}`);\n    }\n  })();\n\n  if (cachedAccount.status !== \"RECONNECTING\") {\n    store.setState((state) => ({\n      accounts: {\n        ...accounts,\n        [chain.id]: {\n          ...accounts[chain.id],\n          [params.type]: {\n            status: \"INITIALIZING\",\n            account: accountPromise,\n          },\n        },\n      },\n      accountConfigs: {\n        ...state.accountConfigs,\n        [chain.id]: {\n          ...state.accountConfigs[chain.id],\n          [params.type]: {\n            ...params.accountParams,\n          },\n        },\n      },\n    }));\n  }\n\n  try {\n    const account = await accountPromise;\n    const initCode = await account.getInitCode();\n    store.setState((state) => ({\n      accounts: {\n        ...accounts,\n        [chain.id]: {\n          ...accounts[chain.id],\n          [params.type]: {\n            status: \"READY\",\n            account,\n          },\n        },\n      },\n      accountConfigs: {\n        ...state.accountConfigs,\n        [chain.id]: {\n          ...state.accountConfigs[chain.id],\n          [params.type]: {\n            ...params.accountParams,\n            accountAddress: account.address,\n            initCode,\n          },\n        },\n      },\n    }));\n  } catch (error) {\n    store.setState(() => ({\n      accounts: {\n        ...accounts,\n        [chain.id]: {\n          ...accounts[chain.id],\n          [params.type]: {\n            status: \"ERROR\",\n            error,\n          },\n        },\n      },\n    }));\n  }\n\n  return accountPromise;\n}\n\nexport const isModularV2AccountParams = (\n  params: CreateAccountParams<SupportedAccountTypes>\n): params is GetAccountParams<\"ModularAccountV2\"> => {\n  return params.type === \"ModularAccountV2\";\n};\n\nexport const isLightAccountParams = (\n  params: CreateAccountParams<SupportedAccountTypes>\n): params is GetAccountParams<\"LightAccount\"> => {\n  return params.type === \"LightAccount\";\n};\n\nexport const isMultiOwnerLightAccountParams = (\n  params: CreateAccountParams<SupportedAccountTypes>\n): params is GetAccountParams<\"MultiOwnerLightAccount\"> => {\n  return params.type === \"MultiOwnerLightAccount\";\n};\n\nexport const isMultiOwnerModularAccountParams = (\n  params: CreateAccountParams<SupportedAccountTypes>\n): params is GetAccountParams<\"MultiOwnerModularAccount\"> => {\n  return params.type === \"MultiOwnerModularAccount\";\n};\n"]}