{"version":3,"file":"disconnect.js","sourceRoot":"","sources":["../../../src/actions/disconnect.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,qBAAqB,CAAC;AAC1D,OAAO,EAAE,UAAU,IAAI,gBAAgB,EAAE,MAAM,aAAa,CAAC;AAC7D,OAAO,EAAE,0BAA0B,EAAE,MAAM,mBAAmB,CAAC;AAE/D,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAE3C;;;;;;;;;;;;;;;;;GAiBG;AACH,MAAM,CAAC,KAAK,UAAU,UAAU,CAAC,MAA6B;IAC5D,MAAM,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC;IACjC,MAAM,gBAAgB,CAAC,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;IACrD,MAAM,MAAM,EAAE,UAAU,EAAE,CAAC;IAE3B,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;IAEpC,6BAA6B;IAC7B,uBAAuB,EAAE,CAAC;IAE1B,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,eAAe,EAAE,CAAC,CAAC;IAE5D,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAChC,YAAY,EAAE,0BAA0B,CACtC,mBAAmB,CAAC,YAAY,EAChC,KAAK,CAAC,YAAY,CAAC,KAAK,CACzB;KACF,CAAC,CAAC,CAAC;AACN,CAAC;AAED,wDAAwD;AACxD,2DAA2D;AAC3D,MAAM,uBAAuB,GAAG,GAAG,EAAE;IACnC,iCAAiC;IACjC,IAAI,qBAAqB,GAAG,IAAI,CAAC;IACjC,MAAM,aAAa,GAAG,SAAS,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC;IAErE,aAAa,CAAC,eAAe,GAAG,GAAG,EAAE;QACnC,IAAI,aAAa,CAAC,MAAM,CAAC,OAAO,KAAK,CAAC,EAAE,CAAC;YACvC,qBAAqB,GAAG,KAAK,CAAC;YAE9B,oEAAoE;YACpE,SAAS,CAAC,cAAc,CAAC,8BAA8B,CAAC,CAAC;QAC3D,CAAC;IACH,CAAC,CAAC;IAEF,aAAa,CAAC,SAAS,GAAG,GAAG,EAAE;QAC7B,IAAI,CAAC,qBAAqB;YAAE,OAAO;QAEnC,IAAI,CAAC;YACH,MAAM,EAAE,GAAG,aAAa,CAAC,MAAM,CAAC;YAEhC,MAAM,GAAG,GAAG,EAAE,CAAC,WAAW,CAAC,CAAC,iBAAiB,CAAC,EAAE,WAAW,CAAC,CAAC;YAE7D,MAAM,KAAK,GAAG,GAAG,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;YAEjD,cAAc;YACd,KAAK,CAAC,KAAK,EAAE,CAAC;QAChB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CACX,uDAAuD,EACvD,KAAK,CACN,CAAC;QACJ,CAAC;IACH,CAAC,CAAC;IAEF,aAAa,CAAC,OAAO,GAAG,GAAG,EAAE;QAC3B,OAAO,CAAC,KAAK,CAAC,sDAAsD,CAAC,CAAC;IACxE,CAAC,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { AlchemySignerStatus } from \"@account-kit/signer\";\nimport { disconnect as wagmi_disconnect } from \"@wagmi/core\";\nimport { convertSignerStatusToState } from \"../store/store.js\";\nimport type { AlchemyAccountsConfig } from \"../types\";\nimport { getSigner } from \"./getSigner.js\";\n\n/**\n * Disconnects the current signer, accounts, and clears the store.\n *\n * @example\n * ```ts\n * import { disconnect, createConfig } from \"@account-kit/core\";\n * import { sepolia } from \"@account-kit/infra\";\n *\n * const config = createConfig({\n *  chain: sepolia,\n *  apiKey: \"your-api-key\",\n * });\n *\n * await disconnect(config);\n * ```\n *\n * @param {AlchemyAccountsConfig} config The configuration containing the store to be cleared\n */\nexport async function disconnect(config: AlchemyAccountsConfig): Promise<void> {\n  const signer = getSigner(config);\n  await wagmi_disconnect(config._internal.wagmiConfig);\n  await signer?.disconnect();\n\n  config.store.persist.clearStorage();\n\n  // Clear Wallet Connect store\n  clearWalletConnectStore();\n\n  config.store.setState(() => config.store.getInitialState());\n\n  config.store.setState((state) => ({\n    signerStatus: convertSignerStatusToState(\n      AlchemySignerStatus.DISCONNECTED,\n      state.signerStatus.error\n    ),\n  }));\n}\n\n// Function to clear the Wallet Connect store to prevent\n// Persistence of Wallet Connect connection state on error.\nconst clearWalletConnectStore = () => {\n  // Open Wallet Connect Indexed DB\n  let walletConnectDBExists = true;\n  const dbOpenRequest = indexedDB.open(\"WALLET_CONNECT_V2_INDEXED_DB\");\n\n  dbOpenRequest.onupgradeneeded = () => {\n    if (dbOpenRequest.result.version === 1) {\n      walletConnectDBExists = false;\n\n      // Remove the Database created from the indexedDB.open() call above.\n      indexedDB.deleteDatabase(\"WALLET_CONNECT_V2_INDEXED_DB\");\n    }\n  };\n\n  dbOpenRequest.onsuccess = () => {\n    if (!walletConnectDBExists) return;\n\n    try {\n      const db = dbOpenRequest.result;\n\n      const txn = db.transaction([\"keyvaluestorage\"], \"readwrite\");\n\n      const store = txn.objectStore(\"keyvaluestorage\");\n\n      // Clear Store\n      store.clear();\n    } catch (error) {\n      console.error(\n        \"Error clearing Wallet Connect DB. Cannot clear store.\",\n        error\n      );\n    }\n  };\n\n  dbOpenRequest.onerror = () => {\n    console.error(\"Error opening Wallet Connect DB. Cannot clear store.\");\n  };\n};\n"]}