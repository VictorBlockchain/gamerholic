{"version":3,"file":"store.js","sourceRoot":"","sources":["../../../src/store/store.ts"],"names":[],"mappings":"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","sourcesContent":["import type { NoUndefined } from \"@aa-sdk/core\";\nimport { alchemy, createAlchemyPublicRpcClient } from \"@account-kit/infra\";\nimport {\n  AlchemySignerStatus,\n  AlchemyWebSigner,\n  type ErrorInfo,\n} from \"@account-kit/signer\";\nimport type { Chain } from \"viem\";\nimport {\n  createJSONStorage,\n  persist,\n  subscribeWithSelector,\n} from \"zustand/middleware\";\nimport { createStore } from \"zustand/vanilla\";\nimport { DEFAULT_IFRAME_CONTAINER_ID } from \"../createConfig.js\";\nimport type { Connection, SupportedAccountTypes } from \"../types.js\";\nimport { storeReplacer } from \"../utils/replacer.js\";\nimport { storeReviver } from \"../utils/reviver.js\";\nimport {\n  DEFAULT_STORAGE_KEY,\n  type AccountState,\n  type ClientStoreConfig,\n  type CreateAccountKitStoreParams,\n  type SignerStatus,\n  type Store,\n  type StoreState,\n} from \"./types.js\";\n\nexport const STORAGE_VERSION = 14;\n\nexport const createAccountKitStore = (\n  params: CreateAccountKitStoreParams\n): Store => {\n  const {\n    connections,\n    storage = typeof window !== \"undefined\" ? localStorage : undefined,\n    ssr,\n  } = params;\n\n  // State defined in here should work either on the server or on the client\n  // bundler client for example can be used in either setting to make RPC calls\n  const store = createStore(\n    subscribeWithSelector(\n      storage\n        ? persist(() => createInitialStoreState(params), {\n            name: DEFAULT_STORAGE_KEY,\n            storage: createJSONStorage<StoreState>(() => storage, {\n              replacer: (key, value) => {\n                if (key === \"bundlerClient\") return undefined;\n\n                if (key === \"user\") {\n                  const user = value as StoreState[\"user\"];\n                  if (!user) return undefined;\n\n                  return {\n                    address: user.address,\n                    orgId: user.orgId,\n                    userId: user.userId,\n                    email: user.email,\n                  } as StoreState[\"user\"];\n                }\n\n                if (key === \"chain\") {\n                  return { id: (value as Chain).id };\n                }\n\n                if (key === \"smartAccountClients\") {\n                  return undefined;\n                }\n\n                return storeReplacer(key, value);\n              },\n              reviver: (key, value) => {\n                if (key === \"chain\") {\n                  return connections.find(\n                    (c) => c.chain.id === (value as { id: number }).id\n                  )?.chain;\n                }\n\n                return storeReviver(key, value);\n              },\n            }),\n            migrate: (persisted, version) => {\n              if (version < STORAGE_VERSION) {\n                return createInitialStoreState(params);\n              }\n\n              return persisted as StoreState;\n            },\n            merge: (persisted, current) => {\n              const persistedState = persisted as StoreState;\n              if (persistedState.chain == null) {\n                return createInitialStoreState(params);\n              }\n\n              const connectionsMap = createConnectionsMap(connections);\n              if (!connectionsMap.has(persistedState.chain.id)) {\n                return createInitialStoreState(params);\n              }\n\n              // simple check to ensure the same chains are present\n              if (persistedState.connections.size !== connectionsMap.size) {\n                return createInitialStoreState(params);\n              }\n\n              // check if all of the connections in the config match the persisted connections\n              if (\n                !connections.every(\n                  (c) =>\n                    persistedState.connections.has(c.chain.id) &&\n                    deepEquals(persistedState.connections.get(c.chain.id), c)\n                )\n              ) {\n                return createInitialStoreState(params);\n              }\n\n              // handle the case where the signer config changes\n              if (!deepEquals(current.config, persistedState.config)) {\n                return createInitialStoreState(params);\n              }\n\n              return {\n                // this is the default merge behavior\n                ...current,\n                ...persistedState,\n                smartAccountClients: createEmptySmartAccountClientState(\n                  connections.map((c) => c.chain)\n                ),\n                connections: connectionsMap,\n                bundlerClient: createAlchemyPublicRpcClient({\n                  chain: persistedState.chain,\n                  transport: alchemy(\n                    persistedState.connections.get(persistedState.chain.id)!\n                      .transport\n                  ),\n                }),\n              };\n            },\n            skipHydration: ssr,\n            partialize: (state) => {\n              const { signer, accounts, ...writeableState } = state;\n              return writeableState;\n            },\n            version: STORAGE_VERSION,\n          })\n        : () => createInitialStoreState(params)\n    )\n  );\n\n  addClientSideStoreListeners(store);\n\n  return store;\n};\n\nconst createInitialStoreState = (\n  params: CreateAccountKitStoreParams\n): StoreState => {\n  const { connections, chain, client, sessionConfig } = params;\n  const connectionMap = createConnectionsMap(connections);\n\n  if (!connectionMap.has(chain.id)) {\n    throw new Error(\"Chain not found in connections\");\n  }\n\n  const chains = connections.map((c) => c.chain);\n  const accountConfigs = createEmptyAccountConfigState(chains);\n  const baseState: StoreState = {\n    bundlerClient: createAlchemyPublicRpcClient({\n      chain,\n      transport: alchemy(connectionMap.get(chain.id)!.transport),\n    }),\n    chain,\n    connections: connectionMap,\n    accountConfigs,\n    config: { client, sessionConfig },\n    signerStatus: convertSignerStatusToState(\n      AlchemySignerStatus.INITIALIZING,\n      undefined\n    ),\n    smartAccountClients: createEmptySmartAccountClientState(chains),\n  };\n\n  if (typeof window === \"undefined\") {\n    return baseState;\n  }\n\n  const accounts = createDefaultAccountState(chains);\n\n  return {\n    ...baseState,\n    accounts,\n  };\n};\n\nconst createConnectionsMap = (connections: Connection[]) => {\n  return connections.reduce((acc, connection) => {\n    acc.set(connection.chain.id, connection);\n    return acc;\n  }, new Map<number, Connection>());\n};\n\n/**\n * Given initial client store parameters, it initializes an AlchemySigner instance.\n * This should only be called on the client.\n *\n * @param {CreateClientStoreParams} params to configure and create the signer\n * @returns {AlchemySigner} an instance of the AlchemySigner\n */\nexport const createSigner = (params: ClientStoreConfig) => {\n  const { client, sessionConfig } = params;\n  const { iframeContainerId } = client.iframeConfig ?? {\n    iframeContainerId: DEFAULT_IFRAME_CONTAINER_ID,\n  };\n\n  let iframeContainer = document.getElementById(iframeContainerId);\n  if (iframeContainer !== null) {\n    iframeContainer.innerHTML = \"\";\n    iframeContainer.style.display = \"none\";\n  } else {\n    iframeContainer = document.createElement(\"div\");\n    iframeContainer.id = iframeContainerId;\n    iframeContainer.style.display = \"none\";\n    document.body.appendChild(iframeContainer);\n  }\n\n  const signer = new AlchemyWebSigner({\n    client: {\n      ...client,\n      iframeConfig: {\n        ...client.iframeConfig,\n        iframeContainerId,\n      },\n    },\n    sessionConfig,\n  });\n\n  if (client.enablePopupOauth) {\n    signer.preparePopupOauth();\n  }\n\n  return signer;\n};\n\nconst AUTHENTICATING_STATUSES: AlchemySignerStatus[] = [\n  AlchemySignerStatus.AUTHENTICATING_EMAIL,\n  AlchemySignerStatus.AUTHENTICATING_OAUTH,\n  AlchemySignerStatus.AUTHENTICATING_PASSKEY,\n  AlchemySignerStatus.AWAITING_EMAIL_AUTH,\n  AlchemySignerStatus.AWAITING_OTP_AUTH,\n];\n\n/**\n * Converts the AlchemySigner's status to a more readable object\n *\n * @param {AlchemySignerStatus} alchemySignerStatus Enum value of the AlchemySigner's status to convert\n * @param {ErrorInfo | undefined} error the current signer error, if present\n * @returns {SignerStatus} an object containing the original status as well as booleans to check the current state\n */\nexport const convertSignerStatusToState = (\n  alchemySignerStatus: AlchemySignerStatus,\n  error: ErrorInfo | undefined\n): SignerStatus => ({\n  status: alchemySignerStatus,\n  error,\n  isInitializing: alchemySignerStatus === AlchemySignerStatus.INITIALIZING,\n  isAuthenticating: AUTHENTICATING_STATUSES.includes(alchemySignerStatus),\n  isConnected: alchemySignerStatus === AlchemySignerStatus.CONNECTED,\n  isDisconnected: alchemySignerStatus === AlchemySignerStatus.DISCONNECTED,\n});\n\n// This is done this way to avoid issues with React requiring static state\nconst staticState: AccountState<SupportedAccountTypes> = {\n  status: \"DISCONNECTED\",\n  account: undefined,\n};\n\n/**\n * Returns the default state for an account of a supported type.\n *\n * @example\n * ```ts\n * import { defaultAccountState } from \"@account-kit/core\";\n *\n * const defaultLightAccountState = defaultAccountState<\"LightAccount\">();\n * ```\n *\n * @template T\n * @returns {AccountState<T>} The default state for the specified account type\n */\nexport const defaultAccountState = <\n  T extends SupportedAccountTypes\n>(): AccountState<T> => staticState;\n\nconst addClientSideStoreListeners = (store: Store) => {\n  if (typeof window === \"undefined\") {\n    return;\n  }\n\n  store.subscribe(\n    ({ signer }) => signer,\n    (signer) => {\n      if (!signer) return;\n      signer.on(\"statusChanged\", (status) => {\n        store.setState((state) => ({\n          signerStatus: convertSignerStatusToState(\n            status,\n            state.signerStatus.error\n          ),\n        }));\n      });\n\n      // TODO: handle this appropriately, see https://github.com/alchemyplatform/aa-sdk/pull/1140#discussion_r1837265706\n      // signer.on(\"newUserSignup\", () => console.log(\"got new user signup\"));\n\n      signer.on(\"connected\", (user) => store.setState({ user }));\n\n      signer.on(\"disconnected\", () => {\n        const chains = [...store.getState().connections.values()].map(\n          (c) => c.chain\n        );\n        store.setState({\n          user: undefined,\n          accountConfigs: createEmptyAccountConfigState(chains),\n          accounts: createDefaultAccountState(chains),\n        });\n      });\n\n      signer.on(\"errorChanged\", (error) =>\n        store.setState((state) => ({\n          signerStatus: convertSignerStatusToState(\n            state.signerStatus.status,\n            error\n          ),\n        }))\n      );\n    },\n    { fireImmediately: true }\n  );\n};\n\nconst createEmptyAccountConfigState = (chains: Chain[]) => {\n  return chains.reduce((acc, chain) => {\n    acc[chain.id] = {};\n    return acc;\n  }, {} as StoreState[\"accountConfigs\"]);\n};\n\n/**\n * Creates the default account state for the given chains.\n *\n * @param {Chain[]} chains The chains to create the account state for\n * @returns {NoUndefined<StoreState[\"accounts\"]>} The default account state for the given chains\n */\nexport const createDefaultAccountState = (chains: Chain[]) => {\n  return chains.reduce((acc, chain) => {\n    acc[chain.id] = {\n      LightAccount: defaultAccountState<\"LightAccount\">(),\n      MultiOwnerModularAccount:\n        defaultAccountState<\"MultiOwnerModularAccount\">(),\n      MultiOwnerLightAccount: defaultAccountState<\"MultiOwnerLightAccount\">(),\n      ModularAccountV2: defaultAccountState<\"ModularAccountV2\">(),\n    };\n    return acc;\n  }, {} as NoUndefined<StoreState[\"accounts\"]>);\n};\n\nexport const createEmptySmartAccountClientState = (chains: Chain[]) => {\n  return chains.reduce((acc, chain) => {\n    acc[chain.id] = {};\n\n    return acc;\n  }, {} as StoreState[\"smartAccountClients\"]);\n};\n\nconst deepEquals = (obj1: any, obj2: any) => {\n  if (typeof obj1 !== typeof obj2) return false;\n  if (typeof obj1 !== \"object\") return obj1 === obj2;\n  if (obj1 === null && obj2 === null) return true;\n  if (obj1 === null || obj2 === null) return false;\n  if (obj1.length !== obj2.length) return false;\n\n  for (const key in obj1) {\n    if (!deepEquals(obj1[key], obj2[key])) return false;\n  }\n\n  return true;\n};\n"]}