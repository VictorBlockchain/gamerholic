{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/store/types.ts"],"names":[],"mappings":"AAqBA,MAAM,CAAC,MAAM,mBAAmB,GAAG,uBAAuB,CAAC","sourcesContent":["import type { ClientWithAlchemyMethods } from \"@account-kit/infra\";\nimport type {\n  AlchemySignerParams,\n  AlchemySignerStatus,\n  AlchemySignerWebClient,\n  ErrorInfo,\n  User,\n} from \"@account-kit/signer\";\nimport type { State as WagmiState } from \"@wagmi/core\";\nimport type { Address, Chain } from \"viem\";\nimport type { PartialBy } from \"viem/chains\";\nimport type { Mutate, StoreApi } from \"zustand/vanilla\";\nimport type { AccountConfig } from \"../actions/createAccount\";\nimport type { GetSmartAccountClientResult } from \"../actions/getSmartAccountClient\";\nimport type {\n  AlchemySigner,\n  Connection,\n  SupportedAccount,\n  SupportedAccountTypes,\n} from \"../types\";\n\nexport const DEFAULT_STORAGE_KEY = \"alchemy-account-state\";\n\nexport type AccountState<TAccount extends SupportedAccountTypes> =\n  | {\n      status: \"INITIALIZING\";\n      account: Promise<SupportedAccount<TAccount>>;\n      error?: never;\n    }\n  | {\n      status: \"RECONNECTING\";\n      account: {\n        address: Address;\n      };\n      error?: never;\n    }\n  | {\n      status: \"READY\";\n      account: SupportedAccount<TAccount>;\n      error?: never;\n    }\n  | { status: \"DISCONNECTED\"; account: undefined; error?: never }\n  | { status: \"ERROR\"; account: undefined; error: Error };\n\nexport type ClientStoreConfig = {\n  client: PartialBy<\n    Exclude<AlchemySignerParams[\"client\"], AlchemySignerWebClient>,\n    \"iframeConfig\"\n  >;\n  sessionConfig?: AlchemySignerParams[\"sessionConfig\"];\n};\n\nexport type SignerStatus = {\n  status: AlchemySignerStatus;\n  error?: ErrorInfo;\n  isInitializing: boolean;\n  isAuthenticating: boolean;\n  isConnected: boolean;\n  isDisconnected: boolean;\n};\n\nexport type StoredState = {\n  alchemy: Omit<StoreState, \"signer\" | \"accounts\" | \"bundlerClient\">;\n  wagmi?: WagmiState;\n};\n\nexport type CreateAccountKitStoreParams = ClientStoreConfig & {\n  connections: Connection[];\n  chain: Chain;\n  client: PartialBy<\n    Exclude<AlchemySignerParams[\"client\"], AlchemySignerWebClient>,\n    \"iframeConfig\"\n  >;\n  sessionConfig?: AlchemySignerParams[\"sessionConfig\"];\n  storage?: Storage;\n  ssr?: boolean;\n};\n\nexport type StoreState = {\n  // non-serializable\n  signer?: AlchemySigner;\n  accounts?: {\n    [chain: number]: {\n      [key in SupportedAccountTypes]: AccountState<key>;\n    };\n  };\n  smartAccountClients: {\n    [chain: number]: Partial<{\n      [key in SupportedAccountTypes]: GetSmartAccountClientResult<\n        Chain,\n        SupportedAccount<key>\n      >;\n    }>;\n  };\n  bundlerClient: ClientWithAlchemyMethods;\n  // serializable state\n  // NOTE: in some cases this can be serialized to cookie storage\n  // be mindful of how big this gets. cookie limit 4KB\n  config: ClientStoreConfig;\n  accountConfigs: {\n    [chain: number]: Partial<{\n      [key in SupportedAccountTypes]: AccountConfig<key>;\n    }>;\n  };\n  user?: User;\n  signerStatus: SignerStatus;\n  chain: Chain;\n  connections: Map<number, Connection>;\n};\n\ntype Expanded<T> = { [K in keyof T]: T[K] };\n\ntype Middleware = [\n  [\"zustand/subscribeWithSelector\", never],\n  [\"zustand/persist\", StoreState]\n];\n\nexport type Store = Expanded<Mutate<StoreApi<StoreState>, Middleware>>;\n"]}