{"version":3,"file":"createConfig.js","sourceRoot":"","sources":["../../src/createConfig.ts"],"names":[],"mappings":"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","sourcesContent":["import { DEFAULT_SESSION_MS } from \"@account-kit/signer\";\nimport { createStorage, createConfig as createWagmiConfig } from \"@wagmi/core\";\nimport { getBundlerClient } from \"./actions/getBundlerClient.js\";\nimport { CoreLogger } from \"./metrics.js\";\nimport { createAccountKitStore } from \"./store/store.js\";\nimport { DEFAULT_STORAGE_KEY } from \"./store/types.js\";\nimport type {\n  AlchemyAccountsConfig,\n  Connection,\n  CreateConfigProps,\n} from \"./types.js\";\nimport { createSigner as createWebSigner } from \"./environments/web/createSigner.js\";\n\nexport const DEFAULT_IFRAME_CONTAINER_ID = \"alchemy-signer-iframe-container\";\n\n/**\n * Creates an AlchemyAccountsConfig object that can be used in conjunction with\n * the actions exported from `@account-kit/core`.\n *\n * The config contains core and client stores that can be used to manage account state\n * in your application.\n *\n * @example\n * ```ts\n * import { createConfig } from \"@account-kit/core\";\n * import { sepolia } from \"@account-kit/infra\";\n *\n * const config = createConfig({\n *  chain: sepolia,\n *  transport: alchemy({ apiKey: \"your-api-key\" }),\n * });\n * ```\n *\n * @param {CreateConfigProps} params The parameters to create the config with\n * @returns {AlchemyAccountsConfig} An alchemy account config object containing the core and client store\n */\nexport const createConfig = (\n  params: CreateConfigProps\n): AlchemyAccountsConfig => {\n  const {\n    chain,\n    iframeConfig,\n    rootOrgId,\n    rpId,\n    sessionConfig,\n    signerConnection,\n    ssr,\n    storage,\n    connectors,\n    oauthCallbackUrl,\n    enablePopupOauth,\n    _internal: { createSigner } = {},\n    ...connectionConfig\n  } = params;\n\n  const connections: Connection[] = [];\n  if (connectionConfig.chains == null) {\n    connections.push({\n      transport: connectionConfig.transport.config,\n      policyId: connectionConfig.policyId,\n      chain,\n    });\n  } else {\n    connectionConfig.chains.forEach(({ chain, policyId, transport }) => {\n      connections.push({\n        transport: transport?.config ?? connectionConfig.transport!.config,\n        chain,\n        policyId: policyId ?? connectionConfig.policyId,\n      });\n    });\n  }\n\n  const defaultConnection = connections[0].transport;\n  const store = createAccountKitStore({\n    connections,\n    chain,\n    client: {\n      connection:\n        signerConnection ??\n        defaultConnection.alchemyConnection ??\n        defaultConnection,\n      iframeConfig,\n      rootOrgId,\n      rpId,\n      oauthCallbackUrl,\n      enablePopupOauth,\n    },\n    sessionConfig,\n    storage: storage?.(\n      sessionConfig\n        ? {\n            domain: sessionConfig.domain,\n          }\n        : undefined\n    ),\n    ssr,\n  });\n\n  const wagmiConfig = createWagmiConfig({\n    connectors,\n    chains: [chain, ...connections.map((c) => c.chain)],\n    client: () => getBundlerClient(config),\n    storage: createStorage({\n      key: `${DEFAULT_STORAGE_KEY}:wagmi`,\n      storage: storage\n        ? storage()\n        : typeof window !== \"undefined\"\n        ? localStorage\n        : undefined,\n    }),\n    ssr,\n  });\n\n  const config: AlchemyAccountsConfig = {\n    store: store,\n    _internal: {\n      ssr,\n      createSigner: createSigner ?? createWebSigner, // <-- Default to web signer if not provided\n      wagmiConfig,\n      storageKey: \"alchemy-account-state\",\n      sessionLength: sessionConfig?.expirationTimeMs ?? DEFAULT_SESSION_MS,\n    },\n  };\n\n  CoreLogger.trackEvent({\n    name: \"config_created\",\n    data: {\n      ssr: ssr ?? false,\n      chainIds: connections.map((x) => x.chain.id),\n    },\n  });\n\n  return config;\n};\n"]}