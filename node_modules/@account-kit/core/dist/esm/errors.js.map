{"version":3,"file":"errors.js","sourceRoot":"","sources":["../../src/errors.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,IAAI,aAAa,EAAE,MAAM,cAAc,CAAC;AAE1D,OAAO,EAAE,OAAO,EAAE,MAAM,cAAc,CAAC;AAEvC;;GAEG;AACH,MAAM,OAAgB,SAAU,SAAQ,aAAa;IAArD;;QACE,sFAAsF;QAC7E;;;;mBAAU,OAAO;WAAC;IAC7B,CAAC;CAAA;AAED;;GAEG;AACH,MAAM,OAAO,uBAAwB,SAAQ,SAAS;IAGpD;;;;OAIG;IACH,YAAY,QAAgB;QAC1B,KAAK,CAAC,GAAG,QAAQ,kCAAkC,CAAC,CAAC;QARvD;;;;mBAAe,yBAAyB;WAAC;IASzC,CAAC;CACF;AAED;;;GAGG;AACH,MAAM,OAAO,kBAAmB,SAAQ,SAAS;IAG/C;;;;;;;;;;;;OAYG;IACH,YAAY,KAAY;QACtB,KAAK,CAAC,UAAU,KAAK,CAAC,IAAI,0CAA0C,EAAE;YACpE,QAAQ,EAAE,mDAAmD;SAC9D,CAAC,CAAC;QAlBL;;;;mBAAe,oBAAoB;WAAC;IAmBpC,CAAC;CACF","sourcesContent":["import { BaseError as CoreBaseError } from \"@aa-sdk/core\";\nimport type { Chain } from \"viem\";\nimport { VERSION } from \"./version.js\";\n\n/**\n * Represents the base class for custom errors, inheriting from `CoreBaseError` and overriding the version with a specific version number.\n */\nexport abstract class BaseError extends CoreBaseError {\n  // This version could be different from the aa-core version so we overwrite this here.\n  override version = VERSION;\n}\n\n/**\n * Error thrown when a client only property is accessed on the server\n */\nexport class ClientOnlyPropertyError extends BaseError {\n  name: string = \"ClientOnlyPropertyError\";\n\n  /**\n   * Creates a new ClientOnlyPropertyError\n   *\n   * @param {string} property the name of the property that is only available on the client\n   */\n  constructor(property: string) {\n    super(`${property} is only available on the client`);\n  }\n}\n\n/**\n * Error thrown when a client does not have a chain configured in the connections object\n * This is not really meant to be used out of the SDK, but is exported for convenience (ie. matching errors are of an instance of this class)\n */\nexport class ChainNotFoundError extends BaseError {\n  name: string = \"ChainNotFoundError\";\n\n  /**\n   * Constructs a new error indicating that the specified chain was not found in the connections configuration object.\n   *\n   * @example\n   * ```ts\n   * import { ChainNotFoundError } from \"@account-kit/core\";\n   * import { sepolia } from \"@account-kit/infra\";\n   *\n   * throw new ChainNotFoundError(sepolia);\n   * ```\n   *\n   * @param {Chain} chain The chain for which the error is being thrown\n   */\n  constructor(chain: Chain) {\n    super(`Chain (${chain.name}) not found in connections config object`, {\n      docsPath: \"https://accountkit.alchemy.com/react/createConfig\",\n    });\n  }\n}\n"]}