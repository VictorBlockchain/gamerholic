import { isSmartAccountWithSigner, sendTransaction, sendTransactions, sendUserOperation, } from "@aa-sdk/core";
import { simulateUserOperationChanges } from "../../actions/simulateUserOperationChanges.js";
import { InfraLogger } from "../../metrics.js";
/**
 * Provides a set of actions for interacting with the Alchemy Smart Account client, including the ability to simulate user operations.
 *
 * @example
 * ```ts
 * import { alchemyActions } from "@account-kit/infra";
 * import { createPublicClient } from "viem";
 *
 * const client = createPublicClient(...);
 * const clientWithAlchemyActions = client.extend(alchemyActions);
 * ```
 *
 * @param {Client<TTransport, TChain, TAccount>} client The client instance used to perform actions
 * @returns {AlchemySmartAccountClientActions<TAccount, TContext>} An object containing Alchemy Smart Account client actions
 */
export const alchemyActions = (client) => ({
    simulateUserOperation: async (args) => simulateUserOperationChanges(client, args),
    sendUserOperation: async (args) => {
        const { account = client.account } = args;
        const result = sendUserOperation(client, args);
        logSendUoEvent(client.chain.id, account);
        return result;
    },
    sendTransaction: async (args, overrides, context) => {
        const { account = client.account } = args;
        const result = await sendTransaction(client, args, overrides, context);
        logSendUoEvent(client.chain.id, account);
        return result;
    },
    async sendTransactions(args) {
        const { account = client.account } = args;
        const result = sendTransactions(client, args);
        logSendUoEvent(client.chain.id, account);
        return result;
    },
});
function logSendUoEvent(chainId, account) {
    const signerType = isSmartAccountWithSigner(account)
        ? account.getSigner().signerType
        : "unknown";
    InfraLogger.trackEvent({
        name: "client_send_uo",
        data: {
            chainId,
            signerType: signerType,
            entryPoint: account.getEntryPoint().address,
        },
    });
}
//# sourceMappingURL=smartAccount.js.map