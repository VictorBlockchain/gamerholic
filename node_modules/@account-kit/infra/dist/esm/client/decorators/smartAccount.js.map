{"version":3,"file":"smartAccount.js","sourceRoot":"","sources":["../../../../src/client/decorators/smartAccount.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,wBAAwB,EACxB,eAAe,EACf,gBAAgB,EAChB,iBAAiB,GAQlB,MAAM,cAAc,CAAC;AAQtB,OAAO,EAAE,4BAA4B,EAAE,MAAM,+CAA+C,CAAC;AAE7F,OAAO,EAAE,WAAW,EAAE,MAAM,kBAAkB,CAAC;AAgC/C;;;;;;;;;;;;;;GAcG;AACH,MAAM,CAAC,MAAM,cAAc,GAWyC,CAClE,MAAM,EACN,EAAE,CAAC,CAAC;IACJ,qBAAqB,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,CACpC,4BAA4B,CAAC,MAAM,EAAE,IAAI,CAAC;IAC5C,iBAAiB,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE;QAChC,MAAM,EAAE,OAAO,GAAG,MAAM,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC;QAE1C,MAAM,MAAM,GAAG,iBAAiB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAC/C,cAAc,CAAC,MAAM,CAAC,KAAM,CAAC,EAAE,EAAE,OAAQ,CAAC,CAAC;QAC3C,OAAO,MAAM,CAAC;IAChB,CAAC;IACD,eAAe,EAAE,KAAK,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,EAAE;QAClD,MAAM,EAAE,OAAO,GAAG,MAAM,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC;QAE1C,MAAM,MAAM,GAAG,MAAM,eAAe,CAAC,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;QACvE,cAAc,CAAC,MAAM,CAAC,KAAM,CAAC,EAAE,EAAE,OAA+B,CAAC,CAAC;QAClE,OAAO,MAAM,CAAC;IAChB,CAAC;IACD,KAAK,CAAC,gBAAgB,CAAC,IAAI;QACzB,MAAM,EAAE,OAAO,GAAG,MAAM,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC;QAE1C,MAAM,MAAM,GAAG,gBAAgB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAC9C,cAAc,CAAC,MAAM,CAAC,KAAM,CAAC,EAAE,EAAE,OAAQ,CAAC,CAAC;QAC3C,OAAO,MAAM,CAAC;IAChB,CAAC;CACF,CAAC,CAAC;AAEH,SAAS,cAAc,CAAC,OAAe,EAAE,OAA6B;IACpE,MAAM,UAAU,GAAG,wBAAwB,CAAC,OAAO,CAAC;QAClD,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,UAAU;QAChC,CAAC,CAAC,SAAS,CAAC;IAEd,WAAW,CAAC,UAAU,CAAC;QACrB,IAAI,EAAE,gBAAgB;QACtB,IAAI,EAAE;YACJ,OAAO;YACP,UAAU,EAAE,UAAU;YACtB,UAAU,EAAE,OAAO,CAAC,aAAa,EAAE,CAAC,OAAO;SAC5C;KACF,CAAC,CAAC;AACL,CAAC","sourcesContent":["import {\n  isSmartAccountWithSigner,\n  sendTransaction,\n  sendTransactions,\n  sendUserOperation,\n  type GetEntryPointFromAccount,\n  type SendTransactionsParameters,\n  type SendUserOperationParameters,\n  type SendUserOperationResult,\n  type SmartContractAccount,\n  type UserOperationContext,\n  type UserOperationOverrides,\n} from \"@aa-sdk/core\";\nimport type {\n  Chain,\n  Client,\n  Hex,\n  SendTransactionParameters,\n  Transport,\n} from \"viem\";\nimport { simulateUserOperationChanges } from \"../../actions/simulateUserOperationChanges.js\";\nimport type { SimulateUserOperationAssetChangesResponse } from \"../../actions/types.js\";\nimport { InfraLogger } from \"../../metrics.js\";\n\nexport type AlchemySmartAccountClientActions<\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined,\n  TContext extends UserOperationContext | undefined =\n    | UserOperationContext\n    | undefined,\n  TChain extends Chain | undefined = Chain | undefined,\n  TEntryPointVersion extends GetEntryPointFromAccount<TAccount> = GetEntryPointFromAccount<TAccount>\n> = {\n  simulateUserOperation: (\n    args: SendUserOperationParameters<TAccount, TContext>\n  ) => Promise<SimulateUserOperationAssetChangesResponse>;\n  sendUserOperation: (\n    args: SendUserOperationParameters<\n      TAccount,\n      TContext,\n      GetEntryPointFromAccount<TAccount>\n    >\n  ) => Promise<SendUserOperationResult<TEntryPointVersion>>;\n  sendTransaction: <TChainOverride extends Chain | undefined = undefined>(\n    args: SendTransactionParameters<TChain, TAccount, TChainOverride>,\n    overrides?: UserOperationOverrides<TEntryPointVersion>,\n    context?: TContext\n  ) => Promise<Hex>;\n  sendTransactions: (\n    args: SendTransactionsParameters<TAccount, TContext>\n  ) => Promise<Hex>;\n};\n\n/**\n * Provides a set of actions for interacting with the Alchemy Smart Account client, including the ability to simulate user operations.\n *\n * @example\n * ```ts\n * import { alchemyActions } from \"@account-kit/infra\";\n * import { createPublicClient } from \"viem\";\n *\n * const client = createPublicClient(...);\n * const clientWithAlchemyActions = client.extend(alchemyActions);\n * ```\n *\n * @param {Client<TTransport, TChain, TAccount>} client The client instance used to perform actions\n * @returns {AlchemySmartAccountClientActions<TAccount, TContext>} An object containing Alchemy Smart Account client actions\n */\nexport const alchemyActions: <\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SmartContractAccount | undefined =\n    | SmartContractAccount\n    | undefined,\n  TContext extends UserOperationContext | undefined =\n    | UserOperationContext\n    | undefined\n>(\n  client: Client<TTransport, TChain, TAccount>\n) => AlchemySmartAccountClientActions<TAccount, TContext, TChain> = (\n  client\n) => ({\n  simulateUserOperation: async (args) =>\n    simulateUserOperationChanges(client, args),\n  sendUserOperation: async (args) => {\n    const { account = client.account } = args;\n\n    const result = sendUserOperation(client, args);\n    logSendUoEvent(client.chain!.id, account!);\n    return result;\n  },\n  sendTransaction: async (args, overrides, context) => {\n    const { account = client.account } = args;\n\n    const result = await sendTransaction(client, args, overrides, context);\n    logSendUoEvent(client.chain!.id, account as SmartContractAccount);\n    return result;\n  },\n  async sendTransactions(args) {\n    const { account = client.account } = args;\n\n    const result = sendTransactions(client, args);\n    logSendUoEvent(client.chain!.id, account!);\n    return result;\n  },\n});\n\nfunction logSendUoEvent(chainId: number, account: SmartContractAccount) {\n  const signerType = isSmartAccountWithSigner(account)\n    ? account.getSigner().signerType\n    : \"unknown\";\n\n  InfraLogger.trackEvent({\n    name: \"client_send_uo\",\n    data: {\n      chainId,\n      signerType: signerType,\n      entryPoint: account.getEntryPoint().address,\n    },\n  });\n}\n"]}