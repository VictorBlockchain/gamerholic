import { ChainNotFoundError, createSmartAccountClient, isSmartAccountWithSigner, } from "@aa-sdk/core";
import {} from "viem";
import { getDefaultUserOperationFeeOptions } from "../defaults.js";
import { alchemyFeeEstimator } from "../middleware/feeEstimator.js";
import { alchemyGasAndPaymasterAndDataMiddleware } from "../middleware/gasManager.js";
import { alchemyUserOperationSimulator } from "../middleware/userOperationSimulator.js";
import { alchemyActions, } from "./decorators/smartAccount.js";
export function getSignerTypeHeader(account) {
    return { "Alchemy-Aa-Sdk-Signer": account.getSigner().signerType };
}
/**
 * Creates an Alchemy smart account client using the provided configuration options, including account details, gas manager configuration, and custom middleware.
 *
 * @example
 * ```ts
 * import { createAlchemySmartAccountClient, alchemy } from "@account-kit/infra";
 * import { sepolia } from "@account-kit/infra/chain";
 *
 * const client = createAlchemySmartAccountClient({
 *  chain: sepolia,
 *  transport: alchemy({ apiKey: "your-api-key" }),
 * });
 * ```
 *
 * @param {AlchemySmartAccountClientConfig} config The configuration for creating the Alchemy smart account client
 * @returns {AlchemySmartAccountClient} An instance of `AlchemySmartAccountClient` configured based on the provided options
 */
export function createAlchemySmartAccountClient({ account, policyId, useSimulation, feeEstimator, customMiddleware, gasEstimator, signUserOperation, transport, chain, opts, }) {
    if (!chain) {
        throw new ChainNotFoundError();
    }
    const feeOptions = opts?.feeOptions ?? getDefaultUserOperationFeeOptions(chain);
    const scaClient = createSmartAccountClient({
        account,
        transport,
        chain,
        type: "AlchemySmartAccountClient",
        opts: {
            ...opts,
            feeOptions,
        },
        feeEstimator: feeEstimator ?? alchemyFeeEstimator(transport),
        gasEstimator,
        customMiddleware: async (struct, args) => {
            if (isSmartAccountWithSigner(args.account)) {
                transport.updateHeaders(getSignerTypeHeader(args.account));
            }
            return customMiddleware ? customMiddleware(struct, args) : struct;
        },
        ...(policyId
            ? alchemyGasAndPaymasterAndDataMiddleware({
                policyId,
                transport,
                gasEstimatorOverride: gasEstimator,
                feeEstimatorOverride: feeEstimator,
            })
            : {}),
        userOperationSimulator: useSimulation
            ? alchemyUserOperationSimulator(transport)
            : undefined,
        signUserOperation,
    }).extend(alchemyActions);
    if (account && isSmartAccountWithSigner(account)) {
        transport.updateHeaders(getSignerTypeHeader(account));
    }
    return scaClient;
}
//# sourceMappingURL=smartAccountClient.js.map