{"version":3,"file":"gasManager.js","sourceRoot":"","sources":["../../../src/middleware/gasManager.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  ClientMiddlewareConfig,\n  ClientMiddlewareFn,\n  EntryPointVersion,\n  Multiplier,\n  UserOperationFeeOptions,\n  UserOperationOverrides,\n  UserOperationRequest,\n} from \"@aa-sdk/core\";\nimport {\n  bypassPaymasterAndData,\n  ChainNotFoundError,\n  deepHexlify,\n  defaultGasEstimator,\n  erc7677Middleware,\n  filterUndefined,\n  isBigNumberish,\n  isMultiplier,\n  noopMiddleware,\n  resolveProperties,\n} from \"@aa-sdk/core\";\nimport { fromHex, isHex, type Hex } from \"viem\";\nimport type { AlchemySmartAccountClient } from \"../client/smartAccountClient.js\";\nimport type { AlchemyTransport } from \"../alchemyTransport.js\";\nimport { alchemyFeeEstimator } from \"./feeEstimator.js\";\n\n/**\n * Paymaster middleware factory that uses Alchemy's Gas Manager for sponsoring\n * transactions. Adheres to the ERC-7677 standardized communication protocol.\n *\n * @example\n *  ```ts\n * import { sepolia, alchemyGasManagerMiddleware } from \"@account-kit/infra\";\n * import { http } from \"viem\";\n *\n * const client = createSmartAccountClient({\n *  transport: http(\"rpc-url\"),\n *  chain: sepolia,\n *  ...alchemyGasManagerMiddleware(\"policyId\")\n * });\n * ```\n *\n * @param {string | string[]} policyId the policyId (or list of policyIds) for Alchemy's gas manager\n * @returns {Pick<ClientMiddlewareConfig, \"dummyPaymasterAndData\" | \"paymasterAndData\">} partial client middleware configuration containing `dummyPaymasterAndData` and `paymasterAndData`\n */\nexport function alchemyGasManagerMiddleware(\n  policyId: string | string[]\n): Pick<ClientMiddlewareConfig, \"dummyPaymasterAndData\" | \"paymasterAndData\"> {\n  return erc7677Middleware<{ policyId: string | string[] }>({\n    context: { policyId: policyId },\n  });\n}\n\ninterface AlchemyGasAndPaymasterAndDataMiddlewareParams {\n  policyId: string | string[];\n  transport: AlchemyTransport;\n  gasEstimatorOverride?: ClientMiddlewareFn;\n  feeEstimatorOverride?: ClientMiddlewareFn;\n}\n\n/**\n * Paymaster middleware factory that uses Alchemy's Gas Manager for sponsoring\n * transactions. Uses Alchemy's custom `alchemy_requestGasAndPaymasterAndData`\n * method instead of conforming to the standard ERC-7677 interface. Note that\n * if you use `createAlchemySmartAccountClient`, this middleware is already\n * used by default and you do not need to manually include it.\n *\n * @example\n *  ```ts twoslash\n * import { sepolia, alchemy, alchemyGasAndPaymasterAndDataMiddleware } from \"@account-kit/infra\";\n * import { createSmartAccountClient } from \"@aa-sdk/core\";\n *\n * const client = createSmartAccountClient({\n *  transport: alchemy({ apiKey: \"your-api-key\" }),\n *  chain: sepolia,\n *  ...alchemyGasAndPaymasterAndDataMiddleware({\n *    policyId: \"policyId\",\n *    transport: alchemy({ apiKey: \"your-api-key\" }),\n *  })\n * });\n * ```\n *\n * @param {AlchemyGasAndPaymasterAndDataMiddlewareParams} params configuration params\n * @param {AlchemyGasAndPaymasterAndDataMiddlewareParams.policyId} params.policyId the policyId for Alchemy's gas manager\n * @param {AlchemyGasAndPaymasterAndDataMiddlewareParams.transport} params.transport fallback transport to use for fee estimation when not using the paymaster\n * @param {AlchemyGasAndPaymasterAndDataMiddlewareParams.gasEstimatorOverride} params.gasEstimatorOverride custom gas estimator middleware\n * @param {AlchemyGasAndPaymasterAndDataMiddlewareParams.feeEstimatorOverride} params.feeEstimatorOverride custom fee estimator middleware\n * @returns {Pick<ClientMiddlewareConfig, \"dummyPaymasterAndData\" | \"paymasterAndData\">} partial client middleware configuration containing `dummyPaymasterAndData` and `paymasterAndData`\n */\nexport function alchemyGasAndPaymasterAndDataMiddleware(\n  params: AlchemyGasAndPaymasterAndDataMiddlewareParams\n): Pick<\n  ClientMiddlewareConfig,\n  \"dummyPaymasterAndData\" | \"feeEstimator\" | \"gasEstimator\" | \"paymasterAndData\"\n> {\n  const { policyId, transport, gasEstimatorOverride, feeEstimatorOverride } =\n    params;\n  return {\n    dummyPaymasterAndData: async (uo, args) => {\n      if (\n        // No reason to generate dummy data if we are bypassing the paymaster.\n        bypassPaymasterAndData(args.overrides) ||\n        // When using alchemy_requestGasAndPaymasterAndData, there is generally no reason to generate dummy\n        // data. However, if the gas/feeEstimator is overriden, then this option should be enabled.\n        !(gasEstimatorOverride || feeEstimatorOverride)\n      ) {\n        return noopMiddleware(uo, args);\n      }\n\n      // Fall back to the default 7677 dummyPaymasterAndData middleware.\n      return alchemyGasManagerMiddleware(policyId).dummyPaymasterAndData!(\n        uo,\n        args\n      );\n    },\n    feeEstimator: (uo, args) => {\n      return feeEstimatorOverride\n        ? feeEstimatorOverride(uo, args)\n        : bypassPaymasterAndData(args.overrides)\n        ? alchemyFeeEstimator(transport)(uo, args)\n        : noopMiddleware(uo, args);\n    },\n    gasEstimator: (uo, args) => {\n      return gasEstimatorOverride\n        ? gasEstimatorOverride(uo, args)\n        : bypassPaymasterAndData(args.overrides)\n        ? defaultGasEstimator(args.client)(uo, args)\n        : noopMiddleware(uo, args);\n    },\n    paymasterAndData: async (\n      uo,\n      { account, client, feeOptions, overrides: overrides_ }\n    ) => {\n      if (!client.chain) {\n        throw new ChainNotFoundError();\n      }\n\n      const userOp = deepHexlify(await resolveProperties(uo));\n\n      const overrides: UserOperationOverrides = filterUndefined({\n        maxFeePerGas: overrideField(\n          \"maxFeePerGas\",\n          overrides_ as UserOperationOverrides,\n          feeOptions,\n          userOp\n        ),\n        maxPriorityFeePerGas: overrideField(\n          \"maxPriorityFeePerGas\",\n          overrides_ as UserOperationOverrides,\n          feeOptions,\n          userOp\n        ),\n        callGasLimit: overrideField(\n          \"callGasLimit\",\n          overrides_ as UserOperationOverrides,\n          feeOptions,\n          userOp\n        ),\n        verificationGasLimit: overrideField(\n          \"verificationGasLimit\",\n          overrides_ as UserOperationOverrides,\n          feeOptions,\n          userOp\n        ),\n        preVerificationGas: overrideField(\n          \"preVerificationGas\",\n          overrides_ as UserOperationOverrides,\n          feeOptions,\n          userOp\n        ),\n        ...(account.getEntryPoint().version === \"0.7.0\"\n          ? {\n              paymasterVerificationGasLimit: overrideField<\"0.7.0\">(\n                \"paymasterVerificationGasLimit\",\n                overrides_ as UserOperationOverrides<\"0.7.0\">,\n                feeOptions,\n                userOp\n              ),\n              paymasterPostOpGasLimit: overrideField<\"0.7.0\">(\n                \"paymasterPostOpGasLimit\",\n                overrides_ as UserOperationOverrides<\"0.7.0\">,\n                feeOptions,\n                userOp\n              ),\n            }\n          : {}),\n      });\n\n      const result = await (client as AlchemySmartAccountClient).request({\n        method: \"alchemy_requestGasAndPaymasterAndData\",\n        params: [\n          {\n            policyId,\n            entryPoint: account.getEntryPoint().address,\n            userOperation: userOp,\n            dummySignature: await account.getDummySignature(),\n            overrides,\n          },\n        ],\n      });\n\n      return {\n        ...uo,\n        ...result,\n      };\n    },\n  };\n}\n\n/**\n * Utility function to override a field in the user operation request with the overrides or fee options\n *\n * @template {EntryPointVersion} TEntryPointVersion\n * @param {keyof UserOperationFeeOptions<TEntryPointVersion>} field the field to override\n * @param {UserOperationOverrides<TEntryPointVersion> | undefined} overrides the overrides object\n * @param {UserOperationFeeOptions<TEntryPointVersion> | undefined} feeOptions the fee options object from the client\n * @param {UserOperationRequest<TEntryPointVersion>} userOperation the user operation request\n * @returns {Hex | Multiplier | undefined} the overridden field value\n */\nconst overrideField = <\n  TEntryPointVersion extends EntryPointVersion = EntryPointVersion\n>(\n  field: keyof UserOperationFeeOptions<TEntryPointVersion>,\n  overrides: UserOperationOverrides<TEntryPointVersion> | undefined,\n  feeOptions: UserOperationFeeOptions<TEntryPointVersion> | undefined,\n  userOperation: UserOperationRequest<TEntryPointVersion>\n): Hex | Multiplier | undefined => {\n  let _field = field as keyof UserOperationOverrides<TEntryPointVersion>;\n\n  if (overrides?.[_field] != null) {\n    // one-off absolute override\n    if (isBigNumberish(overrides[_field])) {\n      return deepHexlify(overrides[_field]);\n    }\n    // one-off multiplier overrides\n    else {\n      return {\n        multiplier: Number((overrides[_field] as Multiplier).multiplier),\n      };\n    }\n  }\n\n  // provider level fee options with multiplier\n  if (isMultiplier(feeOptions?.[field])) {\n    return {\n      multiplier: Number((feeOptions![field] as Multiplier).multiplier),\n    };\n  }\n\n  const userOpField =\n    userOperation[field as keyof UserOperationRequest<TEntryPointVersion>];\n  if (isHex(userOpField) && fromHex(userOpField as Hex, \"bigint\") > 0n) {\n    return userOpField;\n  }\n  return undefined;\n};\n"]}