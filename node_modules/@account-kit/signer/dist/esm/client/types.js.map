{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/client/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { Address } from \"@aa-sdk/core\";\nimport type { TSignedRequest, getWebAuthnAttestation } from \"@turnkey/http\";\nimport type { Hex } from \"viem\";\nimport type { AuthParams } from \"../signer\";\n\nexport type CredentialCreationOptionOverrides = {\n  publicKey?: Partial<CredentialCreationOptions[\"publicKey\"]>;\n} & Pick<CredentialCreationOptions, \"signal\">;\n\n// [!region User]\nexport type User = {\n  email?: string;\n  orgId: string;\n  userId: string;\n  address: Address;\n  solanaAddress?: string;\n  credentialId?: string;\n  idToken?: string;\n  claims?: Record<string, unknown>;\n};\n// [!endregion User]\n\nexport type ExportWalletParams = {\n  iframeContainerId: string;\n  iframeElementId?: string;\n};\n\nexport type CreateAccountParams =\n  | {\n      type: \"email\";\n      email: string;\n      emailMode?: EmailType;\n      expirationSeconds?: number;\n      redirectParams?: URLSearchParams;\n    }\n  | {\n      type: \"passkey\";\n      email: string;\n      creationOpts?: CredentialCreationOptionOverrides;\n    }\n  | {\n      type: \"passkey\";\n      username: string;\n      creationOpts?: CredentialCreationOptionOverrides;\n    };\n\nexport type EmailType = \"magicLink\" | \"otp\";\n\nexport type EmailAuthParams = {\n  email: string;\n  emailMode?: EmailType;\n  expirationSeconds?: number;\n  targetPublicKey: string;\n  redirectParams?: URLSearchParams;\n};\n\nexport type OauthParams = Extract<AuthParams, { type: \"oauth\" }> & {\n  expirationSeconds?: number;\n};\n\nexport type OtpParams = {\n  orgId: string;\n  otpId: string;\n  otpCode: string;\n  targetPublicKey: string;\n  expirationSeconds?: number;\n};\n\nexport type SignupResponse = {\n  orgId: string;\n  userId?: string;\n  address?: Address;\n  otpId?: string;\n};\n\nexport type OauthConfig = {\n  codeChallenge: string;\n  requestKey: string;\n  authProviders: AuthProviderConfig[];\n};\n\nexport type AuthProviderConfig = {\n  id: string;\n  isCustomProvider?: boolean;\n  clientId: string;\n  authEndpoint: string;\n};\n\nexport type SignerRoutes = SignerEndpoints[number][\"Route\"];\nexport type SignerBody<T extends SignerRoutes> = Extract<\n  SignerEndpoints[number],\n  { Route: T }\n>[\"Body\"];\nexport type SignerResponse<T extends SignerRoutes> = Extract<\n  SignerEndpoints[number],\n  { Route: T }\n>[\"Response\"];\n\nexport type SignerEndpoints = [\n  {\n    Route: \"/v1/signup\";\n    Body:\n      | (Omit<EmailAuthParams, \"redirectParams\"> & {\n          redirectParams?: string;\n        })\n      | {\n          passkey: {\n            challenge: string;\n            attestation: Awaited<ReturnType<typeof getWebAuthnAttestation>>;\n          };\n        };\n    Response: SignupResponse;\n  },\n  {\n    Route: \"/v1/whoami\";\n    Body: {\n      stampedRequest: TSignedRequest;\n    };\n    Response: User;\n  },\n  {\n    Route: \"/v1/auth\";\n    Body: Omit<EmailAuthParams, \"redirectParams\"> & {\n      redirectParams?: string;\n    };\n    Response: {\n      orgId: string;\n      otpId?: string;\n    };\n  },\n  {\n    Route: \"/v1/lookup\";\n    Body: {\n      email: string;\n    };\n    Response: {\n      orgId: string | null;\n    };\n  },\n  {\n    Route: \"/v1/sign-payload\";\n    Body: {\n      stampedRequest: TSignedRequest;\n    };\n    Response: {\n      signature: Hex;\n    };\n  },\n  {\n    Route: \"/v1/prepare-oauth\";\n    Body: {\n      nonce: string;\n    };\n    Response: OauthConfig;\n  },\n  {\n    Route: \"/v1/otp\";\n    Body: OtpParams;\n    Response: { credentialBundle: string };\n  }\n];\n\nexport type AuthenticatingEventMetadata = {\n  type: \"email\" | \"passkey\" | \"oauth\" | \"otp\" | \"otpVerify\";\n};\n\nexport type AlchemySignerClientEvents = {\n  connected(user: User): void;\n  newUserSignup(): void;\n  authenticating(data: AuthenticatingEventMetadata): void;\n  connectedEmail(user: User, bundle: string): void;\n  connectedPasskey(user: User): void;\n  connectedOauth(user: User, bundle: string): void;\n  connectedOtp(user: User, bundle: string): void;\n  disconnected(): void;\n};\n\nexport type AlchemySignerClientEvent = keyof AlchemySignerClientEvents;\n\nexport type GetWebAuthnAttestationResult = {\n  attestation: Awaited<ReturnType<typeof getWebAuthnAttestation>>;\n  challenge: ArrayBuffer;\n  authenticatorUserId: ArrayBuffer;\n};\n\nexport type OauthState = {\n  authProviderId: string;\n  isCustomProvider?: boolean;\n  requestKey: string;\n  turnkeyPublicKey: string;\n  expirationSeconds?: number;\n  redirectUrl?: string;\n  openerOrigin?: string;\n};\n\nexport type GetOauthProviderUrlArgs = {\n  oauthParams: OauthParams;\n  turnkeyPublicKey: string;\n  oauthCallbackUrl: string;\n  oauthConfig?: OauthConfig;\n  usesRelativeUrl?: boolean;\n};\n"]}