{"version":3,"file":"signer.js","sourceRoot":"","sources":["../../src/signer.ts"],"names":[],"mappings":"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","sourcesContent":["import { z } from \"zod\";\nimport { BaseAlchemySigner } from \"./base.js\";\nimport {\n  AlchemySignerClientParamsSchema,\n  AlchemySignerWebClient,\n} from \"./client/index.js\";\nimport type { CredentialCreationOptionOverrides } from \"./client/types.js\";\nimport { SessionManagerParamsSchema } from \"./session/manager.js\";\n\nexport type AuthParams =\n  | {\n      type: \"email\";\n      email: string;\n      emailMode?: \"magicLink\" | \"otp\";\n      redirectParams?: URLSearchParams;\n    }\n  | { type: \"email\"; bundle: string; orgId?: string; isNewUser?: boolean }\n  | {\n      type: \"passkey\";\n      email: string;\n      creationOpts?: CredentialCreationOptionOverrides;\n    }\n  | {\n      type: \"passkey\";\n      createNew: false;\n    }\n  | {\n      type: \"passkey\";\n      createNew: true;\n      username: string;\n      creationOpts?: CredentialCreationOptionOverrides;\n    }\n  | ({\n      type: \"oauth\";\n      scope?: string;\n      claims?: string;\n    } & OauthProviderConfig &\n      OauthRedirectConfig)\n  | {\n      type: \"oauthReturn\";\n      bundle: string;\n      orgId: string;\n      idToken: string;\n      isNewUser?: boolean;\n    }\n  | {\n      type: \"otp\";\n      otpCode: string;\n    };\n\nexport type OauthProviderConfig =\n  | {\n      authProviderId: \"auth0\";\n      isCustomProvider?: false;\n      auth0Connection?: string;\n    }\n  | {\n      authProviderId: KnownAuthProvider;\n      isCustomProvider?: false;\n      auth0Connection?: never;\n    }\n  | {\n      authProviderId: string;\n      isCustomProvider: true;\n      auth0Connection?: never;\n    };\n\nexport type OauthRedirectConfig =\n  | { mode: \"redirect\"; redirectUrl: string }\n  | { mode: \"popup\"; redirectUrl?: never };\n\nexport type KnownAuthProvider = \"google\" | \"apple\" | \"facebook\" | \"auth0\";\n\nexport type OauthMode = \"redirect\" | \"popup\";\n\nexport const AlchemySignerParamsSchema = z\n  .object({\n    client: z\n      .custom<AlchemySignerWebClient>()\n      .or(AlchemySignerClientParamsSchema),\n  })\n  .extend({\n    sessionConfig: SessionManagerParamsSchema.omit({\n      client: true,\n    }).optional(),\n  });\n\nexport type AlchemySignerParams = z.input<typeof AlchemySignerParamsSchema>;\n\n/**\n * A SmartAccountSigner that can be used with any SmartContractAccount\n */\nexport class AlchemyWebSigner extends BaseAlchemySigner<AlchemySignerWebClient> {\n  /**\n   * Initializes an instance with the provided Alchemy signer parameters after parsing them with a schema.\n   *\n   * @example\n   * ```ts\n   * import { AlchemyWebSigner } from \"@account-kit/signer\";\n   *\n   * const signer = new AlchemyWebSigner({\n   *  client: {\n   *    connection: {\n   *      rpcUrl: \"/api/rpc\",\n   *    },\n   *    iframeConfig: {\n   *      iframeContainerId: \"alchemy-signer-iframe-container\",\n   *    },\n   *  },\n   * });\n   * ```\n   *\n   * @param {AlchemySignerParams} params The parameters for the Alchemy signer, including the client and session configuration\n   */\n\n  constructor(params: AlchemySignerParams) {\n    const { sessionConfig, ...params_ } =\n      AlchemySignerParamsSchema.parse(params);\n\n    let client: AlchemySignerWebClient;\n    if (\"connection\" in params_.client) {\n      client = new AlchemySignerWebClient(params_.client);\n    } else {\n      client = params_.client;\n    }\n    const {\n      emailBundle,\n      oauthBundle,\n      oauthOrgId,\n      oauthError,\n      idToken,\n      isSignup,\n    } = getAndRemoveQueryParams({\n      emailBundle: \"bundle\",\n      // We don't need this, but we still want to remove it from the URL.\n      emailOrgId: \"orgId\",\n      oauthBundle: \"alchemy-bundle\",\n      oauthOrgId: \"alchemy-org-id\",\n      oauthError: \"alchemy-error\",\n      idToken: \"alchemy-id-token\",\n      isSignup: \"aa-is-signup\",\n    });\n\n    const initialError =\n      oauthError != null\n        ? { name: \"OauthError\", message: oauthError }\n        : undefined;\n\n    super({ client, sessionConfig, initialError });\n\n    const isNewUser = isSignup === \"true\";\n\n    this.signerType = \"alchemy-signer\";\n\n    if (emailBundle) {\n      this.authenticate({\n        type: \"email\",\n        bundle: emailBundle,\n        isNewUser,\n      });\n    } else if (oauthBundle && oauthOrgId && idToken) {\n      this.authenticate({\n        type: \"oauthReturn\",\n        bundle: oauthBundle,\n        orgId: oauthOrgId,\n        idToken,\n        isNewUser,\n      });\n    }\n  }\n}\n\n/**\n * Reads and removes the specified query params from the URL.\n *\n * @param {T} keys object whose values are the query parameter keys to read and\n * remove\n * @returns {{ [K in keyof T]: string | undefined }} object with the same keys\n * as the input whose values are the values of the query params.\n */\nfunction getAndRemoveQueryParams<T extends Record<string, string>>(\n  keys: T\n): { [K in keyof T]: string | undefined } {\n  const url = new URL(window.location.href);\n  const result: Record<string, string | undefined> = {};\n  let foundQueryParam = false;\n  for (const [key, param] of Object.entries(keys)) {\n    const value = url.searchParams.get(param) ?? undefined;\n    foundQueryParam ||= value != null;\n    result[key] = value;\n    url.searchParams.delete(param);\n  }\n  if (foundQueryParam) {\n    window.history.replaceState(window.history.state, \"\", url.toString());\n  }\n  return result as { [K in keyof T]: string | undefined };\n}\n"]}