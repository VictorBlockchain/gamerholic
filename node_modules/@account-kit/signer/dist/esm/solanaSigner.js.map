{"version":3,"file":"solanaSigner.js","sourceRoot":"","sources":["../../src/solanaSigner.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,WAAW,GAEZ,MAAM,iBAAiB,CAAC;AACzB,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAA4B,MAAM,MAAM,CAAC;AAE7E,OAAO,EAAE,qBAAqB,EAAE,MAAM,aAAa,CAAC;AAEpD,yGAAyG;AACzG,MAAM,OAAO,YAAY;IAIvB,YAAY,MAAwB;QAH5B;;;;;WAAgC;QACjC;;;;;WAAgB;QAGrB,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC;QAC5B,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;YAAE,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;QAEjE,wBAAwB;QACxB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,EAAG,CAAC,aAAc,CAAC;IAClD,CAAC;IAED,KAAK,CAAC,YAAY,CAChB,EAAsC;QAEtC,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC;QAC1C,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,MAAM,IAAI,qBAAqB,EAAE,CAAC;QACpC,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;YACxB,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;QACvC,CAAC;QAED,MAAM,OAAO,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAClD,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;QAChD,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CACvD,aAAa,EACb,QAAQ,CACT,CAAC;QAEF,EAAE,CAAC,YAAY,CACb,OAAO,EACP,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAC,CAAC,CAAC,CAC/D,CAAC;QACF,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,OAAmB;QACnC,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC;QAC1C,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,MAAM,IAAI,qBAAqB,EAAE,CAAC;QACpC,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;YACxB,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;QACvC,CAAC;QAED,MAAM,aAAa,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;QACrC,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,cAAc,CACvD,aAAa,EACb,QAAQ,CACT,CAAC;QAEF,OAAO,OAAO,CAAC,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAC,CAAC,CAAC;IAC3D,CAAC;IAEO,wBAAwB,CAAC,SAAc;QAC7C,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE;YAAE,OAAO,SAAS,CAAC;QAE7C,OAAO,KAAK,CAAC,SAAS,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;IACjC,CAAC;IAEO,gBAAgB,CAAC,EAAsC;QAC7D,IAAI,aAAa,CAAC;QAClB,IAAI,EAAE,YAAY,WAAW,EAAE,CAAC;YAC9B,aAAa,GAAG,EAAE,CAAC,gBAAgB,EAAE,CAAC;QACxC,CAAC;aAAM,CAAC;YACN,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,CAAC;QACtD,CAAC;QACD,OAAO,KAAK,CAAC,aAAa,CAAC,CAAC;IAC9B,CAAC;CACF","sourcesContent":["import {\n  PublicKey,\n  Transaction,\n  type VersionedTransaction,\n} from \"@solana/web3.js\";\nimport { size, slice, toBytes, toHex, type ByteArray, type Hex } from \"viem\";\nimport type { BaseSignerClient } from \"./client/base\";\nimport { NotAuthenticatedError } from \"./errors.js\";\n\n// TODO: I don't want this to be a class so that the flow is closer to how we do this for `toViemAccount`\nexport class SolanaSigner {\n  private alchemyClient: BaseSignerClient;\n  public address: string;\n\n  constructor(client: BaseSignerClient) {\n    this.alchemyClient = client;\n    if (!client.getUser()) throw new Error(\"Must be authenticated!\");\n\n    // TODO: also throw here\n    this.address = client.getUser()!.solanaAddress!;\n  }\n\n  async addSignature(\n    tx: Transaction | VersionedTransaction\n  ): Promise<Transaction | VersionedTransaction> {\n    const user = this.alchemyClient.getUser();\n    if (!user) {\n      throw new NotAuthenticatedError();\n    }\n\n    if (!user.solanaAddress) {\n      throw new Error(\"no solana address\");\n    }\n\n    const fromKey = new PublicKey(user.solanaAddress);\n    const messageToSign = this.getMessageToSign(tx);\n    const signature = await this.alchemyClient.signRawMessage(\n      messageToSign,\n      \"SOLANA\"\n    );\n\n    tx.addSignature(\n      fromKey,\n      Buffer.from(toBytes(this.formatSignatureForSolana(signature)))\n    );\n    return tx;\n  }\n\n  async signMessage(message: Uint8Array): Promise<ByteArray> {\n    const user = this.alchemyClient.getUser();\n    if (!user) {\n      throw new NotAuthenticatedError();\n    }\n\n    if (!user.solanaAddress) {\n      throw new Error(\"no solana address\");\n    }\n\n    const messageToSign = toHex(message);\n    const signature = await this.alchemyClient.signRawMessage(\n      messageToSign,\n      \"SOLANA\"\n    );\n\n    return toBytes(this.formatSignatureForSolana(signature));\n  }\n\n  private formatSignatureForSolana(signature: Hex): Hex {\n    if (size(signature) === 64) return signature;\n\n    return slice(signature, 0, 64);\n  }\n\n  private getMessageToSign(tx: Transaction | VersionedTransaction): Hex {\n    let messageToSign;\n    if (tx instanceof Transaction) {\n      messageToSign = tx.serializeMessage();\n    } else {\n      messageToSign = Buffer.from(tx.message.serialize());\n    }\n    return toHex(messageToSign);\n  }\n}\n"]}