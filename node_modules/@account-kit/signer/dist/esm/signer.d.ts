import { z } from "zod";
import { BaseAlchemySigner } from "./base.js";
import { AlchemySignerWebClient } from "./client/index.js";
import type { CredentialCreationOptionOverrides } from "./client/types.js";
export type AuthParams = {
    type: "email";
    email: string;
    emailMode?: "magicLink" | "otp";
    redirectParams?: URLSearchParams;
} | {
    type: "email";
    bundle: string;
    orgId?: string;
    isNewUser?: boolean;
} | {
    type: "passkey";
    email: string;
    creationOpts?: CredentialCreationOptionOverrides;
} | {
    type: "passkey";
    createNew: false;
} | {
    type: "passkey";
    createNew: true;
    username: string;
    creationOpts?: CredentialCreationOptionOverrides;
} | ({
    type: "oauth";
    scope?: string;
    claims?: string;
} & OauthProviderConfig & OauthRedirectConfig) | {
    type: "oauthReturn";
    bundle: string;
    orgId: string;
    idToken: string;
    isNewUser?: boolean;
} | {
    type: "otp";
    otpCode: string;
};
export type OauthProviderConfig = {
    authProviderId: "auth0";
    isCustomProvider?: false;
    auth0Connection?: string;
} | {
    authProviderId: KnownAuthProvider;
    isCustomProvider?: false;
    auth0Connection?: never;
} | {
    authProviderId: string;
    isCustomProvider: true;
    auth0Connection?: never;
};
export type OauthRedirectConfig = {
    mode: "redirect";
    redirectUrl: string;
} | {
    mode: "popup";
    redirectUrl?: never;
};
export type KnownAuthProvider = "google" | "apple" | "facebook" | "auth0";
export type OauthMode = "redirect" | "popup";
export declare const AlchemySignerParamsSchema: z.ZodObject<{
    client: z.ZodUnion<[z.ZodType<AlchemySignerWebClient, z.ZodTypeDef, AlchemySignerWebClient>, z.ZodObject<{
        connection: z.ZodUnion<[z.ZodObject<{
            rpcUrl: z.ZodOptional<z.ZodNever>;
            apiKey: z.ZodString;
            jwt: z.ZodOptional<z.ZodNever>;
        }, "strip", z.ZodTypeAny, {
            apiKey: string;
            rpcUrl?: undefined;
            jwt?: undefined;
        }, {
            apiKey: string;
            rpcUrl?: undefined;
            jwt?: undefined;
        }>, z.ZodObject<{
            rpcUrl: z.ZodOptional<z.ZodNever>;
            apiKey: z.ZodOptional<z.ZodNever>;
            jwt: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            jwt: string;
            rpcUrl?: undefined;
            apiKey?: undefined;
        }, {
            jwt: string;
            rpcUrl?: undefined;
            apiKey?: undefined;
        }>, z.ZodObject<{
            rpcUrl: z.ZodString;
            apiKey: z.ZodOptional<z.ZodNever>;
            jwt: z.ZodOptional<z.ZodNever>;
        }, "strip", z.ZodTypeAny, {
            rpcUrl: string;
            apiKey?: undefined;
            jwt?: undefined;
        }, {
            rpcUrl: string;
            apiKey?: undefined;
            jwt?: undefined;
        }>, z.ZodObject<{
            rpcUrl: z.ZodString;
            apiKey: z.ZodOptional<z.ZodNever>;
            jwt: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            rpcUrl: string;
            jwt: string;
            apiKey?: undefined;
        }, {
            rpcUrl: string;
            jwt: string;
            apiKey?: undefined;
        }>]>;
        iframeConfig: z.ZodObject<{
            iframeElementId: z.ZodDefault<z.ZodString>;
            iframeContainerId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            iframeElementId: string;
            iframeContainerId: string;
        }, {
            iframeContainerId: string;
            iframeElementId?: string | undefined;
        }>;
        rpId: z.ZodOptional<z.ZodString>;
        rootOrgId: z.ZodDefault<z.ZodOptional<z.ZodString>>;
        oauthCallbackUrl: z.ZodDefault<z.ZodOptional<z.ZodString>>;
        enablePopupOauth: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        connection: {
            apiKey: string;
            rpcUrl?: undefined;
            jwt?: undefined;
        } | {
            jwt: string;
            rpcUrl?: undefined;
            apiKey?: undefined;
        } | {
            rpcUrl: string;
            apiKey?: undefined;
            jwt?: undefined;
        } | {
            rpcUrl: string;
            jwt: string;
            apiKey?: undefined;
        };
        iframeConfig: {
            iframeElementId: string;
            iframeContainerId: string;
        };
        rootOrgId: string;
        oauthCallbackUrl: string;
        enablePopupOauth: boolean;
        rpId?: string | undefined;
    }, {
        connection: {
            apiKey: string;
            rpcUrl?: undefined;
            jwt?: undefined;
        } | {
            jwt: string;
            rpcUrl?: undefined;
            apiKey?: undefined;
        } | {
            rpcUrl: string;
            apiKey?: undefined;
            jwt?: undefined;
        } | {
            rpcUrl: string;
            jwt: string;
            apiKey?: undefined;
        };
        iframeConfig: {
            iframeContainerId: string;
            iframeElementId?: string | undefined;
        };
        rpId?: string | undefined;
        rootOrgId?: string | undefined;
        oauthCallbackUrl?: string | undefined;
        enablePopupOauth?: boolean | undefined;
    }>]>;
    sessionConfig: z.ZodOptional<z.ZodObject<Omit<{
        sessionKey: z.ZodDefault<z.ZodString>;
        storage: z.ZodUnion<[z.ZodDefault<z.ZodEnum<["localStorage", "sessionStorage"]>>, z.ZodType<Storage, z.ZodTypeDef, Storage>]>;
        expirationTimeMs: z.ZodDefault<z.ZodNumber>;
        client: z.ZodType<import("./index.js").BaseSignerClient<unknown>, z.ZodTypeDef, import("./index.js").BaseSignerClient<unknown>>;
    }, "client">, "strip", z.ZodTypeAny, {
        storage: (Storage | "localStorage" | "sessionStorage") & (Storage | "localStorage" | "sessionStorage" | undefined);
        sessionKey: string;
        expirationTimeMs: number;
    }, {
        storage?: Storage | "localStorage" | "sessionStorage" | undefined;
        sessionKey?: string | undefined;
        expirationTimeMs?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    client: ({
        connection: {
            apiKey: string;
            rpcUrl?: undefined;
            jwt?: undefined;
        } | {
            jwt: string;
            rpcUrl?: undefined;
            apiKey?: undefined;
        } | {
            rpcUrl: string;
            apiKey?: undefined;
            jwt?: undefined;
        } | {
            rpcUrl: string;
            jwt: string;
            apiKey?: undefined;
        };
        iframeConfig: {
            iframeElementId: string;
            iframeContainerId: string;
        };
        rootOrgId: string;
        oauthCallbackUrl: string;
        enablePopupOauth: boolean;
        rpId?: string | undefined;
    } | AlchemySignerWebClient) & ({
        connection: {
            apiKey: string;
            rpcUrl?: undefined;
            jwt?: undefined;
        } | {
            jwt: string;
            rpcUrl?: undefined;
            apiKey?: undefined;
        } | {
            rpcUrl: string;
            apiKey?: undefined;
            jwt?: undefined;
        } | {
            rpcUrl: string;
            jwt: string;
            apiKey?: undefined;
        };
        iframeConfig: {
            iframeElementId: string;
            iframeContainerId: string;
        };
        rootOrgId: string;
        oauthCallbackUrl: string;
        enablePopupOauth: boolean;
        rpId?: string | undefined;
    } | AlchemySignerWebClient | undefined);
    sessionConfig?: {
        storage: (Storage | "localStorage" | "sessionStorage") & (Storage | "localStorage" | "sessionStorage" | undefined);
        sessionKey: string;
        expirationTimeMs: number;
    } | undefined;
}, {
    client: ({
        connection: {
            apiKey: string;
            rpcUrl?: undefined;
            jwt?: undefined;
        } | {
            jwt: string;
            rpcUrl?: undefined;
            apiKey?: undefined;
        } | {
            rpcUrl: string;
            apiKey?: undefined;
            jwt?: undefined;
        } | {
            rpcUrl: string;
            jwt: string;
            apiKey?: undefined;
        };
        iframeConfig: {
            iframeContainerId: string;
            iframeElementId?: string | undefined;
        };
        rpId?: string | undefined;
        rootOrgId?: string | undefined;
        oauthCallbackUrl?: string | undefined;
        enablePopupOauth?: boolean | undefined;
    } | AlchemySignerWebClient) & ({
        connection: {
            apiKey: string;
            rpcUrl?: undefined;
            jwt?: undefined;
        } | {
            jwt: string;
            rpcUrl?: undefined;
            apiKey?: undefined;
        } | {
            rpcUrl: string;
            apiKey?: undefined;
            jwt?: undefined;
        } | {
            rpcUrl: string;
            jwt: string;
            apiKey?: undefined;
        };
        iframeConfig: {
            iframeContainerId: string;
            iframeElementId?: string | undefined;
        };
        rpId?: string | undefined;
        rootOrgId?: string | undefined;
        oauthCallbackUrl?: string | undefined;
        enablePopupOauth?: boolean | undefined;
    } | AlchemySignerWebClient | undefined);
    sessionConfig?: {
        storage?: Storage | "localStorage" | "sessionStorage" | undefined;
        sessionKey?: string | undefined;
        expirationTimeMs?: number | undefined;
    } | undefined;
}>;
export type AlchemySignerParams = z.input<typeof AlchemySignerParamsSchema>;
/**
 * A SmartAccountSigner that can be used with any SmartContractAccount
 */
export declare class AlchemyWebSigner extends BaseAlchemySigner<AlchemySignerWebClient> {
    /**
     * Initializes an instance with the provided Alchemy signer parameters after parsing them with a schema.
     *
     * @example
     * ```ts
     * import { AlchemyWebSigner } from "@account-kit/signer";
     *
     * const signer = new AlchemyWebSigner({
     *  client: {
     *    connection: {
     *      rpcUrl: "/api/rpc",
     *    },
     *    iframeConfig: {
     *      iframeContainerId: "alchemy-signer-iframe-container",
     *    },
     *  },
     * });
     * ```
     *
     * @param {AlchemySignerParams} params The parameters for the Alchemy signer, including the client and session configuration
     */
    constructor(params: AlchemySignerParams);
}
