import type { Connector } from "@wagmi/core";
import type { AuthType } from "./types";
export declare enum AuthStepStatus {
    base = "base",
    success = "success",
    error = "error",
    verifying = "verifying"
}
export type AuthStep = {
    type: "email_verify";
    email: string;
} | {
    type: "otp_verify";
    email: string;
    error?: Error;
    status?: AuthStepStatus;
} | {
    type: "passkey_verify";
    error?: Error;
} | {
    type: "passkey_create";
    error?: Error;
} | {
    type: "passkey_create_success";
} | {
    type: "email_completing";
} | {
    type: "oauth_completing";
    config: Extract<AuthType, {
        type: "social";
    }>;
    error?: Error;
} | {
    type: "initial";
    error?: Error;
} | {
    type: "complete";
} | {
    type: "eoa_connect";
    connector: Connector;
    error?: Error;
} | {
    type: "wallet_connect";
    error?: Error;
} | {
    type: "pick_eoa";
};
type AuthContextType<TType extends AuthStep["type"] | undefined = AuthStep["type"] | undefined> = TType extends undefined ? {
    authStep: AuthStep;
    setAuthStep: (step: AuthStep) => void;
    resetAuthStep: () => void;
} : {
    authStep: Extract<AuthStep, {
        type: NonNullable<TType>;
    }>;
    setAuthStep: (step: AuthStep) => void;
    resetAuthStep: () => void;
};
export declare const AuthModalContext: import("react").Context<{
    authStep: AuthStep;
    setAuthStep: (step: AuthStep) => void;
    resetAuthStep: () => void;
} | {
    authStep: {
        type: "email_verify";
        email: string;
    };
    setAuthStep: (step: AuthStep) => void;
    resetAuthStep: () => void;
} | {
    authStep: {
        type: "otp_verify";
        email: string;
        error?: Error | undefined;
        status?: AuthStepStatus | undefined;
    };
    setAuthStep: (step: AuthStep) => void;
    resetAuthStep: () => void;
} | {
    authStep: {
        type: "passkey_verify";
        error?: Error | undefined;
    };
    setAuthStep: (step: AuthStep) => void;
    resetAuthStep: () => void;
} | {
    authStep: {
        type: "passkey_create";
        error?: Error | undefined;
    };
    setAuthStep: (step: AuthStep) => void;
    resetAuthStep: () => void;
} | {
    authStep: {
        type: "passkey_create_success";
    };
    setAuthStep: (step: AuthStep) => void;
    resetAuthStep: () => void;
} | {
    authStep: {
        type: "email_completing";
    };
    setAuthStep: (step: AuthStep) => void;
    resetAuthStep: () => void;
} | {
    authStep: {
        type: "oauth_completing";
        config: Extract<AuthType, {
            type: "social";
        }>;
        error?: Error | undefined;
    };
    setAuthStep: (step: AuthStep) => void;
    resetAuthStep: () => void;
} | {
    authStep: {
        type: "initial";
        error?: Error | undefined;
    };
    setAuthStep: (step: AuthStep) => void;
    resetAuthStep: () => void;
} | {
    authStep: {
        type: "complete";
    };
    setAuthStep: (step: AuthStep) => void;
    resetAuthStep: () => void;
} | {
    authStep: {
        type: "eoa_connect";
        connector: Connector;
        error?: Error | undefined;
    };
    setAuthStep: (step: AuthStep) => void;
    resetAuthStep: () => void;
} | {
    authStep: {
        type: "wallet_connect";
        error?: Error | undefined;
    };
    setAuthStep: (step: AuthStep) => void;
    resetAuthStep: () => void;
} | {
    authStep: {
        type: "pick_eoa";
    };
    setAuthStep: (step: AuthStep) => void;
    resetAuthStep: () => void;
} | undefined>;
export declare function useAuthContext<TType extends AuthStep["type"] | undefined = AuthStep["type"] | undefined>(type?: TType): AuthContextType<TType>;
export declare const useOptionalAuthContext: () => AuthContextType | undefined;
export {};
//# sourceMappingURL=context.d.ts.map