import type { AuthParams, User } from "@account-kit/signer";
import { type UseMutateAsyncFunction, type UseMutateFunction } from "@tanstack/react-query";
import type { BaseHookMutationArgs } from "../types.js";
export type UseAuthenticateMutationArgs = BaseHookMutationArgs<User, AuthParams>;
export type UseAuthenticateResult = {
    authenticate: UseMutateFunction<User, Error, AuthParams, unknown>;
    authenticateAsync: UseMutateAsyncFunction<User, Error, AuthParams, unknown>;
    isPending: boolean;
    error: Error | null;
};
/**
 * [Hook](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useAuthenticate.ts) that provides functions and state for authenticating a user using a signer. It includes methods for both synchronous and asynchronous mutations.
 * Useful if building your own UI components and want to control the authentication flow.
 * For authenticate vs authenticateAsync, use authenticate when you want the hook the handle state changes for you, authenticateAsync when you need to wait for the result to finish processing.
 *
 * This can be complex for magic link or OTP flows: OPT calls authenticate twice, but this should be handled by the signer.
 *
 * @param {UseAuthenticateMutationArgs} [mutationArgs] Optional mutation arguments to configure the authentication mutation. [ref](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useAuthenticate.ts#L15)
 * @returns {UseAuthenticateResult} An object containing functions and state for handling user authentication, including methods for synchronously and asynchronously executing the authentication. [ref](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useAuthenticate.ts#L20)
 *
 * @example
 * ```ts twoslash
 * import { useAuthenticate } from "@account-kit/react";
 *
 * const { authenticate, authenticateAsync, isPending, error } = useAuthenticate({
 *  // these are optional
 *  onSuccess: () => {
 *    // do something on success
 *  },
 *  onError: (error) => console.error(error),
 * });
 * ```
 */
export declare function useAuthenticate(mutationArgs?: UseAuthenticateMutationArgs): UseAuthenticateResult;
//# sourceMappingURL=useAuthenticate.d.ts.map