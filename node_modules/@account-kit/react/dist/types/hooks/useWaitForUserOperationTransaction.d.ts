import type { WaitForUserOperationTxParameters } from "@aa-sdk/core";
import { type UseMutateFunction } from "@tanstack/react-query";
import type { Hash } from "viem";
import type { BaseHookMutationArgs } from "../types.js";
import { type UseSmartAccountClientResult } from "./useSmartAccountClient.js";
export type UseWaitForUserOperationTransactionMutationArgs = BaseHookMutationArgs<Hash, WaitForUserOperationTxParameters>;
export type UseWaitForUserOperationTransactionArgs = {
    client: UseSmartAccountClientResult["client"] | undefined;
} & UseWaitForUserOperationTransactionMutationArgs;
export type UseWaitForUserOperationTransactionResult = {
    waitForUserOperationTransaction: UseMutateFunction<Hash, Error, WaitForUserOperationTxParameters, unknown>;
    waitForUserOperationTransactionResult: Hash | undefined;
    isWaitingForUserOperationTransaction: boolean;
    error: Error | null;
};
/**
 * Custom [hook](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useWaitForUserOperationTransaction.ts) to wait for a user operation transaction and manage its state (pending, error, result).
 *
 * @param {UseWaitForUserOperationTransactionArgs} config Configuration object containing the client. [ref](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useWaitForUserOperationTransaction.ts#L15)
 * @returns {UseWaitForUserOperationTransactionResult} An object containing methods and state related to waiting for a user operation transaction. [ref](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useWaitForUserOperationTransaction.ts#L19)
 *
 * @example
 * ```ts twoslash
 * import { useWaitForUserOperationTransaction, useSmartAccountClient } from "@account-kit/react";
 *
 * const { client } = useSmartAccountClient({});
 * const {
 *  waitForUserOperationTransaction,
 *  waitForUserOperationTransactionResult,
 *  isWaitingForUserOperationTransaction,
 *  error
 * } = useWaitForUserOperationTransaction({
 *  client,
 *  // these are optional
 *  onSuccess: (result) => {
 *    // do something on success
 *  },
 *  onError: (error) => console.error(error),
 * });
 * ```
 */
export declare function useWaitForUserOperationTransaction({ client, }: UseWaitForUserOperationTransactionArgs): UseWaitForUserOperationTransactionResult;
//# sourceMappingURL=useWaitForUserOperationTransaction.d.ts.map