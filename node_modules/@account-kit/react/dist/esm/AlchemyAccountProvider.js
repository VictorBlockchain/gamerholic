"use client";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { AlchemySignerStatus } from "@account-kit/signer";
import { QueryClientProvider } from "@tanstack/react-query";
import { useCallback, useEffect, useMemo, useState } from "react";
import { AuthModalContext } from "./components/auth/context.js";
import { AuthModal } from "./components/auth/modal.js";
import { IS_SIGNUP_QP } from "./components/constants.js";
import { useSignerStatus } from "./hooks/useSignerStatus.js";
import { UiConfigProvider } from "./hooks/useUiConfig.js";
import { Hydrate } from "./hydrate.js";
import { AlchemyAccountContext } from "./AlchemyAccountContext.js";
import {} from "@tanstack/react-query";
/**
 * Provider for Alchemy accounts.
 *
 * @example
 * ```tsx
 * import { AlchemyAccountProvider, createConfig } from "@account-kit/react";
 * import { sepolia } from "@account-kit/infra";
 * import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
 *
 * const config = createConfig({
 *  apiKey: "your-api-key",
 *  chain: sepolia,
 * });
 *
 * const queryClient = new QueryClient();
 *
 * function App({ children }: React.PropsWithChildren) {
 *  return (
 *    <QueryClientProvider queryClient={queryClient}>
 *      <AlchemyAccountProvider config={config} queryClient={queryClient}>
 *        {children}
 *      </AlchemyAccountProvider>
 *    </QueryClientProvider>
 *  );
 * }
 * ```
 *
 * @param {React.PropsWithChildren<AlchemyAccountsProviderProps>} props alchemy accounts provider props
 * @param {AlchemyAccountsConfig} props.config the acccount config generated using `createConfig`
 * @param {QueryClient} props.queryClient the react-query query client to use
 * @param {AlchemyAccountsUIConfig} props.uiConfig optional UI configuration
 * @param {React.ReactNode | undefined} props.children react components that should have this accounts context
 * @returns {React.JSX.Element} The element to wrap your application in for Alchemy Accounts context.
 */
export const AlchemyAccountProvider = (props) => {
    const { config, queryClient, children } = props;
    const clearSignupParam = () => {
        const url = new URL(window.location.href);
        url.searchParams.delete(IS_SIGNUP_QP);
        window.history.replaceState(window.history.state, "", url.toString());
    };
    /**
     * Reset the auth step to the initial state. This also clears the email auth query params from the URL.
     */
    const resetAuthStep = useCallback(() => {
        setAuthStep({ type: "initial" });
        clearSignupParam();
    }, []);
    const initialContext = useMemo(() => ({
        config,
        queryClient,
    }), [config, queryClient]);
    const { status } = useSignerStatus(initialContext);
    const [authStep, setAuthStep] = useState(() => {
        if (status === AlchemySignerStatus.AUTHENTICATING_EMAIL) {
            return {
                type: "email_completing",
            };
        }
        return {
            type: "initial",
        };
    });
    useEffect(() => {
        if (authStep.type === "complete") {
            clearSignupParam();
        }
    }, [authStep]);
    return (_jsx(Hydrate, { ...props, children: _jsx(AlchemyAccountContext.Provider, { value: initialContext, children: _jsx(QueryClientProvider, { client: queryClient, children: config.ui ? (_jsx(UiConfigProvider, { initialConfig: config.ui, children: _jsxs(AuthModalContext.Provider, { value: {
                            authStep,
                            setAuthStep,
                            resetAuthStep,
                        }, children: [children, _jsx(AuthModal, {})] }) })) : (children) }) }) }));
};
//# sourceMappingURL=AlchemyAccountProvider.js.map