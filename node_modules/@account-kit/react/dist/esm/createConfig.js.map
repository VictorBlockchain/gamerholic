{"version":3,"file":"createConfig.js","sourceRoot":"","sources":["../../src/createConfig.ts"],"names":[],"mappings":"AAAA,OAAO,EAGN,MAAM,mBAAmB,CAAC;AAC3B,OAAO,EAAE,YAAY,IAAI,gBAAgB,EAAE,MAAM,mBAAmB,CAAC;AACrE,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AAEjD,OAAO,EAAE,WAAW,EAAE,MAAM,cAAc,CAAC;AAE3C,OAAO,EAAE,sBAAsB,EAAE,MAAM,YAAY,CAAC;AACpD,OAAO,EAAE,cAAc,EAAE,MAAM,+BAA+B,CAAC;AAM/D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+BG;AACH,MAAM,CAAC,MAAM,YAAY,GAAG,CAC1B,KAAwB,EACxB,EAA4B,EACC,EAAE;IAC/B,IACE,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAC5B,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,QAAQ,IAAI,CAAC,CAAC,IAAI,KAAK,OAAO,CAAC,CACzD,EACD,CAAC;QACD,KAAK,CAAC,gBAAgB,GAAG,IAAI,CAAC;IAChC,CAAC;IAED,MAAM,qBAAqB,GAAG,EAAE,EAAE,IAAI,EAAE,QAAQ;SAC7C,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,kBAAkB,CAAC,CAAC;QAC1D,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,kBAAkB,CAEhC,CAAC;IAEd,IACE,qBAAqB,EAAE,aAAa;QACpC,CAAC,KAAK,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,cAAc,CAAC,EACxE,CAAC;QACD,MAAM,uBAAuB,GAAG,qBAAqB,EAAE,aAAa,CAAC;QACrE,MAAM,mBAAmB,GAAG,sBAAsB,CAChD,uBAAuB,CACvB,CAAC;QAEH,KAAK,CAAC,UAAU,KAAhB,KAAK,CAAC,UAAU,GAAK,EAAE,EAAC;QACxB,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC,CAAC;IAC5D,CAAC;IAED,MAAM,MAAM,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC;IAEvC,WAAW,CAAC,UAAU,CAAC;QACrB,IAAI,EAAE,gBAAgB;QACtB,IAAI,EACF,EAAE,IAAI,IAAI;YACR,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE;YAChB,CAAC,CAAC,gFAAgF;gBAChF;oBACE,GAAG,EAAE;oBACL,IAAI,EAAE,EAAE,CAAC,IAAI;wBACX,CAAC,CAAC;4BACE,GAAG,EAAE,CAAC,IAAI;4BACV,MAAM,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS;yBAC9C;wBACH,CAAC,CAAC,SAAS;iBACd;KACR,CAAC,CAAC;IAEH,OAAO;QACL,GAAG,MAAM;QACT,EAAE;KACH,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import {\n  type AlchemyAccountsConfig,\n  type CreateConfigProps,\n} from \"@account-kit/core\";\nimport { createConfig as createCoreConfig } from \"@account-kit/core\";\nimport { walletConnect } from \"wagmi/connectors\";\nimport type { AuthType } from \"./components/auth/types.js\";\nimport { ReactLogger } from \"./metrics.js\";\nimport type { AlchemyAccountsUIConfig } from \"./types\";\nimport { getWalletConnectParams } from \"./utils.js\";\nimport { WALLET_CONNECT } from \"./components/auth/card/eoa.js\";\n\nexport type AlchemyAccountsConfigWithUI = AlchemyAccountsConfig & {\n  ui?: AlchemyAccountsUIConfig;\n};\n\n/**\n * Wraps the `createConfig` that is exported from `@aa-sdk/core` to allow passing\n * an additional argument, the configuration object for the Auth Components UI\n * (the modal and AuthCard).\n *\n * @example\n * ```ts\n * import { sepolia, alchemy } from \"@account-kit/infra\"\n * import { AlchemyAccountsUIConfig, createConfig } from \"@account-kit/react\"\n * import { QueryClient } from \"@tanstack/react-query\";\n *\n * const uiConfig: AlchemyAccountsUIConfig = {\n *   illustrationStyle: \"linear\",\n *   auth: {\n *     sections: [[{ type: \"email\" }], [{ type: \"passkey\" }]],\n *     addPasskeyOnSignup: true,\n *   },\n * }\n *\n * const config = createConfig({\n *   transport: alchemy({ apiKey: \"your_api_key\" })\n *   chain: sepolia,\n *   ssr: true,\n * }, uiConfig)\n *\n * export const queryClient = new QueryClient();\n * ```\n *\n * @param {CreateConfigProps} props for creating an alchemy account config\n * @param {AlchemyAccountsUIConfig} ui (optional) configuration to use for the Auth Components UI\n * @returns {AlchemyAccountsConfigWithUI} an alchemy account config object containing the core and client store, as well as the UI config\n */\nexport const createConfig = (\n  props: CreateConfigProps,\n  ui?: AlchemyAccountsUIConfig\n): AlchemyAccountsConfigWithUI => {\n  if (\n    ui?.auth?.sections.some((x) =>\n      x.some((y) => y.type === \"social\" && y.mode === \"popup\")\n    )\n  ) {\n    props.enablePopupOauth = true;\n  }\n\n  const externalWalletSection = ui?.auth?.sections\n    .find((x) => x.some((y) => y.type === \"external_wallets\"))\n    ?.find((x) => x.type === \"external_wallets\") as\n    | Extract<AuthType, { type: \"external_wallets\" }>\n    | undefined;\n\n  if (\n    externalWalletSection?.walletConnect &&\n    !props.connectors?.some((x) => \"type\" in x && x.type === WALLET_CONNECT)\n  ) {\n    const walletConnectAuthConfig = externalWalletSection?.walletConnect;\n    const walletConnectParams = getWalletConnectParams(\n      walletConnectAuthConfig\n    )!;\n\n    props.connectors ??= [];\n    props.connectors.push(walletConnect(walletConnectParams));\n  }\n\n  const config = createCoreConfig(props);\n\n  ReactLogger.trackEvent({\n    name: \"config_created\",\n    data:\n      ui == null\n        ? { noUi: true }\n        : // we can't log react components so we need to strip out the header if it exists\n          {\n            ...ui,\n            auth: ui.auth\n              ? {\n                  ...ui.auth,\n                  header: ui.auth.header ? \"custom\" : \"default\",\n                }\n              : undefined,\n          },\n  });\n\n  return {\n    ...config,\n    ui,\n  };\n};\n"]}