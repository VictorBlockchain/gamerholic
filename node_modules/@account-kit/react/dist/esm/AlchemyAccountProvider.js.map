{"version":3,"file":"AlchemyAccountProvider.js","sourceRoot":"","sources":["../../src/AlchemyAccountProvider.tsx"],"names":[],"mappings":"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","sourcesContent":["\"use client\";\n\nimport { AlchemySignerStatus } from \"@account-kit/signer\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { AuthModalContext, type AuthStep } from \"./components/auth/context.js\";\nimport { AuthModal } from \"./components/auth/modal.js\";\nimport { IS_SIGNUP_QP } from \"./components/constants.js\";\nimport { useSignerStatus } from \"./hooks/useSignerStatus.js\";\nimport { UiConfigProvider } from \"./hooks/useUiConfig.js\";\nimport { Hydrate } from \"./hydrate.js\";\nimport { AlchemyAccountContext } from \"./AlchemyAccountContext.js\";\nimport type { AlchemyClientState } from \"@account-kit/core\";\nimport { type QueryClient } from \"@tanstack/react-query\";\nimport type { AlchemyAccountsConfigWithUI } from \"./createConfig.js\";\n\nexport type AlchemyAccountsProviderProps = {\n  config: AlchemyAccountsConfigWithUI;\n  initialState?: AlchemyClientState;\n  queryClient: QueryClient;\n};\n\n/**\n * Provider for Alchemy accounts.\n *\n * @example\n * ```tsx\n * import { AlchemyAccountProvider, createConfig } from \"@account-kit/react\";\n * import { sepolia } from \"@account-kit/infra\";\n * import { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\n *\n * const config = createConfig({\n *  apiKey: \"your-api-key\",\n *  chain: sepolia,\n * });\n *\n * const queryClient = new QueryClient();\n *\n * function App({ children }: React.PropsWithChildren) {\n *  return (\n *    <QueryClientProvider queryClient={queryClient}>\n *      <AlchemyAccountProvider config={config} queryClient={queryClient}>\n *        {children}\n *      </AlchemyAccountProvider>\n *    </QueryClientProvider>\n *  );\n * }\n * ```\n *\n * @param {React.PropsWithChildren<AlchemyAccountsProviderProps>} props alchemy accounts provider props\n * @param {AlchemyAccountsConfig} props.config the acccount config generated using `createConfig`\n * @param {QueryClient} props.queryClient the react-query query client to use\n * @param {AlchemyAccountsUIConfig} props.uiConfig optional UI configuration\n * @param {React.ReactNode | undefined} props.children react components that should have this accounts context\n * @returns {React.JSX.Element} The element to wrap your application in for Alchemy Accounts context.\n */\nexport const AlchemyAccountProvider = (\n  props: React.PropsWithChildren<AlchemyAccountsProviderProps>\n) => {\n  const { config, queryClient, children } = props;\n\n  const clearSignupParam = () => {\n    const url = new URL(window.location.href);\n    url.searchParams.delete(IS_SIGNUP_QP);\n    window.history.replaceState(window.history.state, \"\", url.toString());\n  };\n\n  /**\n   * Reset the auth step to the initial state. This also clears the email auth query params from the URL.\n   */\n  const resetAuthStep = useCallback(() => {\n    setAuthStep({ type: \"initial\" });\n\n    clearSignupParam();\n  }, []);\n\n  const initialContext = useMemo(\n    () => ({\n      config,\n      queryClient,\n    }),\n    [config, queryClient]\n  );\n\n  const { status } = useSignerStatus(initialContext);\n\n  const [authStep, setAuthStep] = useState<AuthStep>(() => {\n    if (status === AlchemySignerStatus.AUTHENTICATING_EMAIL) {\n      return {\n        type: \"email_completing\",\n      };\n    }\n\n    return {\n      type: \"initial\",\n    };\n  });\n\n  useEffect(() => {\n    if (authStep.type === \"complete\") {\n      clearSignupParam();\n    }\n  }, [authStep]);\n\n  return (\n    <Hydrate {...props}>\n      <AlchemyAccountContext.Provider value={initialContext}>\n        <QueryClientProvider client={queryClient}>\n          {config.ui ? (\n            <UiConfigProvider initialConfig={config.ui}>\n              <AuthModalContext.Provider\n                value={{\n                  authStep,\n                  setAuthStep,\n                  resetAuthStep,\n                }}\n              >\n                {children}\n                <AuthModal />\n              </AuthModalContext.Provider>\n            </UiConfigProvider>\n          ) : (\n            children\n          )}\n        </QueryClientProvider>\n      </AlchemyAccountContext.Provider>\n    </Hydrate>\n  );\n};\n"]}