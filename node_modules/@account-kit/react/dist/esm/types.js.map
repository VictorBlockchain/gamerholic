{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { UseMutationOptions } from \"@tanstack/react-query\";\nimport type { ReactNode } from \"react\";\nimport type { AuthType } from \"./components/auth/types.js\";\n\nexport type AlchemyAccountsUIConfig = {\n  auth?: {\n    /**\n     * If this is true, then auth components will prompt users to add\n     * a passkey after signing in for the first time\n     */\n    addPasskeyOnSignup?: boolean;\n    header?: ReactNode;\n    /**\n     * If hideError is true, then the auth component will not\n     * render the global error component\n     */\n    hideError?: boolean;\n    onAuthSuccess?: () => void;\n    /**\n     * Each section can contain multiple auth types which will be grouped together\n     * and separated by an OR divider\n     */\n    sections: AuthType[][];\n    /**\n     * Whether to show the \"Sign in\" header text in the first auth step\n     */\n    hideSignInText?: boolean;\n  };\n  illustrationStyle?: \"outline\" | \"linear\" | \"filled\" | \"flat\" | undefined;\n  /**\n   * This class name will be applied to any modals that are rendered\n   */\n  modalBaseClassName?: string;\n  /**\n   * This is the URL that will be used to link to the support page\n   */\n  supportUrl?: string | undefined;\n};\n\nexport type AuthIllustrationStyle = NonNullable<\n  AlchemyAccountsUIConfig[\"illustrationStyle\"]\n>;\n\n/**\n * Base hook mutation arguments.\n *\n * @template TData The mutation data type.\n * @template TVariable The mutation variable type.\n */\nexport type BaseHookMutationArgs<\n  TData extends any = void,\n  TVariable extends any = void\n> = Partial<\n  Omit<\n    UseMutationOptions<TData, Error, TVariable, unknown>,\n    \"mutationFn\" | \"mutationKey\"\n  >\n>;\n"]}