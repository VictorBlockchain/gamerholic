export declare const ls: {
    login: {
        tosPrefix: string;
        tosLink: string;
        email: {
            placeholder: string;
            button: string;
        };
        passkey: {
            button: string;
        };
        or: string;
    };
    addPasskey: {
        title: string;
        continue: string;
        skip: string;
        simplerLoginTitle: string;
        simplerLoginDescription: string;
        enhancedSecurityTitle: string;
        enhancedSecurityDescription: string;
    };
    loadingEmail: {
        title: string;
        verificationSent: string;
        emailNotReceived: string;
        resend: string;
        resent: string;
    };
    loadingOtp: {
        title: string;
        body: string;
        notReceived: string;
        resend: string;
        verifying: string;
        verified: string;
    };
    completingEmail: {
        body: string;
    };
    completingOtp: {
        title: string;
        body: string;
    };
    loadingPasskey: {
        title: string;
        body: string;
        supportText: string;
        supportLink: string;
    };
    protectedBy: {
        title: string;
    };
    error: {
        general: {
            title: string;
            body: string;
        };
        connection: {
            passkeyTitle: string;
            passkeyBody: string;
            oauthTitle: string;
            oauthBody: string;
            otpTitle: string;
            otpBody: string;
            walletTitle: string;
            walletBody: string;
            timedOutTitle: string;
            timedOutBody: string;
        };
        cta: {
            tryAgain: string;
            useAnotherMethod: string;
            skip: string;
        };
        customErrorMessages: {
            eoa: {
                walletConnect: {
                    chainIdNotFound: {
                        heading: string;
                        body: string;
                        tryAgainCTA: string;
                    };
                    walletConnectParamsNotFound: {
                        heading: string;
                        body: string;
                        tryAgainCTA: string;
                    };
                };
                default: {
                    heading: string;
                    body: string;
                    tryAgainCTA: string;
                };
            };
        };
        otp: {
            invalid: string;
        };
    };
    oauthContactSupport: {
        title: string;
        body: string;
    };
};
