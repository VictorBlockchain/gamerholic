{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/tailwind/utils.ts"],"names":[],"mappings":"AAMA;;;;;;GAMG;AACH,MAAM,CAAC,MAAM,cAAc,GAAG,CAC5B,KAAa,EACb,IAAY,EACQ,EAAE,CAAC,CAAC;IACxB,KAAK;IACL,IAAI;CACL,CAAC,CAAC;AAEH;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,KAAK,GAAG,CACnB,MAAS,EACT,MAAuB,EACpB,EAAE;IACL,IAAI,CAAC,MAAM;QAAE,OAAO,MAAM,CAAC;IAE3B,KAAK,MAAM,GAAG,IAAI,MAAM,EAAE,CAAC;QACzB,IAAI,MAAM,CAAC,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC;YACxB,SAAS;QACX,CAAC;aAAM,IAAI,OAAO,MAAM,CAAC,GAAG,CAAC,KAAK,QAAQ,EAAE,CAAC;YAC3C,mFAAmF;YACnF,4DAA4D;YAC5D,mEAAmE;YACnE,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;QAC5B,CAAC;aAAM,CAAC;YACN,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;QAClC,CAAC;IACH,CAAC;IAED,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAEF;;;;;GAKG;AACH,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC,IAA0B,EAAU,EAAE;IACzE,6DAA6D;IAC7D,OAAO,UAAU,IAAI,EAAE,CAAC;AAC1B,CAAC,CAAC;AAEF;;;;GAIG;AACH,MAAM,CAAC,MAAM,+BAA+B,GAAG,GAAW,EAAE;IAC1D,OAAO,2BAA2B,CAAC;AACrC,CAAC,CAAC;AAEF;;;;;GAKG;AACH,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC,KAAa,EAAE,EAAE;IACrD,OAAO,YAAY,+BAA+B,EAAE,OAAO,KAAK,GAAG,CAAC;AACtE,CAAC,CAAC","sourcesContent":["import type {\n  AccountKitThemeColor,\n  ColorVariantRecord,\n  DeepPartial,\n} from \"./types\";\n\n/**\n * Creates a color object to be used within account kit utilities, components, and themes\n *\n * @param {string} light the light mode color value\n * @param {string} dark the dark mode color value\n * @returns {ColorVariantRecord} the color set object\n */\nexport const createColorSet = (\n  light: string,\n  dark: string\n): ColorVariantRecord => ({\n  light,\n  dark,\n});\n\n/**\n * Overwrites the values in S with values in T if they exist\n *\n * @template {Record<string, any>} S the source object type\n * @param {S} source the source object to replace values with those from target\n * @param {DeepPartial<S>} target the target object to use as a source of truth\n * @returns {S} the deeply merged object of S and T\n */\nexport const apply = <S extends Record<string, any>>(\n  source: S,\n  target?: DeepPartial<S>\n): S => {\n  if (!target) return source;\n\n  for (const key in source) {\n    if (target[key] == null) {\n      continue;\n    } else if (typeof source[key] !== \"object\") {\n      // Also this seems to be fine when building with esm but not cjs or doing cli build\n      // vscode complains this isn't an issue but TS does. I dunno\n      // @ts-expect-error typescript doesn't like this but the tests pass\n      source[key] = target[key];\n    } else {\n      apply(source[key], target[key]);\n    }\n  }\n\n  return source;\n};\n\n/**\n * Given an Account Kit theme color name, returns the css variable name\n *\n * @param {AccountKitThemeColor} name one of the Account Kit theme color names\n * @returns {string} the css variable name\n */\nexport const getColorVariableName = (name: AccountKitThemeColor): string => {\n  // add a prefix to the color variable name to avoid conflicts\n  return `--akui-${name}`;\n};\n\n/**\n * Used to get the css variable name for the base border radius\n *\n * @returns {string} the css variable name for the base border radius\n */\nexport const getBorderRadiusBaseVariableName = (): string => {\n  return \"--akui-border-radius-base\";\n};\n\n/**\n * Returns a css value for scaling the base border radius\n *\n * @param {number} scale the scale factor to apply to the base border radius\n * @returns {string} Returns a css value for scaling the base border radius\n */\nexport const getScaledBorderRadius = (scale: number) => {\n  return `calc(var(${getBorderRadiusBaseVariableName()}) * ${scale})`;\n};\n"]}