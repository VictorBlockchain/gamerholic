{"version":3,"file":"useLogout.js","sourceRoot":"","sources":["../../../src/hooks/useLogout.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb,OAAO,EAAE,UAAU,EAAE,MAAM,mBAAmB,CAAC;AAC/C,OAAO,EAAE,WAAW,EAA0B,MAAM,uBAAuB,CAAC;AAC5E,OAAO,EAAE,sBAAsB,EAAE,MAAM,+BAA+B,CAAC;AACvE,OAAO,EAAE,wBAAwB,EAAE,MAAM,+BAA+B,CAAC;AAWzE;;;;;;;;;;;;;;;;;;GAkBG;AACH,MAAM,UAAU,SAAS,CACvB,YAAoC;IAEpC,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,GAAG,wBAAwB,EAAE,CAAC;IAC3D,MAAM,WAAW,GAAG,sBAAsB,EAAE,CAAC;IAE7C,MAAM,EACJ,MAAM,EAAE,MAAM,EACd,SAAS,EAAE,YAAY,EACvB,KAAK,GACN,GAAG,WAAW,CACb;QACE,UAAU,EAAE,KAAK,IAAI,EAAE;YACrB,MAAM,UAAU,CAAC,MAAM,CAAC,CAAC;YACzB,WAAW,EAAE,aAAa,EAAE,CAAC;QAC/B,CAAC;QACD,GAAG,YAAY;KAChB,EACD,WAAW,CACZ,CAAC;IAEF,OAAO;QACL,MAAM;QACN,YAAY;QACZ,KAAK;KACN,CAAC;AACJ,CAAC","sourcesContent":["\"use client\";\n\nimport { disconnect } from \"@account-kit/core\";\nimport { useMutation, type UseMutateFunction } from \"@tanstack/react-query\";\nimport { useOptionalAuthContext } from \"../components/auth/context.js\";\nimport { useAlchemyAccountContext } from \"./useAlchemyAccountContext.js\";\nimport type { BaseHookMutationArgs } from \"../types.js\";\n\nexport type UseLogoutMutationArgs = BaseHookMutationArgs<void, void>;\n\nexport type UseLogoutResult = {\n  logout: UseMutateFunction<void, Error, void, unknown>;\n  isLoggingOut: boolean;\n  error: Error | null;\n};\n\n/**\n * Provides a [hook](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useLogout.ts) to log out a user, disconnecting the signer and triggering the disconnectAsync function.\n *\n * @param {UseLogoutMutationArgs} [mutationArgs] optional arguments to customize the mutation behavior\n * @returns {UseLogoutResult} an object containing the logout function, a boolean indicating if logout is in progress, and any error encountered during logout\n *\n * @example\n * ```ts twoslash\n * import { useLogout } from \"@account-kit/react\";\n *\n * const { logout, isLoggingOut, error } = useLogout({\n *  // these are optional\n *  onSuccess: () => {\n *   // do something on success\n *  },\n *  onError: (error) => console.error(error),\n * });\n * ```\n */\nexport function useLogout(\n  mutationArgs?: UseLogoutMutationArgs\n): UseLogoutResult {\n  const { queryClient, config } = useAlchemyAccountContext();\n  const authContext = useOptionalAuthContext();\n\n  const {\n    mutate: logout,\n    isPending: isLoggingOut,\n    error,\n  } = useMutation(\n    {\n      mutationFn: async () => {\n        await disconnect(config);\n        authContext?.resetAuthStep();\n      },\n      ...mutationArgs,\n    },\n    queryClient\n  );\n\n  return {\n    logout,\n    isLoggingOut,\n    error,\n  };\n}\n"]}