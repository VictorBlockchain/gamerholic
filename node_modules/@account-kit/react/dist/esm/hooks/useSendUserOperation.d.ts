import type { EntryPointVersion, GetEntryPointFromAccount, SendUserOperationParameters, SendUserOperationResult } from "@aa-sdk/core";
import type { SupportedAccounts } from "@account-kit/core";
import { type UseMutateAsyncFunction, type UseMutateFunction } from "@tanstack/react-query";
import type { Hex } from "viem";
import type { BaseHookMutationArgs } from "../types.js";
import { type UseSmartAccountClientResult } from "./useSmartAccountClient.js";
export type SendUserOperationWithEOA<TEntryPointVersion extends EntryPointVersion> = SendUserOperationResult<TEntryPointVersion> | {
    hash: Hex;
    request?: never;
};
export type UseSendUserOperationMutationArgs<TEntryPointVersion extends GetEntryPointFromAccount<TAccount>, TAccount extends SupportedAccounts = SupportedAccounts> = BaseHookMutationArgs<SendUserOperationWithEOA<TEntryPointVersion>, SendUserOperationParameters<TAccount>>;
export type UseSendUserOperationArgs<TEntryPointVersion extends GetEntryPointFromAccount<TAccount>, TAccount extends SupportedAccounts = SupportedAccounts> = {
    client: UseSmartAccountClientResult["client"] | undefined;
    waitForTxn?: boolean;
} & UseSendUserOperationMutationArgs<TEntryPointVersion, TAccount>;
export type UseSendUserOperationResult<TEntryPointVersion extends GetEntryPointFromAccount<TAccount>, TAccount extends SupportedAccounts = SupportedAccounts> = {
    sendUserOperation: UseMutateFunction<SendUserOperationWithEOA<TEntryPointVersion>, Error, SendUserOperationParameters<TAccount>, unknown>;
    sendUserOperationAsync: UseMutateAsyncFunction<SendUserOperationWithEOA<TEntryPointVersion>, Error, SendUserOperationParameters<TAccount>, unknown>;
    sendUserOperationResult: SendUserOperationWithEOA<TEntryPointVersion> | undefined;
    isSendingUserOperation: boolean;
    error: Error | null;
};
/**
 * A [hook](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useSendUserOperation.ts) that returns functions for sending user operations.
 * You can also optionally wait for a user operation to be mined and get the transaction hash before returning using `waitForTx`.
 * Like any method that takes a smart account client, throws an error if client undefined or is signer not authenticated.
 *
 * @param {UseSendUserOperationArgs<TEntryPointVersion, TAccount>} params the parameters for the hook including the client, a flag to wait for tx mining, and mutation args. [ref](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useSendUserOperation.ts#L45)
 * @returns {UseSendUserOperationResult<TEntryPointVersion, TAccount>} functions and state for sending UOs. [ref](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useSendUserOperation.ts#L53)
 *
 * @example
 * ```tsx twoslash
 * import React from 'react';
 * import {
 *   useSendUserOperation,
 *   useSmartAccountClient,
 * } from "@account-kit/react";
 *
 * function ComponentWithSendUserOperation() {
 *   const { client } = useSmartAccountClient({});
 *
 *   const { sendUserOperation, isSendingUserOperation } = useSendUserOperation({
 *     client,
 *     // optional parameter that will wait for the transaction to be mined before returning
 *     waitForTxn: true,
 *     onSuccess: ({ hash, request }) => {
 *       // [optional] Do something with the hash and request
 *     },
 *     onError: (error) => {
 *       // [optional] Do something with the error
 *     },
 *     // [optional] ...additional mutationArgs
 *   });
 *
 *   return (
 *     <div>
 *       <button
 *         onClick={() =>
 *           sendUserOperation({
 *            uo: {
 *             target: "0xTARGET_ADDRESS",
 *             data: "0x",
 *             value: 0n,
 *           }
 *          })
 *         }
 *         disabled={isSendingUserOperation}
 *       >
 *         {isSendingUserOperation ? "Sending..." : "Send UO"}
 *       </button>
 *     </div>
 *   );
 * }
 * ```
 */
export declare function useSendUserOperation<TEntryPointVersion extends GetEntryPointFromAccount<TAccount>, TAccount extends SupportedAccounts = SupportedAccounts>(params: UseSendUserOperationArgs<TEntryPointVersion, TAccount>): UseSendUserOperationResult<TEntryPointVersion, TAccount>;
