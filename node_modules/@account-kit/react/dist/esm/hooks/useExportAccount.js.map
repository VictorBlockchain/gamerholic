{"version":3,"file":"useExportAccount.js","sourceRoot":"","sources":["../../../src/hooks/useExportAccount.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb,OAAO,EAAE,2BAA2B,EAAE,MAAM,mBAAmB,CAAC;AAEhE,OAAO,EAAE,WAAW,EAA0B,MAAM,uBAAuB,CAAC;AAC5E,OAAO,EAAE,aAAa,EAAE,WAAW,EAAsB,MAAM,OAAO,CAAC;AACvE,OAAO,EAAE,wBAAwB,EAAE,MAAM,+BAA+B,CAAC;AAEzE,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AA+B3C;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,MAAM,UAAU,gBAAgB,CAC9B,IAAmC;IAEnC,MAAM,EAAE,MAAM,EAAE,GAAG,YAAY,EAAE,GAAG,IAAI,IAAI,EAAE,CAAC;IAC/C,MAAM,EAAE,WAAW,EAAE,GAAG,wBAAwB,EAAE,CAAC;IACnD,MAAM,MAAM,GAAG,SAAS,EAAE,CAAC;IAC3B,MAAM,EAAE,iBAAiB,EAAE,GAAG,MAAM,IAAI;QACtC,iBAAiB,EAAE,2BAA2B;KAC/C,CAAC;IAEF,MAAM,EACJ,MAAM,EAAE,aAAa,EACrB,SAAS,EACT,KAAK,EACL,IAAI,GACL,GAAG,WAAW,CACb;QACE,UAAU,EAAE,KAAK,IAAI,EAAE,CACrB,MAAO,CAAC,YAAY,CAAC,MAAM,IAAI,EAAE,iBAAiB,EAAE,CAAC;QACvD,GAAG,YAAY;KAChB,EACD,WAAW,CACZ,CAAC;IAEF,MAAM,sBAAsB,GAAG,WAAW,CACxC,CAAC,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU,EAA+B,EAAE,EAAE;QACpE,MAAM,eAAe,GAAG,MAAM,CAAC,OAAO,CAAC,SAAS,IAAI,EAAE,CAAC,CAAC,MAAM,CAC5D,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;YACpB,MAAM,QAAQ,GAAG,GAAG;iBACjB,OAAO,CAAC,8BAA8B,EAAE,OAAO,CAAC;iBAChD,iBAAiB,EAAE,CAAC;YAEvB,OAAO,GAAG,GAAG,KAAK,QAAQ,KAAK,KAAK,GAAG,CAAC;QAC1C,CAAC,EACD,EAAE,CACH,CAAC;QAEF,OAAO,aAAa,CAClB,KAAK,EACL;YACE,SAAS;YACT,KAAK,EAAE;gBACL,OAAO,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO;aACxC;YACD,EAAE,EAAE,iBAAiB;SACtB,EACD,aAAa,CAAC,OAAO,EAAE,EAAE,EAAE,YAAY,eAAe,KAAK,CAAC,CAC7D,CAAC;IACJ,CAAC,EACD,CAAC,iBAAiB,CAAC,CACpB,CAAC;IAEF,OAAO;QACL,UAAU,EAAE,CAAC,CAAC,IAAI;QAClB,aAAa;QACb,WAAW,EAAE,SAAS;QACtB,KAAK;QACL,sBAAsB;KACvB,CAAC;AACJ,CAAC","sourcesContent":["\"use client\";\n\nimport { DEFAULT_IFRAME_CONTAINER_ID } from \"@account-kit/core\";\nimport type { ExportWalletParams as ExportAccountParams } from \"@account-kit/signer\";\nimport { useMutation, type UseMutateFunction } from \"@tanstack/react-query\";\nimport { createElement, useCallback, type CSSProperties } from \"react\";\nimport { useAlchemyAccountContext } from \"./useAlchemyAccountContext.js\";\nimport type { BaseHookMutationArgs } from \"../types.js\";\nimport { useSigner } from \"./useSigner.js\";\n\nexport type UseExportAccountMutationArgs = {\n  params?: ExportAccountParams;\n} & BaseHookMutationArgs<boolean, void>;\n\n/**\n * Props for the `ExportAccountComponent` component. This component is\n * returned from the `useExportAccount` hook and should be rendered in the\n * parent component to display the account recovery details in an iframe.\n *\n * iframeCss [optional] - CSS to apply to the iframe.\n *\n * className [optional] - Class name to apply to the container div.\n *\n * isExported - Whether the account has been exported.\n */\nexport type ExportAccountComponentProps = {\n  iframeCss?: CSSProperties;\n  className?: string;\n  isExported: boolean;\n};\n\nexport type UseExportAccountResult = {\n  exportAccount: UseMutateFunction<boolean, Error, void, unknown>;\n  isExported: boolean;\n  isExporting: boolean;\n  error: Error | null;\n  ExportAccountComponent: (props: ExportAccountComponentProps) => JSX.Element;\n};\n\n/**\n * A [hook](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useExportAccount.ts) used to export the private key for an account. It returns the mutation functions to kick off the export process, as well as a component to render the account recovery details in an iframe.\n * What is returned is dependent on what you used most recently used to authenticate. If your session was initiated with a passkey, then a private key is returned. Otherwise, a seed phrase.\n *\n * @param {UseExportAccountMutationArgs} args Optional arguments for the mutation and export parameters. [ref](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useExportAccount.ts#L11)\n * @returns {UseExportAccountResult} An object containing the export state, possible error, and the export account function and component. [ref](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useExportAccount.ts#L32)*\n *\n * @example\n * ```ts twoslash\n * import { useExportAccount } from \"@account-kit/react\";\n *\n * const {\n *  exportAccount,\n *  isExported,\n *  isExporting,\n *  error,\n *  ExportAccountComponent\n * } = useExportAccount({\n *  params: {\n *    iframeContainerId: \"my-iframe-container\",\n *  },\n * });\n * ```\n */\nexport function useExportAccount(\n  args?: UseExportAccountMutationArgs\n): UseExportAccountResult {\n  const { params, ...mutationArgs } = args ?? {};\n  const { queryClient } = useAlchemyAccountContext();\n  const signer = useSigner();\n  const { iframeContainerId } = params ?? {\n    iframeContainerId: DEFAULT_IFRAME_CONTAINER_ID,\n  };\n\n  const {\n    mutate: exportAccount,\n    isPending,\n    error,\n    data,\n  } = useMutation(\n    {\n      mutationFn: async () =>\n        signer!.exportWallet(params ?? { iframeContainerId }),\n      ...mutationArgs,\n    },\n    queryClient\n  );\n\n  const ExportAccountComponent = useCallback(\n    ({ iframeCss, className, isExported }: ExportAccountComponentProps) => {\n      const iframeCssString = Object.entries(iframeCss ?? {}).reduce(\n        (acc, [key, value]) => {\n          const kebabKey = key\n            .replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, \"$1-$2\")\n            .toLocaleLowerCase();\n\n          return `${acc}\\n${kebabKey}: ${value};`;\n        },\n        \"\"\n      );\n\n      return createElement(\n        \"div\",\n        {\n          className,\n          style: {\n            display: !isExported ? \"none\" : \"block\",\n          },\n          id: iframeContainerId,\n        },\n        createElement(\"style\", {}, `iframe { ${iframeCssString} } `)\n      );\n    },\n    [iframeContainerId]\n  );\n\n  return {\n    isExported: !!data,\n    exportAccount,\n    isExporting: isPending,\n    error,\n    ExportAccountComponent,\n  };\n}\n"]}