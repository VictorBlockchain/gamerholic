{"version":3,"file":"useSigner.js","sourceRoot":"","sources":["../../../src/hooks/useSigner.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb,OAAO,EAAE,SAAS,EAAE,WAAW,EAAsB,MAAM,mBAAmB,CAAC;AAC/E,OAAO,EAAE,oBAAoB,EAAE,MAAM,OAAO,CAAC;AAC7C,OAAO,EAAE,wBAAwB,EAAE,MAAM,+BAA+B,CAAC;AAEzE;;;;;;;;;;;;;GAaG;AACH,MAAM,CAAC,MAAM,SAAS,GAAG,GAAsC,EAAE;IAC/D,MAAM,EAAE,MAAM,EAAE,GAAG,wBAAwB,EAAE,CAAC;IAE9C,oDAAoD;IACpD,0GAA0G;IAC1G,gBAAgB;IAChB,OAAO,oBAAoB,CACzB,WAAW,CAAC,MAAM,CAAC,EACnB,GAAG,EAAE,CAAC,SAAS,CAAI,MAAM,CAAC,EAC1B,GAAG,EAAE,CAAC,IAAI,CACX,CAAC;AACJ,CAAC,CAAC","sourcesContent":["\"use client\";\n\nimport { getSigner, watchSigner, type AlchemySigner } from \"@account-kit/core\";\nimport { useSyncExternalStore } from \"react\";\nimport { useAlchemyAccountContext } from \"./useAlchemyAccountContext.js\";\n\n/**\n * [Hook](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useSigner.ts) for accessing the current Alchemy signer within a React component. It uses a synchronous external store for updates.\n * This is a good use case if you want to use the signer as an EOA, giving you direct access to it. The signer returned from `useSigner` just does a `personal_sign` or `eth_signTypedData` without any additional logic, but a smart contract account might have additional logic for creating signatures for 1271 validation so `useSignMessage` or `useSignTypeData` instead.\n *\n * @returns {AlchemySigner | null} The current Alchemy signer or null if none is available. [ref](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/signer/src/client/index.ts#L50)\n *\n * @example\n * ```ts twoslash\n * import { useSigner } from \"@account-kit/react\";\n * import type { AlchemyWebSigner } from \"@account-kit/signer\";\n *\n * const signer : AlchemyWebSigner | null = useSigner();\n * ```\n */\nexport const useSigner = <T extends AlchemySigner>(): T | null => {\n  const { config } = useAlchemyAccountContext();\n\n  // TODO: figure out how to handle this on the server\n  // I think we need a version of the signer that can be run on the server that essentially no-ops or errors\n  // for all calls\n  return useSyncExternalStore(\n    watchSigner(config),\n    () => getSigner<T>(config),\n    () => null\n  );\n};\n"]}