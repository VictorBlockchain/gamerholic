"use client";
import { useMutation } from "@tanstack/react-query";
import { useAlchemyAccountContext } from "./useAlchemyAccountContext.js";
import { useSigner } from "./useSigner.js";
/**
 * A custom [hook](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useAddPasskey.ts) to handle the addition of a passkey to an already authenticated account, which includes executing a mutation with optional parameters.
 *
 * @param {UseAddPasskeyMutationArgs} [mutationArgs] Optional arguments for the mutation used for adding a passkey. [ref](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useAddPasskey.ts#L8)
 * @returns {UseAddPasskeyResult} An object containing the `addPasskey` function, a boolean `isAddingPasskey` to track the mutation status, and any error encountered. [ref](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useAddPasskey.ts#L13)
 *
 * @example
 * ```ts twoslash
 * import { useAddPasskey } from "@account-kit/react";
 *
 * const { addPasskey, isAddingPasskey, error } = useAddPasskey({
 *  // these are optional
 *  onSuccess: () => {
 *    // do something on success
 *  },
 *  onError: (error) => console.error(error),
 * });
 * ```
 */
export function useAddPasskey(mutationArgs) {
    const { queryClient } = useAlchemyAccountContext();
    const signer = useSigner();
    const { mutate: addPasskey, isPending: isAddingPasskey, error, } = useMutation({
        mutationFn: async (params) => {
            return signer.addPasskey(params ?? undefined);
        },
        ...mutationArgs,
    }, queryClient);
    return {
        addPasskey,
        isAddingPasskey,
        error,
    };
}
//# sourceMappingURL=useAddPasskey.js.map