{"version":3,"file":"useAuthenticate.js","sourceRoot":"","sources":["../../../src/hooks/useAuthenticate.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb,OAAO,EAAE,uBAAuB,EAAE,MAAM,mBAAmB,CAAC;AAE5D,OAAO,EACL,WAAW,GAGZ,MAAM,uBAAuB,CAAC;AAC/B,OAAO,EAAE,wBAAwB,EAAE,MAAM,+BAA+B,CAAC;AACzE,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAE5C,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAc3C;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH,MAAM,UAAU,eAAe,CAC7B,YAA0C;IAE1C,MAAM,EAAE,WAAW,EAAE,GAAG,wBAAwB,EAAE,CAAC;IACnD,MAAM,MAAM,GAAG,SAAS,EAAE,CAAC;IAE3B,MAAM,EACJ,MAAM,EAAE,YAAY,EACpB,WAAW,EAAE,iBAAiB,EAC9B,SAAS,EACT,KAAK,GACN,GAAG,WAAW,CACb;QACE,UAAU,EAAE,KAAK,EAAE,UAAsB,EAAE,EAAE;YAC3C,IAAI,CAAC,MAAM,EAAE,CAAC;gBACZ,MAAM,IAAI,uBAAuB,CAAC,QAAQ,CAAC,CAAC;YAC9C,CAAC;YAED,OAAO,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;QACzC,CAAC;QACD,WAAW,EAAE,CAAC,cAAc,CAAC;QAC7B,GAAG,YAAY;KAChB,EACD,WAAW,CACZ,CAAC;IAEF,OAAO;QACL,YAAY,EAAE,WAAW,CAAC,QAAQ,CAAC,cAAc,EAAE,YAAY,CAAC;QAChE,iBAAiB,EAAE,WAAW,CAAC,QAAQ,CACrC,mBAAmB,EACnB,iBAAiB,CAClB;QACD,SAAS;QACT,KAAK;KACN,CAAC;AACJ,CAAC","sourcesContent":["\"use client\";\n\nimport { ClientOnlyPropertyError } from \"@account-kit/core\";\nimport type { AuthParams, User } from \"@account-kit/signer\";\nimport {\n  useMutation,\n  type UseMutateAsyncFunction,\n  type UseMutateFunction,\n} from \"@tanstack/react-query\";\nimport { useAlchemyAccountContext } from \"./useAlchemyAccountContext.js\";\nimport { ReactLogger } from \"../metrics.js\";\nimport type { BaseHookMutationArgs } from \"../types.js\";\nimport { useSigner } from \"./useSigner.js\";\n\nexport type UseAuthenticateMutationArgs = BaseHookMutationArgs<\n  User,\n  AuthParams\n>;\n\nexport type UseAuthenticateResult = {\n  authenticate: UseMutateFunction<User, Error, AuthParams, unknown>;\n  authenticateAsync: UseMutateAsyncFunction<User, Error, AuthParams, unknown>;\n  isPending: boolean;\n  error: Error | null;\n};\n\n/**\n * [Hook](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useAuthenticate.ts) that provides functions and state for authenticating a user using a signer. It includes methods for both synchronous and asynchronous mutations.\n * Useful if building your own UI components and want to control the authentication flow.\n * For authenticate vs authenticateAsync, use authenticate when you want the hook the handle state changes for you, authenticateAsync when you need to wait for the result to finish processing.\n *\n * This can be complex for magic link or OTP flows: OPT calls authenticate twice, but this should be handled by the signer.\n *\n * @param {UseAuthenticateMutationArgs} [mutationArgs] Optional mutation arguments to configure the authentication mutation. [ref](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useAuthenticate.ts#L15)\n * @returns {UseAuthenticateResult} An object containing functions and state for handling user authentication, including methods for synchronously and asynchronously executing the authentication. [ref](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useAuthenticate.ts#L20)\n *\n * @example\n * ```ts twoslash\n * import { useAuthenticate } from \"@account-kit/react\";\n *\n * const { authenticate, authenticateAsync, isPending, error } = useAuthenticate({\n *  // these are optional\n *  onSuccess: () => {\n *    // do something on success\n *  },\n *  onError: (error) => console.error(error),\n * });\n * ```\n */\nexport function useAuthenticate(\n  mutationArgs?: UseAuthenticateMutationArgs\n): UseAuthenticateResult {\n  const { queryClient } = useAlchemyAccountContext();\n  const signer = useSigner();\n\n  const {\n    mutate: authenticate,\n    mutateAsync: authenticateAsync,\n    isPending,\n    error,\n  } = useMutation(\n    {\n      mutationFn: async (authParams: AuthParams) => {\n        if (!signer) {\n          throw new ClientOnlyPropertyError(\"signer\");\n        }\n\n        return signer.authenticate(authParams);\n      },\n      mutationKey: [\"authenticate\"],\n      ...mutationArgs,\n    },\n    queryClient\n  );\n\n  return {\n    authenticate: ReactLogger.profiled(\"authenticate\", authenticate),\n    authenticateAsync: ReactLogger.profiled(\n      \"authenticateAsync\",\n      authenticateAsync\n    ),\n    isPending,\n    error,\n  };\n}\n"]}