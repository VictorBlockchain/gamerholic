"use client";
import { useMutation } from "@tanstack/react-query";
import { useCallback } from "react";
import { ClientUndefinedHookError } from "../errors.js";
/**
 * A [hook](https://github.com/alchemyplatform/aa-sdk/blob/4c3956c01ce5ae3c157f006bf58fffde758e5d1b/account-kit/react/src/hooks/useClientActions.ts) that allows you to leverage client decorators to execute actions
 * and await them in your UX. This is particularly useful for using Plugins
 * with Modular Accounts.
 *
 * @param {UseClientActionsProps<TTransport, TChain, TActions>} args the hooks arguments highlighted below. [ref](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useClientActions.ts#L10)
 * @param {SmartAccountClient} args.client the smart account client returned from useSmartAccountClient
 * @param {object} args.actions the smart account client decorator you want to execute actions from
 * @returns {UseClientActionsResult<TActions>} an object containing methods to execute the actions as well loading and error states [ref](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useClientActions.ts#L21)
 *
 * @example
 * ```tsx twoslash
 * import React from 'react';
 * import { useSmartAccountClient } from "@account-kit/react";
 * import { sessionKeyPluginActions } from "@account-kit/smart-contracts";
 * import { useClientActions } from "@account-kit/react";
 *
 * const Foo = () => {
 *  const { client } = useSmartAccountClient({ type: "MultiOwnerModularAccount" });
 *  const { executeAction } = useClientActions({
 *    client: client,
 *    actions: sessionKeyPluginActions,
 *  });
 *
 *  executeAction({
 *    functionName: "isAccountSessionKey",
 *    args: [{ key: "0x0" }],
 *  });
 * };
 * ```
 */
export function useClientActions(args) {
    const { client, actions } = args;
    const { mutate, isPending: isExecutingAction, error, mutateAsync, data, } = useMutation({
        mutationFn: async ({ functionName, args, }) => {
            if (!client) {
                throw new ClientUndefinedHookError("useClientActions");
            }
            const actions_ = actions(client);
            return actions_[functionName](...args);
        },
    });
    const executeAction = useCallback((params) => {
        const { functionName, args } = params;
        return mutate({ functionName, args });
    }, [mutate]);
    const executeActionAsync = useCallback(async (params) => {
        const { functionName, args } = params;
        return mutateAsync({ functionName, args });
    }, [mutateAsync]);
    return {
        executeAction,
        executeActionAsync,
        data,
        isExecutingAction,
        error,
    };
}
//# sourceMappingURL=useClientActions.js.map