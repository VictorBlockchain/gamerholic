"use client";
import { jsx as _jsx } from "react/jsx-runtime";
import { createContext, useContext, useRef, } from "react";
import { create, useStore } from "zustand";
import { useShallow } from "zustand/react/shallow";
export const DEFAULT_UI_CONFIG = {
    illustrationStyle: "flat",
    auth: {
        addPasskeyOnSignup: false,
        header: null,
        hideError: false,
        sections: [[{ type: "email" }], [{ type: "passkey" }]],
        onAuthSuccess: () => { },
        hideSignInText: false,
    },
    modalBaseClassName: "",
    supportUrl: "",
};
export function createUiConfigStore(initialConfig = DEFAULT_UI_CONFIG) {
    return create((set) => ({
        ...initialConfig,
        isModalOpen: false,
        setModalOpen: (isOpen) => {
            set({ isModalOpen: isOpen });
        },
        updateConfig: (config) => {
            set(() => ({ ...config }));
        },
    }));
}
const UiConfigContext = createContext(undefined);
/**
 * A custom [hook](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useUiConfig.tsx) for accessing UI configuration from the `UiConfigContext`. Allows optional selection of specific parts of the UI config state using a selector function.
 * For editing and updating the underlying UI config on the fly.
 *
 * @param {(state: UiConfigStore) => T} [selector] - An optional function to select specific parts of the UI config state. [ref](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useUiConfig.tsx#L23)
 * @returns {T} - The selected state passed through the selector function or the entire state if no selector is provided
 * @throws Will throw an error if the `UiConfigContext` is not present in the component tree
 *
 * @example
 * ```tsx twoslash
 * import { useUiConfig } from "@account-kit/react";
 *
 * const { illustrationStyle, auth } = useUiConfig(({ illustrationStyle, auth }) => ({ illustrationStyle, auth }));
 * ```
 */
export function useUiConfig(selector) {
    const store = useContext(UiConfigContext);
    if (!store) {
        throw new Error("UiConfigContext must be present in root");
    }
    return useStore(store, useShallow(selector ?? ((state) => state)));
}
export function UiConfigProvider({ children, initialConfig, }) {
    const storeRef = useRef();
    if (!storeRef.current) {
        storeRef.current = createUiConfigStore(initialConfig);
    }
    return (_jsx(UiConfigContext.Provider, { value: storeRef.current, children: children }));
}
//# sourceMappingURL=useUiConfig.js.map