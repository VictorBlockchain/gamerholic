{"version":3,"file":"useDropAndReplaceUserOperation.js","sourceRoot":"","sources":["../../../src/hooks/useDropAndReplaceUserOperation.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAQb,OAAO,EAAE,WAAW,EAA0B,MAAM,uBAAuB,CAAC;AAC5E,OAAO,EAAE,wBAAwB,EAAE,MAAM,+BAA+B,CAAC;AACzE,OAAO,EAAE,wBAAwB,EAAE,MAAM,cAAc,CAAC;AAoCxD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8DG;AACH,MAAM,UAAU,8BAA8B,CAG5C,EACA,MAAM,EACN,GAAG,YAAY,EAIhB;IACC,MAAM,EAAE,WAAW,EAAE,GAAG,wBAAwB,EAAE,CAAC;IAEnD,MAAM,EACJ,MAAM,EAAE,2BAA2B,EACnC,IAAI,EAAE,iCAAiC,EACvC,SAAS,EAAE,mCAAmC,EAC9C,KAAK,GACN,GAAG,WAAW,CACb;QACE,UAAU,EAAE,KAAK,EACf,MAAuD,EACvD,EAAE;YACF,IAAI,CAAC,MAAM,EAAE,CAAC;gBACZ,MAAM,IAAI,wBAAwB,CAAC,gCAAgC,CAAC,CAAC;YACvE,CAAC;YAED,OAAO,MAAM,CAAC,2BAA2B,CAAC,MAAM,CAAC,CAAC;QACpD,CAAC;QACD,GAAG,YAAY;KAChB,EACD,WAAW,CACZ,CAAC;IAEF,OAAO;QACL,2BAA2B;QAC3B,iCAAiC;QACjC,mCAAmC;QACnC,KAAK;KACN,CAAC;AACJ,CAAC","sourcesContent":["\"use client\";\n\nimport type {\n  DropAndReplaceUserOperationParameters,\n  GetEntryPointFromAccount,\n  SendUserOperationResult,\n} from \"@aa-sdk/core\";\nimport type { SupportedAccounts } from \"@account-kit/core\";\nimport { useMutation, type UseMutateFunction } from \"@tanstack/react-query\";\nimport { useAlchemyAccountContext } from \"./useAlchemyAccountContext.js\";\nimport { ClientUndefinedHookError } from \"../errors.js\";\nimport type { BaseHookMutationArgs } from \"../types.js\";\nimport type { UseSmartAccountClientResult } from \"./useSmartAccountClient.js\";\n\nexport type UseDropAndReplaceUserOperationMutationArgs<\n  TEntryPointVersion extends GetEntryPointFromAccount<TAccount>,\n  TAccount extends SupportedAccounts = SupportedAccounts\n> = BaseHookMutationArgs<\n  SendUserOperationResult<TEntryPointVersion>,\n  DropAndReplaceUserOperationParameters<TAccount>\n>;\n\nexport type UseDropAndReplaceUserOperationArgs<\n  TEntryPointVersion extends GetEntryPointFromAccount<TAccount>,\n  TAccount extends SupportedAccounts = SupportedAccounts\n> = {\n  client: UseSmartAccountClientResult[\"client\"] | undefined;\n} & UseDropAndReplaceUserOperationMutationArgs<TEntryPointVersion, TAccount>;\n\nexport type UseDropAndReplaceUserOperationResult<\n  TEntryPointVersion extends GetEntryPointFromAccount<TAccount>,\n  TAccount extends SupportedAccounts = SupportedAccounts\n> = {\n  dropAndReplaceUserOperation: UseMutateFunction<\n    SendUserOperationResult<TEntryPointVersion>,\n    Error,\n    DropAndReplaceUserOperationParameters<TAccount>,\n    unknown\n  >;\n  dropAndReplaceUserOperationResult:\n    | SendUserOperationResult<TEntryPointVersion>\n    | undefined;\n  isDroppingAndReplacingUserOperation: boolean;\n  error: Error | null;\n};\n\n/**\n * Custom [hook](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useDropAndReplaceUserOperation.ts) that handles the drop and replace user operation for a given client and mutation arguments.\n *\n * @param {UseDropAndReplaceUserOperationArgs<TEntryPointVersion, TAccount>} config The configuration parameters including the client and other mutation arguments. [ref](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useDropAndReplaceUserOperation.ts#L23)\n * @returns {UseDropAndReplaceUserOperationResult<TEntryPointVersion, TAccount>} The result containing the mutation function, result data, loading state, and any error. [ref](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useDropAndReplaceUserOperation.ts#L30)\n *\n * @example\n * ```tsx twoslash\n * import React from 'react';\n * import {\n *   useDropAndReplaceUserOperation,\n *   useSendUserOperation,\n *   useSmartAccountClient,\n * } from \"@account-kit/react\";\n *\n * export function ComponentWithDropAndReplaceUO() {\n *   const { client } = useSmartAccountClient({});\n *\n *   const { sendUserOperationAsync, isSendingUserOperation } =\n *     useSendUserOperation({\n *       client,\n *     });\n *   const { dropAndReplaceUserOperation, isDroppingAndReplacingUserOperation } =\n *     useDropAndReplaceUserOperation({\n *       client,\n *       onSuccess: ({ hash, request }) => {\n *         // [optional] Do something with the hash and request\n *       },\n *       onError: (error) => {\n *         // [optional] Do something with the error\n *       },\n *       // [optional] ...additional mutationArgs\n *     });\n *\n *   return (\n *     <div>\n *       <button\n *         onClick={async () => {\n *           const { request } = await sendUserOperationAsync({\n *             uo: {\n *              target: \"0xTARGET_ADDRESS\",\n *              data: \"0x\",\n *              value: 0n,\n *             },\n *           });\n *\n *           dropAndReplaceUserOperation({\n *             uoToDrop: request,\n *           });\n *         }}\n *         disabled={isSendingUserOperation || isDroppingAndReplacingUserOperation}\n *       >\n *         {isSendingUserOperation\n *           ? \"Sending...\"\n *           : isDroppingAndReplacingUserOperation\n *           ? \"Replacing...\"\n *           : \"Send then Replace UO\"}\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n */\nexport function useDropAndReplaceUserOperation<\n  TEntryPointVersion extends GetEntryPointFromAccount<TAccount>,\n  TAccount extends SupportedAccounts = SupportedAccounts\n>({\n  client,\n  ...mutationArgs\n}: UseDropAndReplaceUserOperationArgs<\n  TEntryPointVersion,\n  TAccount\n>): UseDropAndReplaceUserOperationResult<TEntryPointVersion, TAccount> {\n  const { queryClient } = useAlchemyAccountContext();\n\n  const {\n    mutate: dropAndReplaceUserOperation,\n    data: dropAndReplaceUserOperationResult,\n    isPending: isDroppingAndReplacingUserOperation,\n    error,\n  } = useMutation(\n    {\n      mutationFn: async (\n        params: DropAndReplaceUserOperationParameters<TAccount>\n      ) => {\n        if (!client) {\n          throw new ClientUndefinedHookError(\"useDropAndReplaceUserOperation\");\n        }\n\n        return client.dropAndReplaceUserOperation(params);\n      },\n      ...mutationArgs,\n    },\n    queryClient\n  );\n\n  return {\n    dropAndReplaceUserOperation,\n    dropAndReplaceUserOperationResult,\n    isDroppingAndReplacingUserOperation,\n    error,\n  };\n}\n"]}