{"version":3,"file":"useWaitForUserOperationTransaction.js","sourceRoot":"","sources":["../../../src/hooks/useWaitForUserOperationTransaction.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAGb,OAAO,EAAE,WAAW,EAA0B,MAAM,uBAAuB,CAAC;AAE5E,OAAO,EAAE,wBAAwB,EAAE,MAAM,+BAA+B,CAAC;AACzE,OAAO,EAAE,wBAAwB,EAAE,MAAM,cAAc,CAAC;AACxD,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAE5C,OAAO,EAAoC,MAAM,4BAA4B,CAAC;AAqB9E;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AACH,MAAM,UAAU,kCAAkC,CAAC,EACjD,MAAM,GACiC;IACvC,MAAM,EAAE,WAAW,EAAE,GAAG,wBAAwB,EAAE,CAAC;IAEnD,MAAM,EACJ,MAAM,EAAE,+BAA+B,EACvC,IAAI,EAAE,qCAAqC,EAC3C,SAAS,EAAE,oCAAoC,EAC/C,KAAK,GACN,GAAG,WAAW,CACb;QACE,UAAU,EAAE,KAAK,EAAE,MAAwC,EAAE,EAAE;YAC7D,IAAI,CAAC,MAAM,EAAE,CAAC;gBACZ,MAAM,IAAI,wBAAwB,CAChC,oCAAoC,CACrC,CAAC;YACJ,CAAC;YAED,OAAO,MAAM,CAAC,+BAA+B,CAAC,MAAM,CAAC,CAAC;QACxD,CAAC;KACF,EACD,WAAW,CACZ,CAAC;IAEF,OAAO;QACL,+BAA+B,EAAE,WAAW,CAAC,QAAQ,CACnD,iCAAiC,EACjC,+BAA+B,CAChC;QACD,qCAAqC;QACrC,oCAAoC;QACpC,KAAK;KACN,CAAC;AACJ,CAAC","sourcesContent":["\"use client\";\n\nimport type { WaitForUserOperationTxParameters } from \"@aa-sdk/core\";\nimport { useMutation, type UseMutateFunction } from \"@tanstack/react-query\";\nimport type { Hash } from \"viem\";\nimport { useAlchemyAccountContext } from \"./useAlchemyAccountContext.js\";\nimport { ClientUndefinedHookError } from \"../errors.js\";\nimport { ReactLogger } from \"../metrics.js\";\nimport type { BaseHookMutationArgs } from \"../types.js\";\nimport { type UseSmartAccountClientResult } from \"./useSmartAccountClient.js\";\n\nexport type UseWaitForUserOperationTransactionMutationArgs =\n  BaseHookMutationArgs<Hash, WaitForUserOperationTxParameters>;\n\nexport type UseWaitForUserOperationTransactionArgs = {\n  client: UseSmartAccountClientResult[\"client\"] | undefined;\n} & UseWaitForUserOperationTransactionMutationArgs;\n\nexport type UseWaitForUserOperationTransactionResult = {\n  waitForUserOperationTransaction: UseMutateFunction<\n    Hash,\n    Error,\n    WaitForUserOperationTxParameters,\n    unknown\n  >;\n  waitForUserOperationTransactionResult: Hash | undefined;\n  isWaitingForUserOperationTransaction: boolean;\n  error: Error | null;\n};\n\n/**\n * Custom [hook](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useWaitForUserOperationTransaction.ts) to wait for a user operation transaction and manage its state (pending, error, result).\n *\n * @param {UseWaitForUserOperationTransactionArgs} config Configuration object containing the client. [ref](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useWaitForUserOperationTransaction.ts#L15)\n * @returns {UseWaitForUserOperationTransactionResult} An object containing methods and state related to waiting for a user operation transaction. [ref](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useWaitForUserOperationTransaction.ts#L19)\n *\n * @example\n * ```ts twoslash\n * import { useWaitForUserOperationTransaction, useSmartAccountClient } from \"@account-kit/react\";\n *\n * const { client } = useSmartAccountClient({});\n * const {\n *  waitForUserOperationTransaction,\n *  waitForUserOperationTransactionResult,\n *  isWaitingForUserOperationTransaction,\n *  error\n * } = useWaitForUserOperationTransaction({\n *  client,\n *  // these are optional\n *  onSuccess: (result) => {\n *    // do something on success\n *  },\n *  onError: (error) => console.error(error),\n * });\n * ```\n */\nexport function useWaitForUserOperationTransaction({\n  client,\n}: UseWaitForUserOperationTransactionArgs): UseWaitForUserOperationTransactionResult {\n  const { queryClient } = useAlchemyAccountContext();\n\n  const {\n    mutate: waitForUserOperationTransaction,\n    data: waitForUserOperationTransactionResult,\n    isPending: isWaitingForUserOperationTransaction,\n    error,\n  } = useMutation(\n    {\n      mutationFn: async (params: WaitForUserOperationTxParameters) => {\n        if (!client) {\n          throw new ClientUndefinedHookError(\n            \"useWaitForUserOperationTransaction\"\n          );\n        }\n\n        return client.waitForUserOperationTransaction(params);\n      },\n    },\n    queryClient\n  );\n\n  return {\n    waitForUserOperationTransaction: ReactLogger.profiled(\n      \"waitForUserOperationTransaction\",\n      waitForUserOperationTransaction\n    ),\n    waitForUserOperationTransactionResult,\n    isWaitingForUserOperationTransaction,\n    error,\n  };\n}\n"]}