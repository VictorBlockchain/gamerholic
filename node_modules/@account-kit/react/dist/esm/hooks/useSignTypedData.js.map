{"version":3,"file":"useSignTypedData.js","sourceRoot":"","sources":["../../../src/hooks/useSignTypedData.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb,OAAO,EACL,WAAW,GAGZ,MAAM,uBAAuB,CAAC;AAC/B,OAAO,EAAE,aAAa,IAAI,mBAAmB,EAAE,MAAM,aAAa,CAAC;AAEnE,OAAO,EAAE,UAAU,IAAI,gBAAgB,EAAE,MAAM,OAAO,CAAC;AACvD,OAAO,EAAE,wBAAwB,EAAE,MAAM,+BAA+B,CAAC;AACzE,OAAO,EAAE,wBAAwB,EAAE,MAAM,cAAc,CAAC;AACxD,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AA4B5C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BG;AACH,MAAM,UAAU,gBAAgB,CAAC,EAC/B,MAAM,EACN,GAAG,YAAY,EACM;IACrB,MAAM,EACJ,WAAW,EACX,MAAM,EAAE,EACN,SAAS,EAAE,EAAE,WAAW,EAAE,GAC3B,GACF,GAAG,wBAAwB,EAAE,CAAC;IAC/B,MAAM,EAAE,WAAW,EAAE,GAAG,gBAAgB,CAAC,EAAE,MAAM,EAAE,WAAW,EAAE,CAAC,CAAC;IAElE,MAAM,EACJ,MAAM,EAAE,aAAa,EACrB,WAAW,EAAE,kBAAkB,EAC/B,IAAI,EAAE,eAAe,EACrB,SAAS,EAAE,kBAAkB,EAC7B,KAAK,GACN,GAAG,WAAW,CACb;QACE,UAAU,EAAE,KAAK,EAAE,MAAyB,EAAE,EAAE;YAC9C,IAAI,WAAW,EAAE,CAAC;gBAChB,OAAO,mBAAmB,CAAC,WAAW,EAAE,MAAM,CAAC,SAAS,CAAC,CAAC;YAC5D,CAAC;YAED,IAAI,CAAC,MAAM,EAAE,CAAC;gBACZ,MAAM,IAAI,wBAAwB,CAAC,kBAAkB,CAAC,CAAC;YACzD,CAAC;YACD,OAAO,MAAM,CAAC,aAAa,CAAC,EAAE,GAAG,MAAM,EAAE,CAAC,CAAC;QAC7C,CAAC;QACD,GAAG,YAAY;KAChB,EACD,WAAW,CACZ,CAAC;IAEF,OAAO;QACL,aAAa,EAAE,WAAW,CAAC,QAAQ,CAAC,eAAe,EAAE,aAAa,CAAC;QACnE,kBAAkB,EAAE,WAAW,CAAC,QAAQ,CACtC,oBAAoB,EACpB,kBAAkB,CACnB;QACD,eAAe;QACf,kBAAkB;QAClB,KAAK;KACN,CAAC;AACJ,CAAC","sourcesContent":["\"use client\";\n\nimport {\n  useMutation,\n  type UseMutateAsyncFunction,\n  type UseMutateFunction,\n} from \"@tanstack/react-query\";\nimport { signTypedData as wagmi_signTypedData } from \"@wagmi/core\";\nimport type { Hex, TypedDataDefinition } from \"viem\";\nimport { useAccount as wagmi_useAccount } from \"wagmi\";\nimport { useAlchemyAccountContext } from \"./useAlchemyAccountContext.js\";\nimport { ClientUndefinedHookError } from \"../errors.js\";\nimport { ReactLogger } from \"../metrics.js\";\nimport type { BaseHookMutationArgs } from \"../types.js\";\nimport type { UseSmartAccountClientResult } from \"./useSmartAccountClient.js\";\n\nexport type SignTypedDataArgs = { typedData: TypedDataDefinition };\n\nexport type UseSignTypedDataMutationArgs = BaseHookMutationArgs<\n  Hex,\n  SignTypedDataArgs\n>;\n\nexport type UseSignTypedDataArgs = {\n  client: UseSmartAccountClientResult[\"client\"] | undefined;\n} & UseSignTypedDataMutationArgs;\n\nexport type UseSignTypedDataResult = {\n  signTypedData: UseMutateFunction<Hex, Error, SignTypedDataArgs, unknown>;\n  signTypedDataAsync: UseMutateAsyncFunction<\n    Hex,\n    Error,\n    SignTypedDataArgs,\n    unknown\n  >;\n  signedTypedData: Hex | undefined;\n  isSigningTypedData: boolean;\n  error: Error | null;\n};\n\n/**\n * Similar to `useSignMessage`, [hook](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useSignTypedData.ts) for signing typed data, supporting both connected accounts and clients in EIP 712 format.\n *\n * Uses `eth_signTypedData` to sign structured, typed data. Accepts typed, complex data structures as input. Like `useSignMessage`, this hook also handles deployed (1271) and undeployed accounts (6492).\n *\n * @param {UseSignTypedDataArgs} args The arguments for the hook, including client and mutation-related arguments. [ref](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useSignTypedData.ts#L24)\n * @returns {UseSignTypedDataResult} An object containing methods and state related to the sign typed data mutation process. [ref](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useSignTypedData.ts#L28)\n *\n * @example\n * ```ts twoslash\n * import { useSignTypedData, useSmartAccountClient } from \"@account-kit/react\";\n * const typedData = {\n *     types: {\n *       Message: [{ name: \"content\", type: \"string\" }],\n *     },\n *     primaryType: \"Message\",\n *     message: { content: \"Hello\" },\n *   }\n * const { client } = useSmartAccountClient({});\n * const { signTypedData, signTypedDataAsync, signedTypedData, isSigningTypedData, error } = useSignTypedData({\n *  client,\n *  // these are optional\n *  onSuccess: (result) => {\n *    // do something on success\n *  },\n *  onError: (error) => console.error(error),\n * });\n *\n * const result = await signTypedData({ typedData });\n * ```\n */\nexport function useSignTypedData({\n  client,\n  ...mutationArgs\n}: UseSignTypedDataArgs): UseSignTypedDataResult {\n  const {\n    queryClient,\n    config: {\n      _internal: { wagmiConfig },\n    },\n  } = useAlchemyAccountContext();\n  const { isConnected } = wagmi_useAccount({ config: wagmiConfig });\n\n  const {\n    mutate: signTypedData,\n    mutateAsync: signTypedDataAsync,\n    data: signedTypedData,\n    isPending: isSigningTypedData,\n    error,\n  } = useMutation(\n    {\n      mutationFn: async (params: SignTypedDataArgs) => {\n        if (isConnected) {\n          return wagmi_signTypedData(wagmiConfig, params.typedData);\n        }\n\n        if (!client) {\n          throw new ClientUndefinedHookError(\"useSignTypedData\");\n        }\n        return client.signTypedData({ ...params });\n      },\n      ...mutationArgs,\n    },\n    queryClient\n  );\n\n  return {\n    signTypedData: ReactLogger.profiled(\"signTypedData\", signTypedData),\n    signTypedDataAsync: ReactLogger.profiled(\n      \"signTypedDataAsync\",\n      signTypedDataAsync\n    ),\n    signedTypedData,\n    isSigningTypedData,\n    error,\n  };\n}\n"]}