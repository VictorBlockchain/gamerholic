{"version":3,"file":"useAlchemyAccountContext.js","sourceRoot":"","sources":["../../../src/hooks/useAlchemyAccountContext.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,qBAAqB,EAAE,MAAM,6BAA6B,CAAC;AACpE,OAAO,EAAE,4BAA4B,EAAE,MAAM,cAAc,CAAC;AAC5D,OAAO,EAAE,UAAU,EAAE,MAAM,OAAO,CAAC;AAGnC;;;;;;;;;;;;;;GAcG;AACH,MAAM,CAAC,MAAM,wBAAwB,GAAG,CACtC,QAAqC,EACT,EAAE;IAC9B,MAAM,OAAO,GAAG,UAAU,CAAC,qBAAqB,CAAC,CAAC;IAClD,IAAI,QAAQ,IAAI,IAAI;QAAE,OAAO,QAAQ,CAAC;IAEtC,IAAI,OAAO,IAAI,IAAI,EAAE,CAAC;QACpB,MAAM,IAAI,4BAA4B,CAAC,0BAA0B,CAAC,CAAC;IACrE,CAAC;IAED,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC","sourcesContent":["import { AlchemyAccountContext } from \"../AlchemyAccountContext.js\";\nimport { NoAlchemyAccountContextError } from \"../errors.js\";\nimport { useContext } from \"react\";\nimport type { AlchemyAccountContextProps } from \"../AlchemyAccountContext.js\";\n\n/**\n * Internal Only hook used to access the alchemy account context.\n * This hook is meant to be consumed by other hooks exported by this package.\n *\n * @example\n * ```tsx\n * import { useAlchemyAccountContext } from \"@account-kit/react\";\n *\n * const { config, queryClient } = useAlchemyAccountContext();\n * ```\n *\n * @param {AlchemyAccountContextProps} override optional context override that can be used to return a custom context\n * @returns {AlchemyAccountContextProps} The alchemy account context if one exists\n * @throws if used outside of the AlchemyAccountProvider\n */\nexport const useAlchemyAccountContext = (\n  override?: AlchemyAccountContextProps\n): AlchemyAccountContextProps => {\n  const context = useContext(AlchemyAccountContext);\n  if (override != null) return override;\n\n  if (context == null) {\n    throw new NoAlchemyAccountContextError(\"useAlchemyAccountContext\");\n  }\n\n  return context;\n};\n"]}