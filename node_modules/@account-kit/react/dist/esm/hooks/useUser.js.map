{"version":3,"file":"useUser.js","sourceRoot":"","sources":["../../../src/hooks/useUser.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,mBAAmB,CAAC;AAEvD,OAAO,EAAE,OAAO,EAAE,oBAAoB,EAAE,MAAM,OAAO,CAAC;AACtD,OAAO,EAAE,UAAU,IAAI,gBAAgB,EAAE,MAAM,OAAO,CAAC;AACvD,OAAO,EAAE,wBAAwB,EAAE,MAAM,+BAA+B,CAAC;AAIzE;;;;;;;;;;;;;;;;;GAiBG;AAEH,MAAM,CAAC,MAAM,OAAO,GAAG,GAAkB,EAAE;IACzC,MAAM,EAAE,MAAM,EAAE,GAAG,wBAAwB,EAAE,CAAC;IAC9C,MAAM,EACJ,SAAS,EAAE,EAAE,WAAW,EAAE,GAC3B,GAAG,MAAM,CAAC;IAEX,MAAM,OAAO,GAAG,gBAAgB,CAAC,EAAE,MAAM,EAAE,WAAW,EAAE,CAAC,CAAC;IAC1D,MAAM,IAAI,GAAG,oBAAoB,CAC/B,SAAS,CAAC,MAAM,CAAC,EACjB,GAAG,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,EAC7B,GAAG,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAC9B,CAAC;IAEF,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,EAAE;QAC3B,IAAI,OAAO,CAAC,MAAM,KAAK,WAAW,IAAI,OAAO,CAAC,MAAM,KAAK,cAAc,EAAE,CAAC;YACxE,OAAO,IAAI,CAAC;QACd,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;YACrB,OAAO,IAAI,CAAC;QACd,CAAC;QAED,OAAO;YACL,OAAO,EAAE,OAAO,CAAC,OAAO;YACxB,uBAAuB;YACvB,wEAAwE;YACxE,KAAK,EAAE,OAAO,CAAC,OAAO;YACtB,MAAM,EAAE,OAAO,CAAC,OAAO;YACvB,IAAI,EAAE,KAAc;SACrB,CAAC;IACJ,CAAC,EAAE,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;IAEtC,IAAI,OAAO;QAAE,OAAO,OAAO,CAAC;IAE5B,OAAO,IAAI,CAAC;AACd,CAAC,CAAC","sourcesContent":["\"use client\";\n\nimport { getUser, watchUser } from \"@account-kit/core\";\nimport type { User } from \"@account-kit/signer\";\nimport { useMemo, useSyncExternalStore } from \"react\";\nimport { useAccount as wagmi_useAccount } from \"wagmi\";\nimport { useAlchemyAccountContext } from \"./useAlchemyAccountContext.js\";\n\nexport type UseUserResult = (User & { type: \"eoa\" | \"sca\" }) | null;\n\n/**\n * A React [hook](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useUser.ts) that returns the current user information, either from an External Owned Account (EOA) or from the client store. It uses the Alchemy account context and synchronizes with external store updates.\n * The best way to check if user is logged in for both smart account contract users and EOA.\n *\n * If using smart contract account, returns address of the signer. If only using smart account contracts then you can use [useSignerStatus](https://accountkit.alchemy.com/reference/account-kit/react/hooks/useSignerStatus#usesignerstatus) or [useAccount](https://accountkit.alchemy.com/reference/account-kit/react/hooks/useAccount#useaccount) to see if the account is defined.\n *\n * @returns {UseUserResult} The user information, including address, orgId, userId, and type. If the user is not connected, it returns null. [ref](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useUser.ts#L9)\n *\n * @example\n * ```ts twoslash\n * import { useUser } from \"@account-kit/react\";\n * import type { User } from \"@account-kit/signer\";\n * type UseUserResult  = (User & { type: \"eoa\" | \"sca\" }) | null;\n *\n * const user = useUser();\n *\n * ```\n */\n\nexport const useUser = (): UseUserResult => {\n  const { config } = useAlchemyAccountContext();\n  const {\n    _internal: { wagmiConfig },\n  } = config;\n\n  const account = wagmi_useAccount({ config: wagmiConfig });\n  const user = useSyncExternalStore(\n    watchUser(config),\n    () => getUser(config) ?? null,\n    () => getUser(config) ?? null\n  );\n\n  const eoaUser = useMemo(() => {\n    if (account.status !== \"connected\" && account.status !== \"reconnecting\") {\n      return null;\n    }\n\n    if (!account.address) {\n      return null;\n    }\n\n    return {\n      address: account.address,\n      // for backwards compat\n      // TODO: when we upgrade to v4 we should fix this with a breaking change\n      orgId: account.address,\n      userId: account.address,\n      type: \"eoa\" as const,\n    };\n  }, [account.address, account.status]);\n\n  if (eoaUser) return eoaUser;\n\n  return user;\n};\n"]}