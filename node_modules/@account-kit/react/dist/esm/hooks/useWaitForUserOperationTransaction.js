"use client";
import { useMutation } from "@tanstack/react-query";
import { useAlchemyAccountContext } from "./useAlchemyAccountContext.js";
import { ClientUndefinedHookError } from "../errors.js";
import { ReactLogger } from "../metrics.js";
import {} from "./useSmartAccountClient.js";
/**
 * Custom [hook](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useWaitForUserOperationTransaction.ts) to wait for a user operation transaction and manage its state (pending, error, result).
 *
 * @param {UseWaitForUserOperationTransactionArgs} config Configuration object containing the client. [ref](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useWaitForUserOperationTransaction.ts#L15)
 * @returns {UseWaitForUserOperationTransactionResult} An object containing methods and state related to waiting for a user operation transaction. [ref](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useWaitForUserOperationTransaction.ts#L19)
 *
 * @example
 * ```ts twoslash
 * import { useWaitForUserOperationTransaction, useSmartAccountClient } from "@account-kit/react";
 *
 * const { client } = useSmartAccountClient({});
 * const {
 *  waitForUserOperationTransaction,
 *  waitForUserOperationTransactionResult,
 *  isWaitingForUserOperationTransaction,
 *  error
 * } = useWaitForUserOperationTransaction({
 *  client,
 *  // these are optional
 *  onSuccess: (result) => {
 *    // do something on success
 *  },
 *  onError: (error) => console.error(error),
 * });
 * ```
 */
export function useWaitForUserOperationTransaction({ client, }) {
    const { queryClient } = useAlchemyAccountContext();
    const { mutate: waitForUserOperationTransaction, data: waitForUserOperationTransactionResult, isPending: isWaitingForUserOperationTransaction, error, } = useMutation({
        mutationFn: async (params) => {
            if (!client) {
                throw new ClientUndefinedHookError("useWaitForUserOperationTransaction");
            }
            return client.waitForUserOperationTransaction(params);
        },
    }, queryClient);
    return {
        waitForUserOperationTransaction: ReactLogger.profiled("waitForUserOperationTransaction", waitForUserOperationTransaction),
        waitForUserOperationTransactionResult,
        isWaitingForUserOperationTransaction,
        error,
    };
}
//# sourceMappingURL=useWaitForUserOperationTransaction.js.map