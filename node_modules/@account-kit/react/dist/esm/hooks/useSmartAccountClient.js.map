{"version":3,"file":"useSmartAccountClient.js","sourceRoot":"","sources":["../../../src/hooks/useSmartAccountClient.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb,OAAO,EAAuB,MAAM,cAAc,CAAC;AAQnD,OAAO,EACL,qBAAqB,EACrB,uBAAuB,GACxB,MAAM,mBAAmB,CAAC;AAC3B,OAAO,EAAE,OAAO,EAAE,oBAAoB,EAAE,MAAM,OAAO,CAAC;AAEtD,OAAO,EAAE,UAAU,IAAI,gBAAgB,EAAE,MAAM,OAAO,CAAC;AACvD,OAAO,EAAE,wBAAwB,EAAE,MAAM,+BAA+B,CAAC;AA8BzE;;;;;;;;;;;;;;;;;GAiBG;AACH,MAAM,UAAU,qBAAqB,CAAC,EACpC,aAAa,EACb,IAAI,GAAG,kBAAkB,EACzB,GAAG,YAAY,EACY;IAC3B,MAAM,EACJ,MAAM,EAAE,EACN,SAAS,EAAE,EAAE,WAAW,EAAE,GAC3B,EACD,MAAM,GACP,GAAG,wBAAwB,EAAE,CAAC;IAE/B,MAAM,MAAM,GAAG,oBAAoB,CACjC,uBAAuB,CAAC,EAAE,IAAI,EAAE,aAAa,EAAE,GAAG,YAAY,EAAE,EAAE,MAAM,CAAC,EACzE,GAAG,EAAE,CACH,qBAAqB,CAAC,EAAE,IAAI,EAAE,aAAa,EAAE,GAAG,YAAY,EAAE,EAAE,MAAM,CAAC,EACzE,GAAG,EAAE,CACH,qBAAqB,CAAC,EAAE,IAAI,EAAE,aAAa,EAAE,GAAG,YAAY,EAAE,EAAE,MAAM,CAAC,CAC1E,CAAC;IAEF,MAAM,EAAE,WAAW,EAAE,OAAO,EAAE,UAAU,EAAE,GAAG,gBAAgB,CAAC;QAC5D,MAAM,EAAE,WAAW;KACpB,CAAC,CAAC;IAEH,MAAM,SAAS,GAAG,OAAO,CAAC,GAAG,EAAE;QAC7B,IAAI,CAAC,WAAW;YAAE,OAAO,IAAI,CAAC;QAC9B,OAAO,CAAC,IAAI,CAAC,iDAAiD,CAAC,CAAC;QAEhE,OAAO;YACL,MAAM,EAAE,SAAS;YACjB,OAAO,EAAE,UAAU;YACnB,eAAe,EAAE,KAAK;SACvB,CAAC;IACJ,CAAC,EAAE,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC,CAAC;IAE9B,IAAI,SAAS,EAAE,CAAC;QACd,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["\"use client\";\nimport { type OptionalFields } from \"@aa-sdk/core\";\nimport type {\n  GetSmartAccountClientParams,\n  GetSmartAccountClientResult,\n  SupportedAccount,\n  SupportedAccounts,\n  SupportedAccountTypes,\n} from \"@account-kit/core\";\nimport {\n  getSmartAccountClient,\n  watchSmartAccountClient,\n} from \"@account-kit/core\";\nimport { useMemo, useSyncExternalStore } from \"react\";\nimport type { Chain } from \"viem\";\nimport { useAccount as wagmi_useAccount } from \"wagmi\";\nimport { useAlchemyAccountContext } from \"./useAlchemyAccountContext.js\";\n\nexport type UseSmartAccountClientProps<\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SupportedAccountTypes | undefined =\n    | SupportedAccountTypes\n    | undefined\n> = OptionalFields<\n  GetSmartAccountClientParams<\n    TChain,\n    TAccount extends undefined ? \"ModularAccountV2\" : TAccount\n  >,\n  \"type\"\n>;\n\nexport type UseSmartAccountClientResult<\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SupportedAccounts = SupportedAccounts\n> = GetSmartAccountClientResult<TChain, TAccount>;\n\nexport function useSmartAccountClient<\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends SupportedAccountTypes | undefined = \"ModularAccountV2\"\n>(\n  args: UseSmartAccountClientProps<TChain, TAccount>\n): UseSmartAccountClientResult<\n  TChain,\n  SupportedAccount<TAccount extends undefined ? \"ModularAccountV2\" : TAccount>\n>;\n\n/**\n * [Hook](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useSmartAccountClient.ts) that uses the provided smart account client parameters to create or retrieve an existing smart account client, handling different types of accounts including LightAccount, MultiOwnerLightAccount, and MultiOwnerModularAccount.\n * Under the hood, Smart Account Client takes care of all the necessary middleware operations needed to populate a user operation such as gas estimation and paymaster data.\n *\n * If passing in an undefined client, Smart Account Client will treat the connected account as an EOA.\n *\n * If using with an EOA, Smart Account Client wonâ€™t throw an error, but the client itself will stay undefined forever. We recommend useBundlerClient instead when using an EOA. The EOA must also be connected or authenticated with a signer.\n *\n * @param {UseSmartAccountClientProps} props The properties required to use the smart account client, including optional [account parameters](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/core/src/actions/createAccount.ts#L23), type, and additional client parameters. [ref](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useSmartAccountClient.ts#L19)\n * @returns {UseSmartAccountClientResult} An object containing the smart account client, the address, and a loading state. [ref](https://github.com/alchemyplatform/aa-sdk/blob/main/account-kit/react/src/hooks/useSmartAccountClient.ts#L24)\n *\n * @example\n * ```ts twoslash\n * import { useSmartAccountClient } from \"@account-kit/react\";\n *\n * const { client, address, isLoadingClient } = useSmartAccountClient({});\n * ```\n */\nexport function useSmartAccountClient({\n  accountParams,\n  type = \"ModularAccountV2\",\n  ...clientParams\n}: UseSmartAccountClientProps): UseSmartAccountClientResult {\n  const {\n    config: {\n      _internal: { wagmiConfig },\n    },\n    config,\n  } = useAlchemyAccountContext();\n\n  const result = useSyncExternalStore(\n    watchSmartAccountClient({ type, accountParams, ...clientParams }, config),\n    () =>\n      getSmartAccountClient({ type, accountParams, ...clientParams }, config),\n    () =>\n      getSmartAccountClient({ type, accountParams, ...clientParams }, config)\n  );\n\n  const { isConnected, address: eoaAddress } = wagmi_useAccount({\n    config: wagmiConfig,\n  });\n\n  const eoaClient = useMemo(() => {\n    if (!isConnected) return null;\n    console.warn(\"EOA is connected, will not return an SCA client\");\n\n    return {\n      client: undefined,\n      address: eoaAddress,\n      isLoadingClient: false,\n    };\n  }, [eoaAddress, isConnected]);\n\n  if (eoaClient) {\n    return eoaClient;\n  }\n\n  return result;\n}\n"]}