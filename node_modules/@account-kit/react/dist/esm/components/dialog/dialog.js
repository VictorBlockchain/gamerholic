"use client";
import { jsx as _jsx } from "react/jsx-runtime";
import { useCallback, useEffect, useLayoutEffect, useRef, useState, } from "react";
import { createPortal } from "react-dom";
import { RemoveScroll } from "react-remove-scroll";
import { FocusTrap } from "./focustrap.js";
/**
 * Dialog component that renders a modal dialog.
 *
 * @param {DialogProps} props - The props for the Dialog component.
 * @returns {JSX.Element | null} The rendered Dialog component.
 */
export const Dialog = ({ isOpen, onClose, children }) => {
    const [isScrollLocked, setScrollLocked] = useState(false);
    const [renderPortal, setRenderPortal] = useState(false);
    const dialogCardRef = useRef(null);
    const handleBackgroundClick = useCallback(() => {
        onClose();
    }, [onClose]);
    useLayoutEffect(() => {
        const dialogCard = dialogCardRef.current;
        if (isOpen) {
            setRenderPortal(true);
            return;
        }
        const renderPortalHandler = () => {
            setRenderPortal(false);
        };
        dialogCard?.addEventListener("animationend", renderPortalHandler);
        return () => {
            dialogCard?.removeEventListener("animationend", renderPortalHandler);
        };
    }, [isOpen]);
    useEffect(() => {
        const handleEscape = (event) => {
            if (event.key === "Escape" && isOpen) {
                onClose();
            }
        };
        document.addEventListener("keydown", handleEscape);
        return () => document.removeEventListener("keydown", handleEscape);
    }, [isOpen, onClose]);
    useEffect(() => {
        // Has to run in the browser
        setScrollLocked(getComputedStyle(document.body).overflow !== "hidden");
    }, []);
    return renderPortal
        ? createPortal(_jsx(RemoveScroll, { enabled: isScrollLocked, children: _jsx("div", { "aria-modal": true, role: "dialog", className: `fixed inset-0 bg-black/80 flex items-end md:items-center justify-center z-[999999] transition-opacity ${isOpen ? "opacity-100" : "opacity-0 delay-75"}`, onClick: handleBackgroundClick, children: _jsx(FocusTrap, { children: _jsx("div", { ref: dialogCardRef, className: `max-md:w-screen md:max-w-sm block ${isOpen ? "animate-slide-up" : "animate-slide-down"}`, onClick: (event) => event.stopPropagation(), children: children }) }) }) }), document.body)
        : null;
};
//# sourceMappingURL=dialog.js.map