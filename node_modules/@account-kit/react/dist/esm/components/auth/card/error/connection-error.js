"use client";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useEffect } from "react";
import { ls } from "../../../../strings.js";
import { Button } from "../../../button.js";
import { disconnect } from "@account-kit/core";
import { useAlchemyAccountContext } from "../../../../hooks/useAlchemyAccountContext.js";
export const ConnectionError = ({ headerText, bodyText, tryAgainCTA, icon, handleTryAgain, handleUseAnotherMethod, shouldDisconnect = true, handleSkip, }) => {
    const { config } = useAlchemyAccountContext();
    useEffect(() => {
        // Terminate any inflight authentication on Error...
        if (shouldDisconnect) {
            disconnect(config);
        }
    }, [config, shouldDisconnect]);
    return (_jsxs("div", { className: "flex flex-col justify-center content-center gap-3", children: [_jsx("div", { className: "flex justify-center", children: _jsx("div", { className: "w-[48px] h-[48px] flex justify-center items-center", children: icon }) }), _jsx("h2", { className: "font-semibold text-lg text-center", children: headerText }), _jsx("p", { className: "text-sm text-center text-fg-secondary", children: bodyText }), _jsx(Button, { className: "mt-3", onClick: handleTryAgain, children: tryAgainCTA ?? ls.error.cta.tryAgain }), handleUseAnotherMethod && (_jsx(Button, { onClick: handleUseAnotherMethod, variant: "social", className: "border-0 bg-btn-secondary", children: ls.error.cta.useAnotherMethod })), handleSkip && (_jsx(Button, { onClick: handleSkip, variant: "social", className: "border-0 bg-btn-secondary", children: ls.error.cta.skip }))] }));
};
//# sourceMappingURL=connection-error.js.map