{"version":3,"file":"connection-error.js","sourceRoot":"","sources":["../../../../../../src/components/auth/card/error/connection-error.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AACb,OAAO,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAClC,OAAO,EAAE,EAAE,EAAE,MAAM,wBAAwB,CAAC;AAC5C,OAAO,EAAE,MAAM,EAAE,MAAM,oBAAoB,CAAC;AAC5C,OAAO,EAAE,UAAU,EAAE,MAAM,mBAAmB,CAAC;AAC/C,OAAO,EAAE,wBAAwB,EAAE,MAAM,+CAA+C,CAAC;AAazF,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,EAC9B,UAAU,EACV,QAAQ,EACR,WAAW,EACX,IAAI,EACJ,cAAc,EACd,sBAAsB,EACtB,gBAAgB,GAAG,IAAI,EACvB,UAAU,GACW,EAAE,EAAE;IACzB,MAAM,EAAE,MAAM,EAAE,GAAG,wBAAwB,EAAE,CAAC;IAE9C,SAAS,CAAC,GAAG,EAAE;QACb,oDAAoD;QACpD,IAAI,gBAAgB,EAAE,CAAC;YACrB,UAAU,CAAC,MAAM,CAAC,CAAC;QACrB,CAAC;IACH,CAAC,EAAE,CAAC,MAAM,EAAE,gBAAgB,CAAC,CAAC,CAAC;IAE/B,OAAO,CACL,eAAK,SAAS,EAAC,mDAAmD,aAChE,cAAK,SAAS,EAAC,qBAAqB,YAClC,cAAK,SAAS,EAAC,oDAAoD,YAChE,IAAI,GACD,GACF,EACN,aAAI,SAAS,EAAC,mCAAmC,YAAE,UAAU,GAAM,EACnE,YAAG,SAAS,EAAC,uCAAuC,YAAE,QAAQ,GAAK,EACnE,KAAC,MAAM,IAAC,SAAS,EAAC,MAAM,EAAC,OAAO,EAAE,cAAc,YAC7C,WAAW,IAAI,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,GAC9B,EACR,sBAAsB,IAAI,CACzB,KAAC,MAAM,IACL,OAAO,EAAE,sBAAsB,EAC/B,OAAO,EAAE,QAAQ,EACjB,SAAS,EAAC,2BAA2B,YAEpC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,gBAAgB,GACvB,CACV,EACA,UAAU,IAAI,CACb,KAAC,MAAM,IACL,OAAO,EAAE,UAAU,EACnB,OAAO,EAAE,QAAQ,EACjB,SAAS,EAAC,2BAA2B,YAEpC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,GACX,CACV,IACG,CACP,CAAC;AACJ,CAAC,CAAC","sourcesContent":["\"use client\";\nimport { useEffect } from \"react\";\nimport { ls } from \"../../../../strings.js\";\nimport { Button } from \"../../../button.js\";\nimport { disconnect } from \"@account-kit/core\";\nimport { useAlchemyAccountContext } from \"../../../../hooks/useAlchemyAccountContext.js\";\n\ntype ConnectionErrorProps = {\n  headerText: string;\n  bodyText: string;\n  tryAgainCTA?: string;\n  icon: React.ReactNode;\n  handleTryAgain?: () => void;\n  handleUseAnotherMethod?: () => void;\n  shouldDisconnect?: boolean;\n  handleSkip?: () => void;\n};\n\nexport const ConnectionError = ({\n  headerText,\n  bodyText,\n  tryAgainCTA,\n  icon,\n  handleTryAgain,\n  handleUseAnotherMethod,\n  shouldDisconnect = true,\n  handleSkip,\n}: ConnectionErrorProps) => {\n  const { config } = useAlchemyAccountContext();\n\n  useEffect(() => {\n    // Terminate any inflight authentication on Error...\n    if (shouldDisconnect) {\n      disconnect(config);\n    }\n  }, [config, shouldDisconnect]);\n\n  return (\n    <div className=\"flex flex-col justify-center content-center gap-3\">\n      <div className=\"flex justify-center\">\n        <div className=\"w-[48px] h-[48px] flex justify-center items-center\">\n          {icon}\n        </div>\n      </div>\n      <h2 className=\"font-semibold text-lg text-center\">{headerText}</h2>\n      <p className=\"text-sm text-center text-fg-secondary\">{bodyText}</p>\n      <Button className=\"mt-3\" onClick={handleTryAgain}>\n        {tryAgainCTA ?? ls.error.cta.tryAgain}\n      </Button>\n      {handleUseAnotherMethod && (\n        <Button\n          onClick={handleUseAnotherMethod}\n          variant={\"social\"}\n          className=\"border-0 bg-btn-secondary\"\n        >\n          {ls.error.cta.useAnotherMethod}\n        </Button>\n      )}\n      {handleSkip && (\n        <Button\n          onClick={handleSkip}\n          variant={\"social\"}\n          className=\"border-0 bg-btn-secondary\"\n        >\n          {ls.error.cta.skip}\n        </Button>\n      )}\n    </div>\n  );\n};\n"]}