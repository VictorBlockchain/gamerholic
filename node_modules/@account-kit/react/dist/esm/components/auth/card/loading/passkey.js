import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { ConnectionFailed } from "../../../../icons/connectionFailed.js";
import { LoadingPasskey } from "../../../../icons/passkey.js";
import { ls } from "../../../../strings.js";
import { useAuthContext } from "../../context.js";
import { usePasskeyVerify } from "../../hooks/usePasskeyVerify.js";
import { ConnectionError } from "../error/connection-error.js";
export const LoadingPasskeyAuth = () => {
    const { setAuthStep, authStep } = useAuthContext("passkey_verify");
    const { authenticate } = usePasskeyVerify();
    if (authStep.error) {
        return (_jsx(ConnectionError, { headerText: ls.error.connection.passkeyTitle, bodyText: ls.error.connection.passkeyBody, icon: _jsx(ConnectionFailed, {}), handleTryAgain: authenticate, handleUseAnotherMethod: () => setAuthStep({ type: "initial" }) }));
    }
    return (_jsxs("div", { className: "flex flex-col w-full items-center", children: [_jsx("div", { className: "flex flex-col items-center justify-center mb-5", children: _jsx(LoadingPasskey, {}) }), _jsx("h3", { className: "font-semibold text-lg mb-2", children: ls.loadingPasskey.title }), _jsx("p", { className: "text-fg-secondary text-center text-sm", children: ls.loadingPasskey.body }), _jsx("div", { className: "flex flex-col w-full items-center gap-1" }), _jsx("button", { className: "akui-btn akui-btn-secondary w-full mt-5", onClick: () => setAuthStep({ type: "initial" }), children: "Cancel" })] }));
};
//# sourceMappingURL=passkey.js.map