import { jsx as _jsx } from "react/jsx-runtime";
import { http, HttpResponse } from "msw";
import { useEffect } from "react";
import { useUiConfig } from "../../../hooks/useUiConfig.js";
import { AuthCard } from "./index.jsx";
const Test = (props) => {
    const { updateConfig } = useUiConfig(({ updateConfig }) => ({
        updateConfig,
    }));
    let sections = [
        [{ type: "email" }],
        [{ type: "passkey" }],
    ];
    if (props.authType === "email") {
        sections = [[{ type: "email" }]];
    }
    if (props.authType === "passkey") {
        sections = [[{ type: "passkey" }]];
    }
    if (props.authType === "email-passkey") {
        sections = [[{ type: "email" }], [{ type: "passkey" }]];
    }
    if (props.authType === "external_wallets") {
        sections = [
            [
                {
                    type: "external_wallets",
                    walletConnect: {
                        projectId: "30e7ffaff99063e68cc9870c105d905b",
                    },
                },
            ],
        ];
    }
    if (props.authType === "all") {
        sections = [
            [{ type: "email" }],
            [{ type: "passkey" }],
            [
                {
                    type: "external_wallets",
                    walletConnect: {
                        projectId: "30e7ffaff99063e68cc9870c105d905b",
                    },
                },
            ],
        ];
    }
    const ui = {
        theme: "dark",
        primaryColor: {
            light: "red",
            dark: "#9AB7FF",
        },
        borderRadius: "sm",
        illustrationStyle: "outline",
        logoLight: undefined,
        logoDark: undefined,
    };
    useEffect(() => {
        const uiConfig = {
            auth: {
                showEmail: true,
                showExternalWallets: false,
                showPasskey: true,
                addPasskey: true,
                sections,
            },
            ui,
        };
        updateConfig(uiConfig);
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [props.authType]);
    return (_jsx("div", { className: "mt-20", children: _jsx(AuthCard, {}) }));
};
const meta = {
    title: "AuthCard",
    component: Test,
    argTypes: {
        authType: {
            options: ["email", "passkey", "email-passkey", "external_wallets", "all"],
            control: { type: "radio" },
        },
    },
    args: {
        authType: "email-passkey",
    },
    parameters: {
        msw: {
            handlers: [
                http.post("/api/rpc/signer/v1/lookup", () => {
                    return HttpResponse.json({
                        orgId: "483c1263-a6e3-4db1-a8b0-894e4902e404",
                    });
                }),
            ],
        },
    },
};
export default meta;
export const Default = {
    args: {
        authType: "email",
    },
};
export const withLookupError = {
    parameters: {
        msw: {
            handlers: [
                http.post("/api/rpc/signer/v1/lookup", () => {
                    return new HttpResponse(null, {
                        status: 500,
                        statusText: "MSW server error from Storybook",
                    });
                }),
            ],
        },
    },
};
export const withSignupError = {
    parameters: {
        msw: {
            handlers: [
                http.post("/api/rpc/signer/v1/signup", () => {
                    return new HttpResponse(null, {
                        status: 500,
                        statusText: "MSW server error from Storybook",
                    });
                }),
            ],
        },
    },
};
//# sourceMappingURL=index.stories.js.map