import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useEffect, useMemo, useState } from "react";
import { useAuthenticate } from "../../../../hooks/useAuthenticate.js";
import { ls } from "../../../../strings.js";
import { AuthStepStatus, useAuthContext, } from "../../context.js";
import { Button } from "../../../button.js";
export const EmailNotReceivedDisclaimer = ({ authStep, }) => {
    const { setAuthStep } = useAuthContext();
    const [emailResent, setEmailResent] = useState(false);
    const { authenticate } = useAuthenticate({
        onSuccess: () => {
            setAuthStep({ type: "complete" });
        },
    });
    const isOTPVerifying = useMemo(() => {
        return (authStep.type === "otp_verify" &&
            (authStep.status === AuthStepStatus.verifying ||
                authStep.status === AuthStepStatus.success));
    }, [authStep]);
    useEffect(() => {
        if (emailResent) {
            // set the text back to "Resend" after 2 seconds
            setTimeout(() => {
                setEmailResent(false);
            }, 2000);
        }
    }, [emailResent]);
    return (_jsxs("div", { className: "flex flex-row gap-2 justify-center mb-2", children: [_jsx("span", { className: `${isOTPVerifying ? "text-fg-disabled" : "text-fg-tertiary"} text-xs`, children: ls.loadingEmail.emailNotReceived }), _jsx(Button, { variant: "link", className: `text-xs font-normal underline ${isOTPVerifying
                    ? "text-fg-disabled disabled:opacity-100"
                    : "text-btn-primary"}`, disabled: emailResent || isOTPVerifying, onClick: () => {
                    authenticate({
                        type: "email",
                        email: authStep.email,
                        emailMode: authStep.type === "email_verify" ? "magicLink" : "otp",
                    });
                    setEmailResent(true);
                }, children: emailResent ? ls.loadingEmail.resent : ls.loadingEmail.resend })] }));
};
//# sourceMappingURL=email-not-reveived.js.map