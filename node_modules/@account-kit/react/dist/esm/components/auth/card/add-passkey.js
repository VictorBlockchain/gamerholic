import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useAddPasskey } from "../../../hooks/useAddPasskey.js";
import { AddPasskeyIllustration } from "../../../icons/illustrations/add-passkey.js";
import { PasskeyShieldIllustration, PasskeySmileyIllustration, } from "../../../icons/illustrations/passkeys.js";
import { ReactLogger } from "../../../metrics.js";
import { ls } from "../../../strings.js";
import { Button } from "../../button.js";
import { useAuthContext } from "../context.js";
import { ConnectionError } from "./error/connection-error.js";
import { ConnectionFailed as PasskeyConnectionFailed } from "../../../icons/connectionFailed.js";
const BENEFITS = [
    {
        icon: PasskeySmileyIllustration,
        title: ls.addPasskey.simplerLoginTitle,
        description: ls.addPasskey.simplerLoginDescription,
    },
    {
        icon: PasskeyShieldIllustration,
        title: ls.addPasskey.enhancedSecurityTitle,
        description: ls.addPasskey.enhancedSecurityDescription,
    },
];
export const AddPasskey = () => {
    const { setAuthStep, authStep } = useAuthContext("passkey_create");
    const { addPasskey, isAddingPasskey } = useAddPasskey({
        onSuccess: () => {
            ReactLogger.trackEvent({
                name: "add_passkey_on_signup_success",
            });
            setAuthStep({ type: "passkey_create_success" });
        },
        onError: () => {
            setAuthStep({
                type: "passkey_create",
                error: new Error("Failed to add passkey"),
            });
        },
    });
    if (authStep.error) {
        return (_jsx(ConnectionError, { headerText: ls.error.connection.passkeyTitle, bodyText: ls.error.connection.passkeyBody, icon: _jsx(PasskeyConnectionFailed, {}), shouldDisconnect: false, handleTryAgain: addPasskey, handleSkip: () => setAuthStep({ type: "complete" }) }));
    }
    return (_jsxs("div", { className: "flex flex-col gap-5 items-center", children: [_jsx("div", { className: "flex flex-col items-center justify-center h-12 w-12", children: _jsx(AddPasskeyIllustration, { height: "48", width: "48" }) }), _jsx("h3", { className: "font-semibold text-lg", children: ls.addPasskey.title }), _jsx("div", { className: "flex flex-col w-full gap-3", children: BENEFITS.map(({ title, icon: Icon, description }) => (_jsxs("div", { className: "flex gap-2", children: [_jsx("div", { className: "h-5 w-5 flex items-center justify-center", children: _jsx(Icon, {}) }), _jsxs("div", { className: "flex flex-col", children: [_jsx("p", { className: "font-semibold text-sm", children: title }), _jsx("p", { className: "text-fg-secondary text-sm", children: description })] })] }, title))) }), _jsxs("div", { className: "flex flex-col w-full gap-3", children: [_jsx(Button, { variant: "primary", onClick: () => addPasskey(), disabled: isAddingPasskey, children: ls.addPasskey.continue }), _jsx(Button, { variant: "secondary", onClick: () => {
                            ReactLogger.trackEvent({
                                name: "add_passkey_on_signup_skip",
                            });
                            setAuthStep({ type: "complete" });
                        }, disabled: isAddingPasskey, children: ls.addPasskey.skip })] })] }));
};
//# sourceMappingURL=add-passkey.js.map