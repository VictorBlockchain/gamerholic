"use client";
import { createContext, useContext } from "react";
export var AuthStepStatus;
(function (AuthStepStatus) {
    AuthStepStatus["base"] = "base";
    AuthStepStatus["success"] = "success";
    AuthStepStatus["error"] = "error";
    AuthStepStatus["verifying"] = "verifying";
})(AuthStepStatus || (AuthStepStatus = {}));
export const AuthModalContext = createContext(undefined);
/**
 * A custom hook that provides the authentication context based on the specified authentication step type. It ensures that the hook is used within an `AuthModalProvider` and throws an error if the context is not available or if the current auth step type does not match the expected type.
 *
 * @example
 * ```tsx twoslash
 * import { useAuthContext } from "@account-kit/react";
 *
 * const { authStep } = useAuthContext();
 * ```
 *
 * @param {AuthStep["type"]} [type] Optional type of authentication step to validate against the current context
 * @returns {AuthContextType} The authentication context for the current component
 * @throws Will throw an error if the hook is not used within an `AuthModalProvider` or if the current auth step type does not match the expected type
 */ export function useAuthContext(type) {
    const context = useOptionalAuthContext();
    if (!context) {
        throw new Error("useAuthModalContext must be used within a AuthModalProvider");
    }
    if (type && context.authStep.type !== type) {
        throw new Error(`expected authstep to be ${type}`);
    }
    return context;
}
export const useOptionalAuthContext = () => useContext(AuthModalContext);
//# sourceMappingURL=context.js.map