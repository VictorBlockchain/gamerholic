{"version":3,"file":"context.js","sourceRoot":"","sources":["../../../../src/components/auth/context.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAGb,OAAO,EAAE,aAAa,EAAE,UAAU,EAAE,MAAM,OAAO,CAAC;AAGlD,MAAM,CAAN,IAAY,cAKX;AALD,WAAY,cAAc;IACxB,+BAAa,CAAA;IACb,qCAAmB,CAAA;IACnB,iCAAe,CAAA;IACf,yCAAuB,CAAA;AACzB,CAAC,EALW,cAAc,KAAd,cAAc,QAKzB;AAuCD,MAAM,CAAC,MAAM,gBAAgB,GAAG,aAAa,CAC3C,SAAS,CACV,CAAC;AAMF;;;;;;;;;;;;;GAaG,CAAC,MAAM,UAAU,cAAc,CAChC,IAAmC;IAEnC,MAAM,OAAO,GAAG,sBAAsB,EAAE,CAAC;IAEzC,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,MAAM,IAAI,KAAK,CACb,6DAA6D,CAC9D,CAAC;IACJ,CAAC;IAED,IAAI,IAAI,IAAI,OAAO,CAAC,QAAQ,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC;QAC3C,MAAM,IAAI,KAAK,CAAC,2BAA2B,IAAI,EAAE,CAAC,CAAC;IACrD,CAAC;IAED,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,MAAM,CAAC,MAAM,sBAAsB,GAAG,GAAgC,EAAE,CACtE,UAAU,CAAC,gBAAgB,CAAC,CAAC","sourcesContent":["\"use client\";\n\nimport type { Connector } from \"@wagmi/core\";\nimport { createContext, useContext } from \"react\";\nimport type { AuthType } from \"./types\";\n\nexport enum AuthStepStatus {\n  base = \"base\",\n  success = \"success\",\n  error = \"error\",\n  verifying = \"verifying\",\n}\n\nexport type AuthStep =\n  | { type: \"email_verify\"; email: string }\n  | {\n      type: \"otp_verify\";\n      email: string;\n      error?: Error;\n      status?: AuthStepStatus;\n    }\n  | { type: \"passkey_verify\"; error?: Error }\n  | { type: \"passkey_create\"; error?: Error }\n  | { type: \"passkey_create_success\" }\n  | { type: \"email_completing\" }\n  | {\n      type: \"oauth_completing\";\n      config: Extract<AuthType, { type: \"social\" }>;\n      error?: Error;\n    }\n  | { type: \"initial\"; error?: Error }\n  | { type: \"complete\" }\n  | { type: \"eoa_connect\"; connector: Connector; error?: Error }\n  | { type: \"wallet_connect\"; error?: Error }\n  | { type: \"pick_eoa\" };\n\ntype AuthContextType<\n  TType extends AuthStep[\"type\"] | undefined = AuthStep[\"type\"] | undefined\n> = TType extends undefined\n  ? {\n      authStep: AuthStep;\n      setAuthStep: (step: AuthStep) => void;\n      resetAuthStep: () => void;\n    }\n  : {\n      authStep: Extract<AuthStep, { type: NonNullable<TType> }>;\n      setAuthStep: (step: AuthStep) => void;\n      resetAuthStep: () => void;\n    };\n\nexport const AuthModalContext = createContext<AuthContextType | undefined>(\n  undefined\n);\n\nexport function useAuthContext<\n  TType extends AuthStep[\"type\"] | undefined = AuthStep[\"type\"] | undefined\n>(type?: TType): AuthContextType<TType>;\n\n/**\n * A custom hook that provides the authentication context based on the specified authentication step type. It ensures that the hook is used within an `AuthModalProvider` and throws an error if the context is not available or if the current auth step type does not match the expected type.\n *\n * @example\n * ```tsx twoslash\n * import { useAuthContext } from \"@account-kit/react\";\n *\n * const { authStep } = useAuthContext();\n * ```\n *\n * @param {AuthStep[\"type\"]} [type] Optional type of authentication step to validate against the current context\n * @returns {AuthContextType} The authentication context for the current component\n * @throws Will throw an error if the hook is not used within an `AuthModalProvider` or if the current auth step type does not match the expected type\n */ export function useAuthContext(\n  type?: AuthStep[\"type\"] | undefined\n): AuthContextType {\n  const context = useOptionalAuthContext();\n\n  if (!context) {\n    throw new Error(\n      \"useAuthModalContext must be used within a AuthModalProvider\"\n    );\n  }\n\n  if (type && context.authStep.type !== type) {\n    throw new Error(`expected authstep to be ${type}`);\n  }\n\n  return context;\n}\n\nexport const useOptionalAuthContext = (): AuthContextType | undefined =>\n  useContext(AuthModalContext);\n"]}