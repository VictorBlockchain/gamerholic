import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { memo } from "react";
import { AppleIcon, FacebookIcon, GoogleIcon, } from "../../../icons/auth-icons/index.js";
import { assertNever } from "../../../utils.js";
import { Button } from "../../button.js";
import { useOAuthVerify } from "../hooks/useOAuthVerify.js";
// Not used externally
// eslint-disable-next-line jsdoc/require-jsdoc
export const OAuth = memo(({ ...config }) => {
    const { authenticate } = useOAuthVerify({ config });
    switch (config.authProviderId) {
        case "google":
            return (_jsx(Button, { variant: "social", icon: _jsx(GoogleIcon, {}), onClick: authenticate, "aria-label": "Google sign in", children: "Google" }));
        case "facebook":
            return (_jsx(Button, { variant: "social", icon: _jsx(FacebookIcon, {}), onClick: authenticate, "aria-label": "Facebook sign in", children: "Facebook" }));
        case "apple":
            return (_jsx(Button, { variant: "social", icon: _jsx(AppleIcon, {}), onClick: authenticate, "aria-label": "Apple sign in", children: "Apple" }));
        case "auth0":
            return (_jsx(Button, { variant: "social", icon: _jsxs(_Fragment, { children: [_jsx("img", { src: config.logoUrl, alt: config.auth0Connection, className: "dark:hidden" }), _jsx("img", { 
                            // Fallback to light logo if no dark logo provided.
                            src: config.logoUrlDark ?? config.logoUrl, alt: config.auth0Connection, className: "hidden dark:block" })] }), onClick: authenticate, "aria-label": `${config.displayName} sign in`, children: config.displayName }));
        default:
            assertNever(config, `unhandled authProviderId ${config.authProviderId} passed into auth sections`);
    }
});
//# sourceMappingURL=OAuth.js.map