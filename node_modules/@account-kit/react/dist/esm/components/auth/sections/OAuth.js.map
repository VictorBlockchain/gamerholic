{"version":3,"file":"OAuth.js","sourceRoot":"","sources":["../../../../../src/components/auth/sections/OAuth.tsx"],"names":[],"mappings":";AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,OAAO,CAAC;AAC7B,OAAO,EACL,SAAS,EACT,YAAY,EACZ,UAAU,GACX,MAAM,oCAAoC,CAAC;AAC5C,OAAO,EAAE,WAAW,EAAE,MAAM,mBAAmB,CAAC;AAChD,OAAO,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAC;AACzC,OAAO,EAAE,cAAc,EAAE,MAAM,4BAA4B,CAAC;AAK5D,sBAAsB;AACtB,+CAA+C;AAC/C,MAAM,CAAC,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,EAAE,GAAG,MAAM,EAAS,EAAE,EAAE;IACjD,MAAM,EAAE,YAAY,EAAE,GAAG,cAAc,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;IAEpD,QAAQ,MAAM,CAAC,cAAc,EAAE,CAAC;QAC9B,KAAK,QAAQ;YACX,OAAO,CACL,KAAC,MAAM,IACL,OAAO,EAAC,QAAQ,EAChB,IAAI,EAAE,KAAC,UAAU,KAAG,EACpB,OAAO,EAAE,YAAY,gBACV,gBAAgB,uBAGpB,CACV,CAAC;QACJ,KAAK,UAAU;YACb,OAAO,CACL,KAAC,MAAM,IACL,OAAO,EAAC,QAAQ,EAChB,IAAI,EAAE,KAAC,YAAY,KAAG,EACtB,OAAO,EAAE,YAAY,gBACV,kBAAkB,yBAGtB,CACV,CAAC;QACJ,KAAK,OAAO;YACV,OAAO,CACL,KAAC,MAAM,IACL,OAAO,EAAC,QAAQ,EAChB,IAAI,EAAE,KAAC,SAAS,KAAG,EACnB,OAAO,EAAE,YAAY,gBACV,eAAe,sBAGnB,CACV,CAAC;QACJ,KAAK,OAAO;YACV,OAAO,CACL,KAAC,MAAM,IACL,OAAO,EAAC,QAAQ,EAChB,IAAI,EACF,8BACE,cACE,GAAG,EAAE,MAAM,CAAC,OAAO,EACnB,GAAG,EAAE,MAAM,CAAC,eAAe,EAC3B,SAAS,EAAC,aAAa,GACvB,EACF;4BACE,mDAAmD;4BACnD,GAAG,EAAE,MAAM,CAAC,WAAW,IAAI,MAAM,CAAC,OAAO,EACzC,GAAG,EAAE,MAAM,CAAC,eAAe,EAC3B,SAAS,EAAC,mBAAmB,GAC7B,IACD,EAEL,OAAO,EAAE,YAAY,gBACT,GAAG,MAAM,CAAC,WAAW,UAAU,YAE1C,MAAM,CAAC,WAAW,GACZ,CACV,CAAC;QACJ;YACE,WAAW,CACT,MAAM,EACN,4BACG,MAAc,CAAC,cAClB,4BAA4B,CAC7B,CAAC;IACN,CAAC;AACH,CAAC,CAAC,CAAC","sourcesContent":["import { memo } from \"react\";\nimport {\n  AppleIcon,\n  FacebookIcon,\n  GoogleIcon,\n} from \"../../../icons/auth-icons/index.js\";\nimport { assertNever } from \"../../../utils.js\";\nimport { Button } from \"../../button.js\";\nimport { useOAuthVerify } from \"../hooks/useOAuthVerify.js\";\nimport type { AuthType } from \"../types.js\";\n\ntype Props = Extract<AuthType, { type: \"social\" }>;\n\n// Not used externally\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport const OAuth = memo(({ ...config }: Props) => {\n  const { authenticate } = useOAuthVerify({ config });\n\n  switch (config.authProviderId) {\n    case \"google\":\n      return (\n        <Button\n          variant=\"social\"\n          icon={<GoogleIcon />}\n          onClick={authenticate}\n          aria-label=\"Google sign in\"\n        >\n          Google\n        </Button>\n      );\n    case \"facebook\":\n      return (\n        <Button\n          variant=\"social\"\n          icon={<FacebookIcon />}\n          onClick={authenticate}\n          aria-label=\"Facebook sign in\"\n        >\n          Facebook\n        </Button>\n      );\n    case \"apple\":\n      return (\n        <Button\n          variant=\"social\"\n          icon={<AppleIcon />}\n          onClick={authenticate}\n          aria-label=\"Apple sign in\"\n        >\n          Apple\n        </Button>\n      );\n    case \"auth0\":\n      return (\n        <Button\n          variant=\"social\"\n          icon={\n            <>\n              <img\n                src={config.logoUrl}\n                alt={config.auth0Connection}\n                className=\"dark:hidden\"\n              />\n              <img\n                // Fallback to light logo if no dark logo provided.\n                src={config.logoUrlDark ?? config.logoUrl}\n                alt={config.auth0Connection}\n                className=\"hidden dark:block\"\n              />\n            </>\n          }\n          onClick={authenticate}\n          aria-label={`${config.displayName} sign in`}\n        >\n          {config.displayName}\n        </Button>\n      );\n    default:\n      assertNever(\n        config,\n        `unhandled authProviderId ${\n          (config as any).authProviderId\n        } passed into auth sections`\n      );\n  }\n});\n"]}