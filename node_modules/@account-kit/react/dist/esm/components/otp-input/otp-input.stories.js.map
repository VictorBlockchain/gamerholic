{"version":3,"file":"otp-input.stories.js","sourceRoot":"","sources":["../../../../src/components/otp-input/otp-input.stories.tsx"],"names":[],"mappings":";AAEA,OAAO,EAAE,eAAe,EAAE,QAAQ,EAAoB,MAAM,iBAAiB,CAAC;AAC9E,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,iBAAiB,CAAC;AACrE,OAAO,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAEjC,MAAM,IAAI,GAA0B;IAClC,SAAS,EAAE,QAAQ;IACnB,KAAK,EAAE,cAAc;IACrB,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE;QACf,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAc,eAAe,CAAC,CAAC;QACjE,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,QAAQ,CAAS,EAAE,CAAC,CAAC;QACvD,MAAM,WAAW,GAAG,GAAG,EAAE;YACvB,YAAY,CAAC,EAAE,CAAC,CAAC;YACjB,QAAQ,CAAC,eAAe,CAAC,CAAC;QAC5B,CAAC,CAAC;QACF,OAAO,CACL,KAAC,QAAQ,OACH,IAAI,EACR,KAAK,EAAE,KAAK,EACZ,QAAQ,EAAE,QAAQ,EAClB,WAAW,EAAE,WAAW,EACxB,YAAY,EAAE,YAAY,EAC1B,SAAS,EAAE,SAAS,GACpB,CACH,CAAC;IACJ,CAAC;CACF,CAAC;AACF,eAAe,IAAI,CAAC;AAGpB,MAAM,CAAC,MAAM,OAAO,GAAU,EAAE,CAAC;AAEjC,MAAM,CAAC,MAAM,UAAU,GAAU;IAC/B,IAAI,EAAE,KAAK,EAAE,EAAE,aAAa,EAAE,EAAE,EAAE;QAChC,MAAM,MAAM,GAAG,MAAM,CAAC,aAAa,CAAC,CAAC;QACrC,MAAM,MAAM,GAAG,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;QAE9C,iCAAiC;QACjC,MAAM,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QACrC,MAAM,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QACrC,MAAM,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QACrC,MAAM,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QACrC,MAAM,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QACrC,MAAM,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QAErC,gBAAgB;QAChB,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QACnC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QACnC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QACnC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QACnC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QACnC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;IACrC,CAAC;CACF,CAAC;AAEF,MAAM,CAAC,MAAM,WAAW,GAAU;IAChC,IAAI,EAAE,KAAK,EAAE,EAAE,aAAa,EAAE,EAAE,EAAE;QAChC,MAAM,MAAM,GAAG,MAAM,CAAC,aAAa,CAAC,CAAC;QACrC,MAAM,MAAM,GAAG,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;QAE9C,uBAAuB;QACvB,MAAM,aAAa,GAAG,IAAI,YAAY,EAAE,CAAC;QACzC,aAAa,CAAC,OAAO,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;QAE9C,MAAM,UAAU,GAAG,IAAI,cAAc,CAAC,OAAO,EAAE;YAC7C,aAAa;YACb,OAAO,EAAE,IAAI;YACb,UAAU,EAAE,IAAI;SACjB,CAAC,CAAC;QAEH,MAAM,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QAEpC,MAAM,OAAO,CAAC,GAAG,EAAE;YACjB,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YACnC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YACnC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YACnC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YACnC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YACnC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC;CACF,CAAC;AAEF,MAAM,CAAC,MAAM,sBAAsB,GAAU;IAC3C,IAAI,EAAE,KAAK,EAAE,EAAE,aAAa,EAAE,EAAE,EAAE;QAChC,MAAM,MAAM,GAAG,MAAM,CAAC,aAAa,CAAC,CAAC;QACrC,MAAM,MAAM,GAAG,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;QAE9C,oBAAoB;QACpB,MAAM,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QACjC,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAE/C,mBAAmB;QACnB,MAAM,SAAS,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;QACzC,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAE/C,kBAAkB;QAClB,MAAM,SAAS,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;QACxC,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAE/C,iBAAiB;QACjB,MAAM,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QACrC,MAAM,SAAS,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;QACxC,MAAM,SAAS,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;QACxC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;QAClC,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/C,MAAM,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QACrC,MAAM,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;CACF,CAAC;AAEF,MAAM,CAAC,MAAM,aAAa,GAAU;IAClC,IAAI,EAAE,KAAK,EAAE,EAAE,aAAa,EAAE,EAAE,EAAE;QAChC,MAAM,MAAM,GAAG,MAAM,CAAC,aAAa,CAAC,CAAC;QACrC,MAAM,MAAM,GAAG,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;QAE9C,2CAA2C;QAC3C,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACjD,CAAC;CACF,CAAC;AAEF,MAAM,CAAC,MAAM,cAAc,GAAU;IACnC,IAAI,EAAE,KAAK,EAAE,EAAE,aAAa,EAAE,EAAE,EAAE;QAChC,MAAM,MAAM,GAAG,MAAM,CAAC,aAAa,CAAC,CAAC;QAErC,qBAAqB;QACrB,MAAM,MAAM,GAAG,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;QAC9C,MAAM,aAAa,GAAG,IAAI,YAAY,EAAE,CAAC;QACzC,aAAa,CAAC,OAAO,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC,CAAC,iBAAiB;QAE7D,MAAM,UAAU,GAAG,IAAI,cAAc,CAAC,OAAO,EAAE;YAC7C,aAAa;YACb,OAAO,EAAE,IAAI;YACb,UAAU,EAAE,IAAI;SACjB,CAAC,CAAC;QAEH,MAAM,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QAEpC,0BAA0B;QAC1B,MAAM,OAAO,CAAC,GAAG,EAAE;YACjB,MAAM,YAAY,GAAG,MAAM,CAAC,SAAS,CACnC,oCAAoC,CACrC,CAAC;YACF,MAAM,CAAC,YAAY,CAAC,CAAC,iBAAiB,EAAE,CAAC;QAC3C,CAAC,CAAC,CAAC;IACL,CAAC;CACF,CAAC;AAEF,MAAM,CAAC,MAAM,iBAAiB,GAAU;IACtC,IAAI,EAAE;QACJ,QAAQ,EAAE,IAAI;KACf;IACD,IAAI,EAAE,KAAK,EAAE,EAAE,aAAa,EAAE,EAAE,EAAE;QAChC,MAAM,MAAM,GAAG,MAAM,CAAC,aAAa,CAAC,CAAC;QACrC,MAAM,MAAM,GAAG,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;QAE9C,iCAAiC;QACjC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YACvB,MAAM,CAAC,KAAK,CAAC,CAAC,YAAY,EAAE,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,gCAAgC;QAChC,MAAM,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QACrC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;IACpC,CAAC;CACF,CAAC","sourcesContent":["/* eslint-disable react-hooks/rules-of-hooks */\nimport type { Meta, StoryObj } from \"@storybook/react\";\nimport { initialOTPValue, OTPInput, type OTPCodeType } from \"./otp-input.jsx\";\nimport { userEvent, within, expect, waitFor } from \"@storybook/test\";\nimport { useState } from \"react\";\n\nconst meta: Meta<typeof OTPInput> = {\n  component: OTPInput,\n  title: \"OTP/OTPInput\",\n  render: (args) => {\n    const [value, setValue] = useState<OTPCodeType>(initialOTPValue);\n    const [errorText, setErrorText] = useState<string>(\"\");\n    const handleReset = () => {\n      setErrorText(\"\");\n      setValue(initialOTPValue);\n    };\n    return (\n      <OTPInput\n        {...args}\n        value={value}\n        setValue={setValue}\n        handleReset={handleReset}\n        setErrorText={setErrorText}\n        errorText={errorText}\n      />\n    );\n  },\n};\nexport default meta;\ntype Story = StoryObj<typeof OTPInput>;\n\nexport const Default: Story = {};\n\nexport const TestTyping: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const inputs = canvas.getAllByRole(\"textbox\");\n\n    // Test typing individual numbers\n    await userEvent.type(inputs[0], \"1\");\n    await userEvent.type(inputs[1], \"2\");\n    await userEvent.type(inputs[2], \"3\");\n    await userEvent.type(inputs[3], \"4\");\n    await userEvent.type(inputs[4], \"5\");\n    await userEvent.type(inputs[5], \"6\");\n\n    // Verify values\n    expect(inputs[0]).toHaveValue(\"1\");\n    expect(inputs[1]).toHaveValue(\"2\");\n    expect(inputs[2]).toHaveValue(\"3\");\n    expect(inputs[3]).toHaveValue(\"4\");\n    expect(inputs[4]).toHaveValue(\"5\");\n    expect(inputs[5]).toHaveValue(\"6\");\n  },\n};\n\nexport const TestPasting: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const inputs = canvas.getAllByRole(\"textbox\");\n\n    // Simulate paste event\n    const clipboardData = new DataTransfer();\n    clipboardData.setData(\"text/plain\", \"123456\");\n\n    const pasteEvent = new ClipboardEvent(\"paste\", {\n      clipboardData,\n      bubbles: true,\n      cancelable: true,\n    });\n\n    inputs[0].dispatchEvent(pasteEvent);\n\n    await waitFor(() => {\n      expect(inputs[0]).toHaveValue(\"1\");\n      expect(inputs[1]).toHaveValue(\"2\");\n      expect(inputs[2]).toHaveValue(\"3\");\n      expect(inputs[3]).toHaveValue(\"4\");\n      expect(inputs[4]).toHaveValue(\"5\");\n      expect(inputs[5]).toHaveValue(\"6\");\n    });\n  },\n};\n\nexport const TestKeyboardNavigation: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const inputs = canvas.getAllByRole(\"textbox\");\n\n    // Focus first input\n    await userEvent.click(inputs[0]);\n    expect(document.activeElement).toBe(inputs[0]);\n\n    // Test right arrow\n    await userEvent.keyboard(\"{ArrowRight}\");\n    expect(document.activeElement).toBe(inputs[1]);\n\n    // Test left arrow\n    await userEvent.keyboard(\"{ArrowLeft}\");\n    expect(document.activeElement).toBe(inputs[0]);\n\n    // Test backspace\n    await userEvent.type(inputs[0], \"1\");\n    await userEvent.keyboard(\"{Backspace}\");\n    await userEvent.keyboard(\"{Backspace}\");\n    expect(inputs[0]).toHaveValue(\"\");\n    expect(document.activeElement).toBe(inputs[0]);\n    await userEvent.type(inputs[0], \"1\");\n    await userEvent.keyboard(\"23456\");\n  },\n};\n\nexport const TestAutoFocus: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const inputs = canvas.getAllByRole(\"textbox\");\n\n    // Check if first input is focused on mount\n    expect(document.activeElement).toBe(inputs[0]);\n  },\n};\n\nexport const TestErrorState: Story = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // Test invalid paste\n    const inputs = canvas.getAllByRole(\"textbox\");\n    const clipboardData = new DataTransfer();\n    clipboardData.setData(\"text/plain\", \"123\"); // Invalid length\n\n    const pasteEvent = new ClipboardEvent(\"paste\", {\n      clipboardData,\n      bubbles: true,\n      cancelable: true,\n    });\n\n    inputs[0].dispatchEvent(pasteEvent);\n\n    // Check for error message\n    await waitFor(() => {\n      const errorMessage = canvas.getByText(\n        /The code you entered is incorrect/i\n      );\n      expect(errorMessage).toBeInTheDocument();\n    });\n  },\n};\n\nexport const TestDisabledState: Story = {\n  args: {\n    disabled: true,\n  },\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const inputs = canvas.getAllByRole(\"textbox\");\n\n    // Verify all inputs are disabled\n    inputs.forEach((input) => {\n      expect(input).toBeDisabled();\n    });\n\n    // Try to type (should not work)\n    await userEvent.type(inputs[0], \"1\");\n    expect(inputs[0]).toHaveValue(\"\");\n  },\n};\n"]}