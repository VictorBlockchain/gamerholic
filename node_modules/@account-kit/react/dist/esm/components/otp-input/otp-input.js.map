{"version":3,"file":"otp-input.js","sourceRoot":"","sources":["../../../../src/components/otp-input/otp-input.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { ls } from \"../../strings.js\";\n\nexport type OTPCodeType = [string, string, string, string, string, string];\nexport const initialOTPValue: OTPCodeType = [\"\", \"\", \"\", \"\", \"\", \"\"];\nconst OTP_LENGTH = 6;\ntype OTPInputProps = {\n  errorText?: string;\n  value: OTPCodeType;\n  setValue: (otpCode: OTPCodeType) => void;\n  setErrorText: React.Dispatch<React.SetStateAction<string>>;\n  disabled?: boolean;\n  handleReset: () => void;\n  className?: string;\n  isVerified?: boolean;\n};\n\nexport const isOTPCodeType = (arg: string[]): arg is OTPCodeType => {\n  return (\n    Array.isArray(arg) &&\n    arg.every((item: string) => typeof item === \"string\" && item !== \"\") &&\n    arg.length === OTP_LENGTH\n  );\n};\n\nexport const OTPInput: React.FC<OTPInputProps> = ({\n  value,\n  setValue,\n  errorText,\n  disabled,\n  setErrorText,\n  handleReset,\n  className,\n  isVerified,\n}) => {\n  const [autoComplete, setAutoComplete] = useState<string>(\"\");\n  const [activeElement, setActiveElement] = useState<number | null>(0);\n\n  const refs = useRef<Array<HTMLInputElement | null>>([]);\n  // Initialize refs\n  useEffect(() => {\n    refs.current = refs.current.slice(0, OTP_LENGTH);\n    refs.current[0]?.focus();\n  }, []);\n  // Select active element when active element value changes\n  useEffect(() => {\n    if (activeElement !== null && refs.current[activeElement]) {\n      refs.current[activeElement]?.select();\n      refs.current[activeElement]?.focus();\n    }\n  }, [activeElement]);\n\n  useEffect(() => {\n    const newValue = autoComplete.split(\"\");\n    if (isOTPCodeType(newValue)) {\n      setValue(newValue);\n    }\n  }, [autoComplete, setValue]);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>, i: number) => {\n    //Fix for ios chrome autocomplete\n    if (e.target.value.length === OTP_LENGTH) {\n      const chromeIOSAutocomplete = e.target.value.split(\"\");\n      if (isOTPCodeType(chromeIOSAutocomplete)) {\n        setValue(chromeIOSAutocomplete);\n        setActiveElement(null);\n        return;\n      }\n    }\n    const newValue = [...value] as OTPCodeType;\n    newValue.splice(i, 1, e.target.value);\n    setErrorText(\"\");\n    setValue(newValue);\n    focusNextElement();\n  };\n\n  const handleClick = (i: number) => {\n    refs.current[i]?.select();\n    setActiveElement(i);\n    setErrorText(\"\");\n  };\n\n  const focusNextElement = () => {\n    const nextElement = activeElement ? activeElement + 1 : 1;\n    setActiveElement(nextElement);\n  };\n\n  const focusPreviousElement = () => {\n    const previousElement = activeElement ? activeElement - 1 : 0;\n    setActiveElement(previousElement);\n  };\n\n  const handlePaste = (e: React.ClipboardEvent<HTMLInputElement>) => {\n    e.preventDefault();\n    const pasteData = e.clipboardData\n      .getData(\"text/plain\")\n      .split(\"\")\n      .slice(0, OTP_LENGTH);\n    if (isOTPCodeType(pasteData)) {\n      setValue(pasteData);\n    } else {\n      setErrorText(ls.error.otp.invalid);\n    }\n  };\n\n  const handleKeydown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (activeElement === null) return;\n    switch (e.key) {\n      case \"Backspace\":\n        e.preventDefault();\n        const newValue = [...value] as OTPCodeType;\n        newValue.splice(activeElement, 1, \"\");\n        setValue(newValue);\n        focusPreviousElement();\n        break;\n      case \"ArrowLeft\":\n        e.preventDefault();\n        focusPreviousElement();\n        break;\n      case \"ArrowRight\":\n        e.preventDefault();\n        if (activeElement < OTP_LENGTH - 1) focusNextElement();\n        break;\n      case \"Spacebar\": {\n        break;\n      }\n    }\n  };\n\n  return (\n    <div className={`flex flex-col gap-2 items-center ${className}`}>\n      {/* Input for autocomplete, visibility hidden */}\n      <input\n        className=\"invisible h-0 w-0 p-[0] m-[-1px]\"\n        tabIndex={-1}\n        aria-hidden\n        autoComplete=\"one-time-code\"\n        value={autoComplete}\n        onChange={(e) => setAutoComplete(e.target.value)}\n        onClick={handleReset}\n      />\n      <div className=\"flex gap-2.5\">\n        {initialOTPValue.map((_, i) => (\n          <input\n            className={`\n              border w-8 h-10 rounded text-center \n              focus:outline-none focus:border-active \n              ${!disabled ? \"bg-bg-surface-default text-fg-primary\" : \"\"}\n              ${!!errorText ? \"border-fg-critical\" : \"\"} \n              ${isVerified ? \"border-fg-success\" : \"\"}\n              ${\n                disabled\n                  ? \"border-fg-disabled bg-bg-surface-inset text-fg-disabled\"\n                  : \"\"\n              }\n            `}\n            ref={(el) => (refs.current[i] = el)}\n            tabIndex={i + 1}\n            type=\"text\"\n            aria-label={`One time password input for the ${i + 1} digit`}\n            inputMode=\"numeric\"\n            pattern=\"[0-9]*\"\n            //Fix for ios chrome autocomplete\n            maxLength={i === 0 ? OTP_LENGTH : 1}\n            onFocus={() => setActiveElement(i)}\n            onPaste={handlePaste}\n            onChange={(e) => handleChange(e, i)}\n            onClick={() => handleClick(i)}\n            onInput={focusNextElement}\n            onKeyDown={handleKeydown}\n            key={i}\n            disabled={disabled || isVerified}\n            value={value[i]}\n            aria-invalid={!!errorText}\n          />\n        ))}\n      </div>\n      {errorText && (\n        <p className=\"text-fg-critical text-sm text-center\">{errorText}</p>\n      )}\n    </div>\n  );\n};\n"]}