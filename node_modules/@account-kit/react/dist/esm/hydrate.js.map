{"version":3,"file":"hydrate.js","sourceRoot":"","sources":["../../src/hydrate.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb,OAAO,EACL,OAAO,GAGR,MAAM,mBAAmB,CAAC;AAC3B,OAAO,EAAE,SAAS,EAAE,MAAM,EAA0B,MAAM,OAAO,CAAC;AAOlE;;;;;;;;;;;;;GAaG;AACH,MAAM,UAAU,OAAO,CAAC,KAAsC;IAC5D,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,YAAY,EAAE,GAAG,KAAK,CAAC;IAEjD,MAAM,EAAE,OAAO,EAAE,GAAG,OAAO,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;IAElD,sBAAsB;IACtB,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;QAC1B,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,kBAAkB;IAClB,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;IAC5B,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,MAAM,CAAC,OAAO;YAAE,OAAO;QAC5B,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG;YAAE,OAAO;QAClC,OAAO,EAAE,CAAC;QACV,OAAO,GAAG,EAAE;YACV,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC;QACzB,CAAC,CAAC;QACF,uDAAuD;IACzD,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO,QAAQ,CAAC;AAClB,CAAC","sourcesContent":["\"use client\";\n\nimport {\n  hydrate,\n  type AlchemyAccountsConfig,\n  type AlchemyClientState,\n} from \"@account-kit/core\";\nimport { useEffect, useRef, type PropsWithChildren } from \"react\";\n\nexport type HydrateProps = {\n  config: AlchemyAccountsConfig;\n  initialState?: AlchemyClientState;\n};\n\n/**\n * A react component that can be used to hydrate the client store with the provided initial state.\n * This method will use `hydrate` to hydrate the client store with the provided initial state if one is provided.\n * If ssr is set on the account config, then it will run the onMount function within a useEffect hook. Otherwise,\n * It will run onMount as soon as the compoonent is rendered.\n *\n * based on https://github.com/wevm/wagmi/blob/main/packages/react/src/hydrate.ts\n *\n * @param {PropsWithChildren<HydrateProps>} props component props containing the config and initial state as well as children to render\n * @param {AlchemyAccountsConfig} props.config the account config containing the client store\n * @param {AlchemyClientState | undefined} props.initialState optional param detailing the initial ClientState\n * @param {React.ReactNode} props.children the children to render\n * @returns {React.ReactNode} the children to render\n */\nexport function Hydrate(props: PropsWithChildren<HydrateProps>) {\n  const { children, config, initialState } = props;\n\n  const { onMount } = hydrate(config, initialState);\n\n  // Hydrate for Non-SSR\n  if (!config._internal.ssr) {\n    onMount();\n  }\n\n  // Hydrate for SSR\n  const active = useRef(true);\n  useEffect(() => {\n    if (!active.current) return;\n    if (!config._internal.ssr) return;\n    onMount();\n    return () => {\n      active.current = false;\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return children;\n}\n"]}