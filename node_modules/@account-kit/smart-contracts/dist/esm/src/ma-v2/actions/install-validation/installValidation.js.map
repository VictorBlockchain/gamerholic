{"version":3,"file":"installValidation.js","sourceRoot":"","sources":["../../../../../../src/ma-v2/actions/install-validation/installValidation.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AccountNotFoundError,\n  IncompatibleClientError,\n  isSmartAccountClient,\n  EntityIdOverrideError,\n  type GetEntryPointFromAccount,\n  type SendUserOperationResult,\n  type UserOperationOverridesParameter,\n  type SmartAccountSigner,\n} from \"@aa-sdk/core\";\nimport {\n  type Address,\n  type Hex,\n  encodeFunctionData,\n  concatHex,\n  zeroAddress,\n} from \"viem\";\n\nimport { semiModularAccountBytecodeAbi } from \"../../abis/semiModularAccountBytecodeAbi.js\";\nimport type { HookConfig, ValidationConfig } from \"../common/types.js\";\nimport {\n  serializeValidationConfig,\n  serializeHookConfig,\n  serializeModuleEntity,\n} from \"../common/utils.js\";\n\nimport { type ModularAccountV2Client } from \"../../client/client.js\";\nimport { type ModularAccountV2 } from \"../../account/common/modularAccountV2Base.js\";\nimport { DEFAULT_OWNER_ENTITY_ID } from \"../../utils.js\";\n\nexport type InstallValidationParams<\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n> = {\n  validationConfig: ValidationConfig;\n  selectors: Hex[];\n  installData: Hex;\n  hooks: {\n    hookConfig: HookConfig;\n    initData: Hex;\n  }[];\n  account?: ModularAccountV2<TSigner> | undefined;\n} & UserOperationOverridesParameter<\n  GetEntryPointFromAccount<ModularAccountV2<TSigner>>\n>;\n\nexport type UninstallValidationParams<\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n> = {\n  moduleAddress: Address;\n  entityId: number;\n  uninstallData: Hex;\n  hookUninstallDatas: Hex[];\n  account?: ModularAccountV2<TSigner> | undefined;\n} & UserOperationOverridesParameter<\n  GetEntryPointFromAccount<ModularAccountV2<TSigner>>\n>;\n\nexport type InstallValidationActions<\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n> = {\n  installValidation: (\n    args: InstallValidationParams<TSigner>\n  ) => Promise<SendUserOperationResult>;\n  encodeInstallValidation: (\n    // TODO: omit the user op sending related parameters from this type\n    args: InstallValidationParams<TSigner>\n  ) => Promise<Hex>;\n  uninstallValidation: (\n    args: UninstallValidationParams<TSigner>\n  ) => Promise<SendUserOperationResult>;\n  encodeUninstallValidation: (\n    args: UninstallValidationParams<TSigner>\n  ) => Promise<Hex>;\n};\n\n/**\n * Provides validation installation and uninstallation functionalities for a MA v2 client, ensuring compatibility with `SmartAccountClient`.\n *\n * @example\n * ```ts\n * import { createModularAccountV2Client, installValidationActions, getDefaultSingleSignerValidationModuleAddress, SingleSignerValidationModule } from \"@account-kit/smart-contracts\";\n * import { Address } from \"viem\";\n *\n * const client = (await createModularAccountV2Client({ ... })).extend(installValidationActions);\n * const sessionKeyAddress: Address = \"0x1234\";\n * const sessionKeyEntityId: number = 1;\n *\n * await client.installValidation({\n *   validationConfig: {\n *     moduleAddress: getDefaultSingleSignerValidationModuleAddress(\n *       client.chain\n *     ),\n *     entityId: sessionKeyEntityId,\n *     isGlobal: true,\n *     isSignatureValidation: false,\n *     isUserOpValidation: true,\n *   },\n *   selectors: [],\n *   installData: SingleSignerValidationModule.encodeOnInstallData({\n *     entityId: sessionKeyEntityId,\n *     signer: sessionKeyAddress,\n *   }),\n *   hooks: [],\n * });\n *\n * await client.uninstallValidation({\n *   moduleAddress: sessionKeyAddress,\n *   entityId: sessionKeyEntityId,\n *   uninstallData: SingleSignerValidationModule.encodeOnUninstallData({\n *     entityId: sessionKeyEntityId,\n *   }),\n *   hookUninstallDatas: [],\n * });\n *\n * ```\n *\n * @param {object} client - The client instance which provides account and sendUserOperation functionality.\n * @returns {object} - An object containing two methods, `installValidation` and `uninstallValidation`.\n */\nexport const installValidationActions: <\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n>(\n  client: ModularAccountV2Client<TSigner>\n) => InstallValidationActions<TSigner> = (client) => {\n  const encodeInstallValidation = async ({\n    validationConfig,\n    selectors,\n    installData,\n    hooks,\n    account = client.account,\n  }: InstallValidationParams) => {\n    if (!account) {\n      throw new AccountNotFoundError();\n    }\n\n    if (!isSmartAccountClient(client)) {\n      throw new IncompatibleClientError(\n        \"SmartAccountClient\",\n        \"installValidation\",\n        client\n      );\n    }\n\n    // an entityId of zero is only allowed if we're installing or uninstalling hooks on the fallback validation\n    if (\n      validationConfig.entityId === DEFAULT_OWNER_ENTITY_ID &&\n      validationConfig.moduleAddress !== zeroAddress\n    ) {\n      throw new EntityIdOverrideError();\n    }\n\n    return account.encodeCallData(\n      encodeFunctionData({\n        abi: semiModularAccountBytecodeAbi,\n        functionName: \"installValidation\",\n        args: [\n          serializeValidationConfig(validationConfig),\n          selectors,\n          installData,\n          hooks.map((hook: { hookConfig: HookConfig; initData: Hex }) =>\n            concatHex([serializeHookConfig(hook.hookConfig), hook.initData])\n          ),\n        ],\n      })\n    );\n  };\n\n  const encodeUninstallValidation = async ({\n    moduleAddress,\n    entityId,\n    uninstallData,\n    hookUninstallDatas,\n    account = client.account,\n  }: UninstallValidationParams) => {\n    if (!account) {\n      throw new AccountNotFoundError();\n    }\n\n    if (!isSmartAccountClient(client)) {\n      throw new IncompatibleClientError(\n        \"SmartAccountClient\",\n        \"uninstallValidation\",\n        client\n      );\n    }\n\n    return account.encodeCallData(\n      encodeFunctionData({\n        abi: semiModularAccountBytecodeAbi,\n        functionName: \"uninstallValidation\",\n        args: [\n          serializeModuleEntity({\n            moduleAddress,\n            entityId,\n          }),\n          uninstallData,\n          hookUninstallDatas,\n        ],\n      })\n    );\n  };\n\n  return {\n    encodeInstallValidation,\n    encodeUninstallValidation,\n    installValidation: async ({\n      validationConfig,\n      selectors,\n      installData,\n      hooks,\n      account = client.account,\n      overrides,\n    }) => {\n      const callData = await encodeInstallValidation({\n        validationConfig,\n        selectors,\n        installData,\n        hooks,\n        account,\n      });\n\n      return client.sendUserOperation({\n        uo: callData,\n        account,\n        overrides,\n      });\n    },\n\n    uninstallValidation: async ({\n      moduleAddress,\n      entityId,\n      uninstallData,\n      hookUninstallDatas,\n      account = client.account,\n      overrides,\n    }) => {\n      const callData = await encodeUninstallValidation({\n        moduleAddress,\n        entityId,\n        uninstallData,\n        hookUninstallDatas,\n        account,\n      });\n\n      return client.sendUserOperation({\n        uo: callData,\n        account,\n        overrides,\n      });\n    },\n  };\n};\n"]}