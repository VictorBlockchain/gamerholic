{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../../../src/ma-v2/actions/common/utils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAY,KAAK,EAAE,SAAS,EAAE,MAAM,MAAM,CAAC;AAElD,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AAEtC;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH,MAAM,UAAU,yBAAyB,CAAC,MAAwB;IAChE,MAAM,qBAAqB,GAAG,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAChE,MAAM,wBAAwB,GAAG,MAAM,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACtE,MAAM,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5C,OAAO,SAAS,CAAC;QACf,qBAAqB,CAAC,MAAM,CAAC;QAC7B,KAAK,CAAC,qBAAqB,GAAG,wBAAwB,GAAG,WAAW,EAAE;YACpE,IAAI,EAAE,CAAC;SACR,CAAC;KACH,CAAC,CAAC;AACL,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AACH,MAAM,UAAU,mBAAmB,CAAC,MAAkB;IACpD,MAAM,WAAW,GAAG,MAAM,CAAC,QAAQ,KAAK,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpE,MAAM,eAAe,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpD,MAAM,cAAc,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAClD,OAAO,SAAS,CAAC;QACf,MAAM,CAAC,OAAO;QACd,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC;QACnC,KAAK,CAAC,WAAW,GAAG,eAAe,GAAG,cAAc,EAAE;YACpD,IAAI,EAAE,CAAC;SACR,CAAC;KACH,CAAC,CAAC;AACL,CAAC;AAED;;;;;;;;;;;;;;;;;;;GAmBG;AACH,MAAM,UAAU,qBAAqB,CAAC,MAAoB;IACxD,OAAO,SAAS,CAAC,CAAC,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAChF,CAAC","sourcesContent":["import { type Hex, toHex, concatHex } from \"viem\";\nimport type { ValidationConfig, HookConfig, ModuleEntity } from \"./types\";\nimport { HookType } from \"./types.js\";\n\n/**\n * Serializes a validation configuration into a hexadecimal string representation. This involves converting boolean flags into bitwise representation and combining them with serialized module entity data.\n *\n * @example\n * ```ts\n * import { serializeValidationConfig } from \"@account-kit/smart-contracts\";\n * import { Address } from \"viem\";\n *\n * const moduleAddress: Address = \"0x1234\";\n * const entityId: number = 1234;\n * const isGlobal: boolean = true;\n * const isSignatureValidation: boolean = false;\n * const isUserOpValidation: boolean = true;\n *\n * const validationConfigHex = serializeValidationConfig({\n *  moduleAddress,\n *  entityId\n *  isGlobal,\n *  isSignatureValidation,\n *  isUserOpValidation\n * });\n * ```\n * @param {ValidationConfig} config The validation configuration object containing details to serialize\n * @returns {Hex} A hexadecimal string representing the serialized configuration\n */\nexport function serializeValidationConfig(config: ValidationConfig): Hex {\n  const isUserOpValidationBit = config.isUserOpValidation ? 1 : 0;\n  const isSignatureValidationBit = config.isSignatureValidation ? 2 : 0;\n  const isGlobalBit = config.isGlobal ? 4 : 0;\n  return concatHex([\n    serializeModuleEntity(config),\n    toHex(isUserOpValidationBit + isSignatureValidationBit + isGlobalBit, {\n      size: 1,\n    }),\n  ]);\n}\n\n/**\n * Serializes a `HookConfig` object into a `Hex` format by encoding the hook type, presence of post/pre hooks, address, and entity ID.\n *\n * @example\n * ```ts\n * import { type HookType, serializeHookConfig } from \"@account-kit/smart-contracts\";\n * import { Address } from \"viem\";\n *\n * const moduleAddress: Address = \"0x1234\";\n * const entityId: number = 1234;\n * const hookType: HookType = HookType.Validation;\n * const hasPostHooks: boolean = false;\n * const hasPreHooks: boolean = true;\n *\n * const hookConfigHex = serializeHookConfig({\n *  moduleAddress,\n *  entityId\n *  hookType,\n *  hasPostHooks,\n *  hasPreHooks\n * });\n * ```\n *\n * @param {HookConfig} config The hook configuration containing address, entity ID, hook type, and post/pre hook indicators\n * @returns {Hex} The serialized hook configuration in hexadecimal format\n */\nexport function serializeHookConfig(config: HookConfig): Hex {\n  const hookTypeBit = config.hookType === HookType.VALIDATION ? 1 : 0;\n  const hasPostHooksBit = config.hasPostHooks ? 2 : 0;\n  const hasPreHooksBit = config.hasPreHooks ? 4 : 0;\n  return concatHex([\n    config.address,\n    toHex(config.entityId, { size: 4 }),\n    toHex(hookTypeBit + hasPostHooksBit + hasPreHooksBit, {\n      size: 1,\n    }),\n  ]);\n}\n\n/**\n * Serializes a module entity into a hexadecimal format by concatenating the module address and entity ID.\n *\n * @example\n * ```ts\n * import { serializeModuleEntity } from \"@account-kit/smart-contracts\";\n * import { Address } from \"viem\";\n *\n * const moduleAddress: Address = \"0x1234\";\n * const entityId: number = 1234;\n *\n * const moduleEntityHex = serializeModuleEntity({\n *  moduleAddress,\n *  entityId\n * });\n * ```\n *\n * @param {ModuleEntity} config The module entity configuration containing the module address and entity ID\n * @returns {Hex} A hexadecimal string representation of the serialized module entity\n */\nexport function serializeModuleEntity(config: ModuleEntity): Hex {\n  return concatHex([config.moduleAddress, toHex(config.entityId, { size: 4 })]);\n}\n"]}