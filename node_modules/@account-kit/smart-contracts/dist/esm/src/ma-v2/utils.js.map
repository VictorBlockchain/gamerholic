{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../src/ma-v2/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  concat,\n  toHex,\n  custom,\n  encodeFunctionData,\n  type Hex,\n  type Chain,\n  type Address,\n  type Transport,\n} from \"viem\";\nimport {\n  arbitrum,\n  arbitrumSepolia,\n  base,\n  baseSepolia,\n  mainnet,\n  optimism,\n  optimismSepolia,\n  polygon,\n  polygonAmoy,\n  sepolia,\n} from \"@account-kit/infra\";\nimport { createModularAccountV2 } from \"./account/modularAccountV2.js\";\nimport { type ModularAccountV2 } from \"./account/common/modularAccountV2Base.js\";\nimport { semiModularAccountStorageAbi } from \"./abis/semiModularAccountStorageAbi.js\";\nimport {\n  AccountNotFoundError,\n  ChainNotFoundError,\n  type GetAccountParameter,\n  type SmartAccountClient,\n  type SmartAccountSigner,\n  type SmartContractAccountWithSigner,\n  type UpgradeToData,\n} from \"@aa-sdk/core\";\n\nexport const DEFAULT_OWNER_ENTITY_ID = 0;\n\nexport type PackUOSignatureParams = {\n  // orderedHookData: HookData[];\n  validationSignature: Hex;\n};\n\n// TODO: direct call validation 1271\nexport type Pack1271SignatureParams = {\n  validationSignature: Hex;\n  entityId: number;\n};\n\n// Signature packing utility for user operations\nexport const packUOSignature = ({\n  // orderedHookData, TODO: integrate in next iteration of MAv2 sdk\n  validationSignature,\n}: PackUOSignatureParams): Hex => {\n  return concat([\"0xFF\", \"0x00\", validationSignature]);\n};\n\n// Signature packing utility for 1271 signatures\nexport const pack1271Signature = ({\n  validationSignature,\n  entityId,\n}: Pack1271SignatureParams): Hex => {\n  return concat([\n    \"0x00\",\n    toHex(entityId, { size: 4 }),\n    \"0xFF\",\n    \"0x00\", // EOA type signature\n    validationSignature,\n  ]);\n};\n\nexport const getDefaultMAV2FactoryAddress = (chain: Chain): Address => {\n  switch (chain.id) {\n    // TODO: case mekong.id:\n    case sepolia.id:\n    case baseSepolia.id:\n    case polygon.id:\n    case mainnet.id:\n    case polygonAmoy.id:\n    case optimism.id:\n    case optimismSepolia.id:\n    case arbitrum.id:\n    case arbitrumSepolia.id:\n    case base.id:\n    default:\n      return \"0x00000000000017c61b5bEe81050EC8eFc9c6fecd\";\n  }\n};\n\nexport const getDefaultSMAV2BytecodeAddress = (chain: Chain): Address => {\n  switch (chain.id) {\n    // TODO: case mekong.id:\n    case sepolia.id:\n    case baseSepolia.id:\n    case polygon.id:\n    case mainnet.id:\n    case polygonAmoy.id:\n    case optimism.id:\n    case optimismSepolia.id:\n    case arbitrum.id:\n    case arbitrumSepolia.id:\n    case base.id:\n    default:\n      return \"0x000000000000c5A9089039570Dd36455b5C07383\";\n  }\n};\n\nexport const getDefaultSMAV2StorageAddress = (chain: Chain): Address => {\n  switch (chain.id) {\n    // TODO: case mekong.id:\n    case sepolia.id:\n    case baseSepolia.id:\n    case polygon.id:\n    case mainnet.id:\n    case polygonAmoy.id:\n    case optimism.id:\n    case optimismSepolia.id:\n    case arbitrum.id:\n    case arbitrumSepolia.id:\n    case base.id:\n    default:\n      return \"0x0000000000006E2f9d80CaEc0Da6500f005EB25A\";\n  }\n};\n\nexport const getDefaultSMAV27702Address = (chain: Chain): Address => {\n  switch (chain.id) {\n    // TODO: case mekong.id:\n    case sepolia.id:\n    case baseSepolia.id:\n    case polygon.id:\n    case mainnet.id:\n    case polygonAmoy.id:\n    case optimism.id:\n    case optimismSepolia.id:\n    case arbitrum.id:\n    case arbitrumSepolia.id:\n    case base.id:\n    default:\n      return \"0x69007702764179f14F51cdce752f4f775d74E139\";\n  }\n};\n\nexport const getDefaultMAV2Address = (chain: Chain): Address => {\n  switch (chain.id) {\n    // TODO: case mekong.id:\n    case sepolia.id:\n    case baseSepolia.id:\n    case polygon.id:\n    case mainnet.id:\n    case polygonAmoy.id:\n    case optimism.id:\n    case optimismSepolia.id:\n    case arbitrum.id:\n    case arbitrumSepolia.id:\n    case base.id:\n    default:\n      return \"0x00000000000002377B26b1EdA7b0BC371C60DD4f\";\n  }\n};\n\nexport type GetMAV2UpgradeToData<\n  TSigner extends SmartAccountSigner = SmartAccountSigner,\n  TAccount extends\n    | SmartContractAccountWithSigner<string, TSigner>\n    | undefined = SmartContractAccountWithSigner<string, TSigner> | undefined\n> = GetAccountParameter<TAccount>;\n\n/**\n * Retrieves the data necessary to upgrade to a Modular Account V2 (MA v2).\n * Note that the upgrade will be to the Semi Modular Account Storage variant\n *\n * @example\n * ```ts\n * import { createLightAccountClient, getMAV2UpgradeToData } from \"@account-kit/smart-contracts\";\n *\n * const client = createLightAccountClient({});\n * const upgradeData = await getMAV2UpgradeToData(client, {});\n * ```\n *\n * @param {SmartAccountClient<TTransport, TChain, TAccount>} client The smart account client\n * @param {GetMAV2UpgradeToData<TSigner, TAccount>} args The arguments required for the upgrade\n * @returns {Promise<UpgradeToData & { createModularAccountV2FromExisting: () => Promise<ModularAccountV2<TSigner>>}>} A promise that resolves to upgrade data augmented with a function to create a Modular Account V2\n */\nexport async function getMAV2UpgradeToData<\n  TTransport extends Transport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TSigner extends SmartAccountSigner = SmartAccountSigner,\n  TAccount extends\n    | SmartContractAccountWithSigner<string, TSigner>\n    | undefined = SmartContractAccountWithSigner<string, TSigner> | undefined\n>(\n  client: SmartAccountClient<TTransport, TChain, TAccount>,\n  args: GetMAV2UpgradeToData<TSigner, TAccount>\n): Promise<\n  UpgradeToData & {\n    createModularAccountV2FromExisting: () => Promise<\n      ModularAccountV2<TSigner>\n    >;\n  }\n> {\n  const { account: account_ = client.account } = args;\n\n  if (!account_) {\n    throw new AccountNotFoundError();\n  }\n  const account = account_ as SmartContractAccountWithSigner<string, TSigner>;\n\n  const chain = client.chain;\n  if (!chain) {\n    throw new ChainNotFoundError();\n  }\n\n  const initData = encodeFunctionData({\n    abi: semiModularAccountStorageAbi,\n    functionName: \"initialize\",\n    args: [await account.getSigner().getAddress()],\n  });\n\n  return {\n    implAddress: getDefaultSMAV2StorageAddress(chain),\n    initializationData: initData,\n    createModularAccountV2FromExisting: async () =>\n      createModularAccountV2({\n        transport: custom(client.transport),\n        chain: chain as Chain,\n        signer: account.getSigner(),\n        accountAddress: account.address,\n      }),\n  };\n}\n"]}