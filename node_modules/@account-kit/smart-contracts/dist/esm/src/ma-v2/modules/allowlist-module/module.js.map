{"version":3,"file":"module.js","sourceRoot":"","sources":["../../../../../../src/ma-v2/modules/allowlist-module/module.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAA0B,MAAM,MAAM,CAAC;AACnE,OAAO,EAAE,kBAAkB,EAAE,MAAM,8BAA8B,CAAC;AAClE,OAAO,EAAE,QAAQ,EAAmB,MAAM,+BAA+B,CAAC;AAE1E,MAAM,CAAC,MAAM,eAAe,GAAG;IAC7B,GAAG,EAAE,kBAAkB;IACvB,SAAS,EAAE,CACT,WASC,EACD,OAAgB,EAIhB,EAAE;QACF,MAAM,WAAW,GAAG,eAAe,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC;QACrE,OAAO;YACL,UAAU,EAAE;gBACV,OAAO,EAAE,OAAO;gBAChB,QAAQ,EAAE,WAAW,CAAC,QAAQ;gBAC9B,QAAQ,EAAE,QAAQ,CAAC,UAAU;gBAC7B,WAAW,EAAE,IAAI;gBACjB,YAAY,EAAE,KAAK;aACpB;YACD,QAAQ,EAAE,WAAW;SACtB,CAAC;IACJ,CAAC;IACD,mBAAmB,EAAE,CAAC,IASrB,EAAO,EAAE;QACR,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;QAClC,OAAO,mBAAmB,CACxB;YACE,EAAE,IAAI,EAAE,QAAQ,EAAE;YAClB;gBACE,IAAI,EAAE,SAAS;gBACf,UAAU,EAAE;oBACV,EAAE,IAAI,EAAE,SAAS,EAAE;oBACnB,EAAE,IAAI,EAAE,MAAM,EAAE;oBAChB,EAAE,IAAI,EAAE,MAAM,EAAE;oBAChB,EAAE,IAAI,EAAE,SAAS,EAAE;oBACnB,EAAE,IAAI,EAAE,UAAU,EAAE;iBACrB;aACF;SACF,EACD;YACE,QAAQ;YACR,MAAM,CAAC,GAAG,CACR,CAAC,KAAK,EAAE,EAAE,CACR;gBACE,KAAK,CAAC,MAAM;gBACZ,KAAK,CAAC,oBAAoB;gBAC1B,KAAK,CAAC,kBAAkB;gBACxB,KAAK,CAAC,eAAe;gBACrB,KAAK,CAAC,SAAS;aACP,CACb;SACF,CACF,CAAC;IACJ,CAAC;IAED,qBAAqB,EAAE,CAAC,IASvB,EAAO,EAAE;QACR,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;QAClC,OAAO,mBAAmB,CACxB;YACE,EAAE,IAAI,EAAE,QAAQ,EAAE;YAClB;gBACE,IAAI,EAAE,SAAS;gBACf,UAAU,EAAE;oBACV,EAAE,IAAI,EAAE,SAAS,EAAE;oBACnB,EAAE,IAAI,EAAE,MAAM,EAAE;oBAChB,EAAE,IAAI,EAAE,MAAM,EAAE;oBAChB,EAAE,IAAI,EAAE,SAAS,EAAE;oBACnB,EAAE,IAAI,EAAE,UAAU,EAAE;iBACrB;aACF;SACF,EACD;YACE,QAAQ;YACR,MAAM,CAAC,GAAG,CACR,CAAC,KAAK,EAAE,EAAE,CACR;gBACE,KAAK,CAAC,MAAM;gBACZ,KAAK,CAAC,oBAAoB;gBAC1B,KAAK,CAAC,kBAAkB;gBACxB,KAAK,CAAC,eAAe;gBACrB,KAAK,CAAC,SAAS;aACP,CACb;SACF,CACF,CAAC;IACJ,CAAC;CACF,CAAC","sourcesContent":["import { encodeAbiParameters, type Address, type Hex } from \"viem\";\nimport { allowlistModuleAbi } from \"./abis/allowlistModuleAbi.js\";\nimport { HookType, type HookConfig } from \"../../actions/common/types.js\";\n\nexport const AllowlistModule = {\n  abi: allowlistModuleAbi,\n  buildHook: (\n    installArgs: {\n      entityId: number;\n      inputs: Array<{\n        target: Address;\n        hasSelectorAllowlist: boolean;\n        hasERC20SpendLimit: boolean;\n        erc20SpendLimit: bigint;\n        selectors: Array<Hex>;\n      }>;\n    },\n    address: Address\n  ): {\n    hookConfig: HookConfig;\n    initData: Hex;\n  } => {\n    const installData = AllowlistModule.encodeOnInstallData(installArgs);\n    return {\n      hookConfig: {\n        address: address,\n        entityId: installArgs.entityId,\n        hookType: HookType.VALIDATION,\n        hasPreHooks: true,\n        hasPostHooks: false,\n      },\n      initData: installData,\n    };\n  },\n  encodeOnInstallData: (args: {\n    entityId: number;\n    inputs: Array<{\n      target: Address;\n      hasSelectorAllowlist: boolean;\n      hasERC20SpendLimit: boolean;\n      erc20SpendLimit: bigint;\n      selectors: Array<Hex>;\n    }>;\n  }): Hex => {\n    const { entityId, inputs } = args;\n    return encodeAbiParameters(\n      [\n        { type: \"uint32\" },\n        {\n          type: \"tuple[]\",\n          components: [\n            { type: \"address\" },\n            { type: \"bool\" },\n            { type: \"bool\" },\n            { type: \"uint256\" },\n            { type: \"bytes4[]\" },\n          ],\n        },\n      ],\n      [\n        entityId,\n        inputs.map(\n          (input) =>\n            [\n              input.target,\n              input.hasSelectorAllowlist,\n              input.hasERC20SpendLimit,\n              input.erc20SpendLimit,\n              input.selectors,\n            ] as const\n        ),\n      ]\n    );\n  },\n\n  encodeOnUninstallData: (args: {\n    entityId: number;\n    inputs: Array<{\n      target: Address;\n      hasSelectorAllowlist: boolean;\n      hasERC20SpendLimit: boolean;\n      erc20SpendLimit: bigint;\n      selectors: Array<Hex>;\n    }>;\n  }): Hex => {\n    const { entityId, inputs } = args;\n    return encodeAbiParameters(\n      [\n        { type: \"uint32\" },\n        {\n          type: \"tuple[]\",\n          components: [\n            { type: \"address\" },\n            { type: \"bool\" },\n            { type: \"bool\" },\n            { type: \"uint256\" },\n            { type: \"bytes4[]\" },\n          ],\n        },\n      ],\n      [\n        entityId,\n        inputs.map(\n          (input) =>\n            [\n              input.target,\n              input.hasSelectorAllowlist,\n              input.hasERC20SpendLimit,\n              input.erc20SpendLimit,\n              input.selectors,\n            ] as const\n        ),\n      ]\n    );\n  },\n};\n"]}