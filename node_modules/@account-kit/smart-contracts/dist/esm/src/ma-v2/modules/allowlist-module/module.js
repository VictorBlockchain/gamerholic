import { encodeAbiParameters } from "viem";
import { allowlistModuleAbi } from "./abis/allowlistModuleAbi.js";
import { HookType } from "../../actions/common/types.js";
export const AllowlistModule = {
    abi: allowlistModuleAbi,
    buildHook: (installArgs, address) => {
        const installData = AllowlistModule.encodeOnInstallData(installArgs);
        return {
            hookConfig: {
                address: address,
                entityId: installArgs.entityId,
                hookType: HookType.VALIDATION,
                hasPreHooks: true,
                hasPostHooks: false,
            },
            initData: installData,
        };
    },
    encodeOnInstallData: (args) => {
        const { entityId, inputs } = args;
        return encodeAbiParameters([
            { type: "uint32" },
            {
                type: "tuple[]",
                components: [
                    { type: "address" },
                    { type: "bool" },
                    { type: "bool" },
                    { type: "uint256" },
                    { type: "bytes4[]" },
                ],
            },
        ], [
            entityId,
            inputs.map((input) => [
                input.target,
                input.hasSelectorAllowlist,
                input.hasERC20SpendLimit,
                input.erc20SpendLimit,
                input.selectors,
            ]),
        ]);
    },
    encodeOnUninstallData: (args) => {
        const { entityId, inputs } = args;
        return encodeAbiParameters([
            { type: "uint32" },
            {
                type: "tuple[]",
                components: [
                    { type: "address" },
                    { type: "bool" },
                    { type: "bool" },
                    { type: "uint256" },
                    { type: "bytes4[]" },
                ],
            },
        ], [
            entityId,
            inputs.map((input) => [
                input.target,
                input.hasSelectorAllowlist,
                input.hasERC20SpendLimit,
                input.erc20SpendLimit,
                input.selectors,
            ]),
        ]);
    },
};
//# sourceMappingURL=module.js.map