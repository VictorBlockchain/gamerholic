export declare const allowlistModuleAbi: readonly [{
    readonly type: "function";
    readonly name: "addressAllowlist";
    readonly inputs: readonly [{
        readonly name: "entityId";
        readonly type: "uint32";
        readonly internalType: "uint32";
    }, {
        readonly name: "target";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "account";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [{
        readonly name: "allowed";
        readonly type: "bool";
        readonly internalType: "bool";
    }, {
        readonly name: "hasSelectorAllowlist";
        readonly type: "bool";
        readonly internalType: "bool";
    }, {
        readonly name: "hasERC20SpendLimit";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "checkAllowlistCalldata";
    readonly inputs: readonly [{
        readonly name: "entityId";
        readonly type: "uint32";
        readonly internalType: "uint32";
    }, {
        readonly name: "callData";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "deleteAllowlist";
    readonly inputs: readonly [{
        readonly name: "entityId";
        readonly type: "uint32";
        readonly internalType: "uint32";
    }, {
        readonly name: "inputs";
        readonly type: "tuple[]";
        readonly internalType: "struct AllowlistModule.AllowlistInput[]";
        readonly components: readonly [{
            readonly name: "target";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "hasSelectorAllowlist";
            readonly type: "bool";
            readonly internalType: "bool";
        }, {
            readonly name: "hasERC20SpendLimit";
            readonly type: "bool";
            readonly internalType: "bool";
        }, {
            readonly name: "erc20SpendLimit";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "selectors";
            readonly type: "bytes4[]";
            readonly internalType: "bytes4[]";
        }];
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "erc20SpendLimits";
    readonly inputs: readonly [{
        readonly name: "entityId";
        readonly type: "uint32";
        readonly internalType: "uint32";
    }, {
        readonly name: "target";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "account";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "moduleId";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "string";
        readonly internalType: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "onInstall";
    readonly inputs: readonly [{
        readonly name: "data";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "onUninstall";
    readonly inputs: readonly [{
        readonly name: "data";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "postExecutionHook";
    readonly inputs: readonly [{
        readonly name: "";
        readonly type: "uint32";
        readonly internalType: "uint32";
    }, {
        readonly name: "";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "preExecutionHook";
    readonly inputs: readonly [{
        readonly name: "entityId";
        readonly type: "uint32";
        readonly internalType: "uint32";
    }, {
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "data";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "preRuntimeValidationHook";
    readonly inputs: readonly [{
        readonly name: "entityId";
        readonly type: "uint32";
        readonly internalType: "uint32";
    }, {
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "data";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }, {
        readonly name: "";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "preSignatureValidationHook";
    readonly inputs: readonly [{
        readonly name: "";
        readonly type: "uint32";
        readonly internalType: "uint32";
    }, {
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "preUserOpValidationHook";
    readonly inputs: readonly [{
        readonly name: "entityId";
        readonly type: "uint32";
        readonly internalType: "uint32";
    }, {
        readonly name: "userOp";
        readonly type: "tuple";
        readonly internalType: "struct PackedUserOperation";
        readonly components: readonly [{
            readonly name: "sender";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "nonce";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "initCode";
            readonly type: "bytes";
            readonly internalType: "bytes";
        }, {
            readonly name: "callData";
            readonly type: "bytes";
            readonly internalType: "bytes";
        }, {
            readonly name: "accountGasLimits";
            readonly type: "bytes32";
            readonly internalType: "bytes32";
        }, {
            readonly name: "preVerificationGas";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "gasFees";
            readonly type: "bytes32";
            readonly internalType: "bytes32";
        }, {
            readonly name: "paymasterAndData";
            readonly type: "bytes";
            readonly internalType: "bytes";
        }, {
            readonly name: "signature";
            readonly type: "bytes";
            readonly internalType: "bytes";
        }];
    }, {
        readonly name: "";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "selectorAllowlist";
    readonly inputs: readonly [{
        readonly name: "entityId";
        readonly type: "uint32";
        readonly internalType: "uint32";
    }, {
        readonly name: "selector";
        readonly type: "bytes4";
        readonly internalType: "bytes4";
    }, {
        readonly name: "target";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "account";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "setAddressAllowlist";
    readonly inputs: readonly [{
        readonly name: "entityId";
        readonly type: "uint32";
        readonly internalType: "uint32";
    }, {
        readonly name: "target";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "allowed";
        readonly type: "bool";
        readonly internalType: "bool";
    }, {
        readonly name: "hasSelectorAllowlist";
        readonly type: "bool";
        readonly internalType: "bool";
    }, {
        readonly name: "hasERC20SpendLimit";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "setSelectorAllowlist";
    readonly inputs: readonly [{
        readonly name: "entityId";
        readonly type: "uint32";
        readonly internalType: "uint32";
    }, {
        readonly name: "target";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "selector";
        readonly type: "bytes4";
        readonly internalType: "bytes4";
    }, {
        readonly name: "allowed";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "supportsInterface";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly type: "bytes4";
        readonly internalType: "bytes4";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "updateAllowlist";
    readonly inputs: readonly [{
        readonly name: "entityId";
        readonly type: "uint32";
        readonly internalType: "uint32";
    }, {
        readonly name: "inputs";
        readonly type: "tuple[]";
        readonly internalType: "struct AllowlistModule.AllowlistInput[]";
        readonly components: readonly [{
            readonly name: "target";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "hasSelectorAllowlist";
            readonly type: "bool";
            readonly internalType: "bool";
        }, {
            readonly name: "hasERC20SpendLimit";
            readonly type: "bool";
            readonly internalType: "bool";
        }, {
            readonly name: "erc20SpendLimit";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "selectors";
            readonly type: "bytes4[]";
            readonly internalType: "bytes4[]";
        }];
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "updateLimits";
    readonly inputs: readonly [{
        readonly name: "entityId";
        readonly type: "uint32";
        readonly internalType: "uint32";
    }, {
        readonly name: "token";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "hasERC20SpendLimit";
        readonly type: "bool";
        readonly internalType: "bool";
    }, {
        readonly name: "newLimit";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "event";
    readonly name: "AddressAllowlistUpdated";
    readonly inputs: readonly [{
        readonly name: "entityId";
        readonly type: "uint32";
        readonly indexed: true;
        readonly internalType: "uint32";
    }, {
        readonly name: "account";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "target";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "entry";
        readonly type: "tuple";
        readonly indexed: false;
        readonly internalType: "struct AllowlistModule.AddressAllowlistEntry";
        readonly components: readonly [{
            readonly name: "allowed";
            readonly type: "bool";
            readonly internalType: "bool";
        }, {
            readonly name: "hasSelectorAllowlist";
            readonly type: "bool";
            readonly internalType: "bool";
        }, {
            readonly name: "hasERC20SpendLimit";
            readonly type: "bool";
            readonly internalType: "bool";
        }];
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "ERC20SpendLimitUpdated";
    readonly inputs: readonly [{
        readonly name: "entityId";
        readonly type: "uint32";
        readonly indexed: true;
        readonly internalType: "uint32";
    }, {
        readonly name: "account";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "token";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "newLimit";
        readonly type: "uint256";
        readonly indexed: false;
        readonly internalType: "uint256";
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "SelectorAllowlistUpdated";
    readonly inputs: readonly [{
        readonly name: "entityId";
        readonly type: "uint32";
        readonly indexed: true;
        readonly internalType: "uint32";
    }, {
        readonly name: "account";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "targetAndSelector";
        readonly type: "bytes24";
        readonly indexed: true;
        readonly internalType: "bytes24";
    }, {
        readonly name: "allowed";
        readonly type: "bool";
        readonly indexed: false;
        readonly internalType: "bool";
    }];
    readonly anonymous: false;
}, {
    readonly type: "error";
    readonly name: "AddressNotAllowed";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "ERC20NotAllowed";
    readonly inputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "ExceededTokenLimit";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "InvalidCalldataLength";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "NoSelectorSpecified";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "NotImplemented";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "SelectorNotAllowed";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "SpendingRequestNotAllowed";
    readonly inputs: readonly [{
        readonly name: "";
        readonly type: "bytes4";
        readonly internalType: "bytes4";
    }];
}, {
    readonly type: "error";
    readonly name: "UnexpectedDataPassed";
    readonly inputs: readonly [];
}];
