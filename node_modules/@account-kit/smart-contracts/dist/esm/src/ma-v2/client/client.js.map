{"version":3,"file":"client.js","sourceRoot":"","sources":["../../../../../src/ma-v2/client/client.ts"],"names":[],"mappings":"AAAA,OAAO,EAKL,wBAAwB,EACxB,uBAAuB,EACvB,uBAAuB,GACxB,MAAM,cAAc,CAAC;AACtB,OAAO,EAA8B,MAAM,MAAM,CAAC;AAElD,OAAO,EACL,sBAAsB,GAEvB,MAAM,gCAAgC,CAAC;AAExC,OAAO,EACL,+BAA+B,EAC/B,kBAAkB,GAInB,MAAM,oBAAoB,CAAC;AAsD5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BG;AACH,MAAM,CAAC,KAAK,UAAU,4BAA4B,CAChD,MAE6C;IAE7C,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,GAAG,MAAM,CAAC;IAEpC,MAAM,OAAO,GAAG,MAAM,sBAAsB,CAAC,MAAM,CAAC,CAAC;IAErD,MAAM,kBAAkB,GACtB,MAAM,CAAC,IAAI,KAAK,MAAM;QACpB,CAAC,CAAC;YACE,YAAY,EAAE,uBAAuB,CAAC,MAAM,CAAC,YAAY,CAAC;YAC1D,iBAAiB,EAAE,uBAAuB,CAAC,MAAM,CAAC,iBAAiB,CAAC;SACrE;QACH,CAAC,CAAC,EAAE,CAAC;IAET,IAAI,kBAAkB,CAAC,SAAS,EAAE,KAAK,CAAC,EAAE,CAAC;QACzC,OAAO,+BAA+B,CAAC;YACrC,GAAG,MAAM;YACT,SAAS;YACT,KAAK;YACL,OAAO;YACP,GAAG,kBAAkB;SACtB,CAAC,CAAC;IACL,CAAC;IAED,OAAO,wBAAwB,CAAC;QAC9B,GAAG,MAAM;QACT,OAAO;QACP,GAAG,kBAAkB;KACtB,CAAC,CAAC;AACL,CAAC","sourcesContent":["import {\n  type SmartAccountClient,\n  type SmartAccountSigner,\n  type SmartAccountClientConfig,\n  type NotType,\n  createSmartAccountClient,\n  default7702GasEstimator,\n  default7702UserOpSigner,\n} from \"@aa-sdk/core\";\nimport { type Chain, type Transport } from \"viem\";\n\nimport {\n  createModularAccountV2,\n  type CreateModularAccountV2Params,\n} from \"../account/modularAccountV2.js\";\n\nimport {\n  createAlchemySmartAccountClient,\n  isAlchemyTransport,\n  type AlchemySmartAccountClient,\n  type AlchemySmartAccountClientConfig,\n  type AlchemyTransport,\n} from \"@account-kit/infra\";\nimport type { LightAccount } from \"../../light-account/accounts/account.js\";\n\nimport type { ModularAccountV2 } from \"../account/common/modularAccountV2Base.js\";\n\nexport type ModularAccountV2Client<\n  TSigner extends SmartAccountSigner = SmartAccountSigner,\n  TChain extends Chain = Chain,\n  TTransport extends Transport | AlchemyTransport = Transport\n> = SmartAccountClient<TTransport, TChain, ModularAccountV2<TSigner>>;\n\nexport type CreateModularAccountV2ClientParams<\n  TTransport extends Transport = Transport,\n  TChain extends Chain = Chain,\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n> = CreateModularAccountV2Params<TTransport, TSigner> &\n  Omit<\n    SmartAccountClientConfig<TTransport, TChain>,\n    \"transport\" | \"account\" | \"chain\"\n  >;\n\nexport type CreateModularAccountV2AlchemyClientParams<\n  TTransport extends Transport = Transport,\n  TChain extends Chain = Chain,\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n> = Omit<\n  CreateModularAccountV2ClientParams<TTransport, TChain, TSigner>,\n  \"transport\"\n> &\n  Omit<\n    AlchemySmartAccountClientConfig<TChain, LightAccount<TSigner>>,\n    \"account\"\n  > & { paymasterAndData?: never; dummyPaymasterAndData?: never };\n\nexport function createModularAccountV2Client<\n  TChain extends Chain = Chain,\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n>(\n  args: CreateModularAccountV2AlchemyClientParams<\n    AlchemyTransport,\n    TChain,\n    TSigner\n  >\n): Promise<ModularAccountV2Client<TSigner, TChain, AlchemyTransport>>;\n\nexport function createModularAccountV2Client<\n  TTransport extends Transport = Transport,\n  TChain extends Chain = Chain,\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n>(\n  args: CreateModularAccountV2ClientParams<TTransport, TChain, TSigner> &\n    NotType<TTransport, AlchemyTransport>\n): Promise<ModularAccountV2Client<TSigner, TChain>>;\n\n/**\n * Creates a Modular Account V2 client using the provided configuration parameters.\n *\n * @example\n * ```ts twoslash\n * import { createModularAccountV2Client } from \"@account-kit/smart-contracts\";\n * import { LocalAccountSigner } from \"@aa-sdk/core\";\n * import { alchemy, sepolia } from \"@account-kit/infra\";\n *\n * const MNEMONIC = \"...\";\n * const RPC_URL = \"...\";\n *\n * const signer = LocalAccountSigner.mnemonicToAccountSigner(MNEMONIC);\n *\n * const chain = sepolia;\n *\n * const transport = alchemy({ rpcUrl: RPC_URL });\n *\n * const policyId = \"...\";\n *\n * const modularAccountV2Client = await createModularAccountV2Client({\n *  chain,\n *  signer,\n *  transport,\n *  policyId, // NOTE: you may only pass in a gas policy ID if you provide an Alchemy transport!\n * });\n * ```\n *\n * @param {CreateModularAccountV2ClientParams} config The configuration parameters required to create the Modular Account v2 account client\n * @returns {Promise<SmartAccountClient>} A promise that resolves to a `SmartAccountClient` instance\n */\nexport async function createModularAccountV2Client(\n  config:\n    | CreateModularAccountV2ClientParams\n    | CreateModularAccountV2AlchemyClientParams\n): Promise<SmartAccountClient | AlchemySmartAccountClient> {\n  const { transport, chain } = config;\n\n  const account = await createModularAccountV2(config);\n\n  const middlewareToAppend =\n    config.mode === \"7702\"\n      ? {\n          gasEstimator: default7702GasEstimator(config.gasEstimator),\n          signUserOperation: default7702UserOpSigner(config.signUserOperation),\n        }\n      : {};\n\n  if (isAlchemyTransport(transport, chain)) {\n    return createAlchemySmartAccountClient({\n      ...config,\n      transport,\n      chain,\n      account,\n      ...middlewareToAppend,\n    });\n  }\n\n  return createSmartAccountClient({\n    ...config,\n    account,\n    ...middlewareToAppend,\n  });\n}\n"]}