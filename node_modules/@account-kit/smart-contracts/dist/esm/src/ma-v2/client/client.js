import { createSmartAccountClient, default7702GasEstimator, default7702UserOpSigner, } from "@aa-sdk/core";
import {} from "viem";
import { createModularAccountV2, } from "../account/modularAccountV2.js";
import { createAlchemySmartAccountClient, isAlchemyTransport, } from "@account-kit/infra";
/**
 * Creates a Modular Account V2 client using the provided configuration parameters.
 *
 * @example
 * ```ts twoslash
 * import { createModularAccountV2Client } from "@account-kit/smart-contracts";
 * import { LocalAccountSigner } from "@aa-sdk/core";
 * import { alchemy, sepolia } from "@account-kit/infra";
 *
 * const MNEMONIC = "...";
 * const RPC_URL = "...";
 *
 * const signer = LocalAccountSigner.mnemonicToAccountSigner(MNEMONIC);
 *
 * const chain = sepolia;
 *
 * const transport = alchemy({ rpcUrl: RPC_URL });
 *
 * const policyId = "...";
 *
 * const modularAccountV2Client = await createModularAccountV2Client({
 *  chain,
 *  signer,
 *  transport,
 *  policyId, // NOTE: you may only pass in a gas policy ID if you provide an Alchemy transport!
 * });
 * ```
 *
 * @param {CreateModularAccountV2ClientParams} config The configuration parameters required to create the Modular Account v2 account client
 * @returns {Promise<SmartAccountClient>} A promise that resolves to a `SmartAccountClient` instance
 */
export async function createModularAccountV2Client(config) {
    const { transport, chain } = config;
    const account = await createModularAccountV2(config);
    const middlewareToAppend = config.mode === "7702"
        ? {
            gasEstimator: default7702GasEstimator(config.gasEstimator),
            signUserOperation: default7702UserOpSigner(config.signUserOperation),
        }
        : {};
    if (isAlchemyTransport(transport, chain)) {
        return createAlchemySmartAccountClient({
            ...config,
            transport,
            chain,
            account,
            ...middlewareToAppend,
        });
    }
    return createSmartAccountClient({
        ...config,
        account,
        ...middlewareToAppend,
    });
}
//# sourceMappingURL=client.js.map