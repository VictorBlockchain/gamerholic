import { type SmartAccountSigner, type SmartContractAccountWithSigner, type ToSmartContractAccountParams } from "@aa-sdk/core";
import { type Hex, type Address, type Chain, type Transport } from "viem";
export declare const executeUserOpSelector: Hex;
export type SignerEntity = {
    isGlobalValidation: boolean;
    entityId: number;
};
export type ExecutionDataView = {
    module: Address;
    skipRuntimeValidation: boolean;
    allowGlobalValidation: boolean;
    executionHooks: readonly Hex[];
};
export type ValidationDataView = {
    validationHooks: readonly Hex[];
    executionHooks: readonly Hex[];
    selectors: readonly Hex[];
    validationFlags: number;
};
export type ValidationDataParams = {
    validationModuleAddress: Address;
    entityId?: never;
} | {
    validationModuleAddress?: never;
    entityId: number;
};
export type ModularAccountV2<TSigner extends SmartAccountSigner = SmartAccountSigner> = SmartContractAccountWithSigner<"ModularAccountV2", TSigner, "0.7.0"> & {
    signerEntity: SignerEntity;
    getExecutionData: (selector: Hex) => Promise<ExecutionDataView>;
    getValidationData: (args: ValidationDataParams) => Promise<ValidationDataView>;
    encodeCallData: (callData: Hex) => Promise<Hex>;
};
export type CreateMAV2BaseParams<TSigner extends SmartAccountSigner = SmartAccountSigner, TTransport extends Transport = Transport> = Omit<ToSmartContractAccountParams<"ModularAccountV2", TTransport, Chain, "0.7.0">, "encodeExecute" | "encodeBatchExecute" | "getNonce" | "signMessage" | "signTypedData" | "getDummySignature"> & {
    signer: TSigner;
    signerEntity?: SignerEntity;
    accountAddress: Address;
};
export type CreateMAV2BaseReturnType<TSigner extends SmartAccountSigner = SmartAccountSigner> = Promise<ModularAccountV2<TSigner>>;
export declare function createMAv2Base<TSigner extends SmartAccountSigner = SmartAccountSigner>(config: CreateMAV2BaseParams<TSigner>): CreateMAV2BaseReturnType<TSigner>;
