{"version":3,"file":"modularAccountV2.js","sourceRoot":"","sources":["../../../../../src/ma-v2/account/modularAccountV2.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  EntryPointDef,\n  SmartAccountSigner,\n  ToSmartContractAccountParams,\n} from \"@aa-sdk/core\";\nimport {\n  createBundlerClient,\n  getEntryPoint,\n  getAccountAddress,\n  EntityIdOverrideError,\n  InvalidModularAccountV2Mode,\n} from \"@aa-sdk/core\";\nimport {\n  concatHex,\n  encodeFunctionData,\n  type Address,\n  type Chain,\n  type Hex,\n  type Transport,\n} from \"viem\";\nimport { accountFactoryAbi } from \"../abis/accountFactoryAbi.js\";\nimport { getDefaultMAV2FactoryAddress } from \"../utils.js\";\nimport {\n  type SignerEntity,\n  type ModularAccountV2,\n  createMAv2Base,\n} from \"./common/modularAccountV2Base.js\";\nimport { DEFAULT_OWNER_ENTITY_ID } from \"../utils.js\";\n\nexport type CreateModularAccountV2Params<\n  TTransport extends Transport = Transport,\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n> = (Pick<\n  ToSmartContractAccountParams<\"ModularAccountV2\", TTransport, Chain, \"0.7.0\">,\n  \"transport\" | \"chain\" | \"accountAddress\"\n> & {\n  signer: TSigner;\n  entryPoint?: EntryPointDef<\"0.7.0\", Chain>;\n  signerEntity?: SignerEntity;\n}) &\n  (\n    | {\n        mode?: \"default\";\n        salt?: bigint;\n        factoryAddress?: Address;\n        initCode?: Hex;\n      }\n    | {\n        mode: \"7702\";\n      }\n  );\n\nexport async function createModularAccountV2<\n  TTransport extends Transport = Transport,\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n>(\n  config: CreateModularAccountV2Params<TTransport, TSigner>\n): Promise<ModularAccountV2<TSigner>>;\n\n/**\n * Creates a ModularAccount V2 account, with the mode depending on the provided \"mode\" field.\n * Possible modes include: \"default\", which is SMA Bytecode, and \"7702\", which is SMA 7702.\n * Handles nonce generation, transaction encoding, and mode variant-specific behavior like initcode construction.\n *\n * @example\n * ```ts twoslash\n * import { createModularAccountV2 } from \"@account-kit/smart-contracts\";\n * import { LocalAccountSigner } from \"@aa-sdk/core\";\n * import { alchemy, sepolia } from \"@account-kit/infra\";\n *\n * const MNEMONIC = \"...\";\n * const RPC_URL = \"...\";\n *\n * const signer = LocalAccountSigner.mnemonicToAccountSigner(MNEMONIC);\n *\n * const chain = sepolia;\n *\n * const transport = alchemy({ rpcUrl: RPC_URL });\n *\n *\n * const modularAccountV2 = await createModularAccountV2({\n *  mode: \"default\", // or \"7702\"\n *  chain,\n *  signer,\n *  transport,\n * });\n * ```\n *\n * @param {CreateModularAccountV2Params} config Configuration parameters for creating a Modular Account V2.\n * @returns {Promise<ModularAccountV2>} A promise that resolves to an `ModularAccountV2` providing methods for nonce retrieval, transaction execution, and more.\n */\nexport async function createModularAccountV2(\n  config: CreateModularAccountV2Params\n): Promise<ModularAccountV2> {\n  const {\n    transport,\n    chain,\n    signer,\n    accountAddress: _accountAddress,\n    entryPoint = getEntryPoint(chain, { version: \"0.7.0\" }),\n    signerEntity = {\n      isGlobalValidation: true,\n      entityId: DEFAULT_OWNER_ENTITY_ID,\n    },\n    signerEntity: { entityId = DEFAULT_OWNER_ENTITY_ID } = {},\n  } = config;\n\n  const client = createBundlerClient({\n    transport,\n    chain,\n  });\n\n  const accountFunctions = await (async () => {\n    switch (config.mode) {\n      case \"7702\": {\n        const getAccountInitCode = async (): Promise<Hex> => {\n          return \"0x\";\n        };\n        const signerAddress = await signer.getAddress();\n        const accountAddress = _accountAddress ?? signerAddress;\n        if (\n          entityId === DEFAULT_OWNER_ENTITY_ID &&\n          signerAddress !== accountAddress\n        ) {\n          throw new EntityIdOverrideError();\n        }\n\n        const implementation: Address =\n          \"0x69007702764179f14F51cdce752f4f775d74E139\";\n\n        const getImplementationAddress = async () => implementation;\n\n        return {\n          getAccountInitCode,\n          accountAddress,\n          getImplementationAddress,\n        };\n      }\n      case \"default\":\n      case undefined: {\n        const {\n          salt = 0n,\n          factoryAddress = getDefaultMAV2FactoryAddress(chain),\n          initCode,\n        } = config;\n\n        const getAccountInitCode = async () => {\n          if (initCode) {\n            return initCode;\n          }\n\n          return concatHex([\n            factoryAddress,\n            encodeFunctionData({\n              abi: accountFactoryAbi,\n              functionName: \"createSemiModularAccount\",\n              args: [await signer.getAddress(), salt],\n            }),\n          ]);\n        };\n\n        const accountAddress = await getAccountAddress({\n          client,\n          entryPoint,\n          accountAddress: _accountAddress,\n          getAccountInitCode,\n        });\n\n        return {\n          getAccountInitCode,\n          accountAddress,\n        };\n      }\n      default:\n        assertNever(config);\n    }\n  })();\n\n  return createMAv2Base({\n    source: \"ModularAccountV2\",\n    transport,\n    chain,\n    signer,\n    entryPoint,\n    signerEntity,\n    ...accountFunctions,\n  });\n}\n\n// If we add more valid modes, the switch case branch's mode will no longer be `never`, which will cause a compile time error here and ensure we handle the new type.\nfunction assertNever(_valid: never): never {\n  throw new InvalidModularAccountV2Mode();\n}\n"]}