{"version":3,"file":"alchemyClient.js","sourceRoot":"","sources":["../../../../../src/msca/client/alchemyClient.ts"],"names":[],"mappings":"AACA,OAAO,EAGN,MAAM,oBAAoB,CAAC;AAC5B,OAAO,EACL,oCAAoC,GAOrC,MAAM,8BAA8B,CAAC;AACtC,OAAO,EAAkC,MAAM,MAAM,CAAC;AA2BtD;;;;;;;;;;;;;;;;;;;GAmBG;AACH,MAAM,CAAC,KAAK,UAAU,iCAAiC,CACrD,MAAyC;IAEzC,OAAO,oCAAoC,CAAC,MAAM,CAAC,CAAC;AACtD,CAAC","sourcesContent":["import type { SmartAccountSigner } from \"@aa-sdk/core\";\nimport {\n  type AlchemySmartAccountClient,\n  type AlchemySmartAccountClientConfig,\n} from \"@account-kit/infra\";\nimport {\n  createMultiOwnerModularAccountClient,\n  type AccountLoupeActions,\n  type CreateMultiOwnerModularAccountParams,\n  type LightAccount,\n  type MultiOwnerModularAccount,\n  type MultiOwnerPluginActions,\n  type PluginManagerActions,\n} from \"@account-kit/smart-contracts\";\nimport { type Chain, type HttpTransport } from \"viem\";\n\nexport type AlchemyModularAccountClientConfig<\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n> = Omit<\n  CreateMultiOwnerModularAccountParams<HttpTransport, TSigner>,\n  \"transport\"\n> &\n  Omit<\n    AlchemySmartAccountClientConfig<Chain, LightAccount<TSigner>>,\n    \"account\"\n  >;\n\nexport function createModularAccountAlchemyClient<\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n>(\n  params: AlchemyModularAccountClientConfig<TSigner>\n): Promise<\n  AlchemySmartAccountClient<\n    Chain | undefined,\n    MultiOwnerModularAccount<TSigner>,\n    MultiOwnerPluginActions<MultiOwnerModularAccount<TSigner>> &\n      PluginManagerActions<MultiOwnerModularAccount<TSigner>> &\n      AccountLoupeActions<MultiOwnerModularAccount<TSigner>>\n  >\n>;\n\n/**\n * Creates a modular account Alchemy client with the provided configuration.\n *\n * @example\n * ```ts\n * import { createModularAccountAlchemyClient } from \"@account-kit/smart-contracts\";\n * import { sepolia, alchemy } from \"@account-kit/infra\";\n * import { LocalAccountSigner } from \"@aa-sdk/core\";\n * import { generatePrivateKey } from \"viem\"\n *\n * const alchemyAccountClient = await createModularAccountAlchemyClient({\n *  transport: alchemy({ apiKey: \"your-api-key\" }),\n *  chain: sepolia,\n *  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey())\n * });\n * ```\n * @deprecated Use createModularAccountClient instead of this function, we are switching based on the transport\n * @param {AlchemyModularAccountClientConfig} config The configuration for creating the Alchemy client\n * @returns {Promise<AlchemySmartAccountClient>} A promise that resolves to an `AlchemySmartAccountClient` configured with the desired plugins and actions\n */\nexport async function createModularAccountAlchemyClient(\n  config: AlchemyModularAccountClientConfig\n): Promise<AlchemySmartAccountClient> {\n  return createMultiOwnerModularAccountClient(config);\n}\n"]}