{"version":3,"file":"multiSigAlchemyClient.js","sourceRoot":"","sources":["../../../../../src/msca/client/multiSigAlchemyClient.ts"],"names":[],"mappings":"AAAA,OAAO,EAA2B,MAAM,cAAc,CAAC;AACvD,OAAO,EAIN,MAAM,oBAAoB,CAAC;AAC5B,OAAO,EACL,kCAAkC,GAQnC,MAAM,8BAA8B,CAAC;AACtC,OAAO,EAAkC,MAAM,MAAM,CAAC;AAkCtD;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH,MAAM,CAAC,KAAK,UAAU,kCAAkC,CACtD,MAA0C;IAW1C,OAAO,kCAAkC,CAAC,MAAM,CAAC,CAAC;AACpD,CAAC","sourcesContent":["import { type SmartAccountSigner } from \"@aa-sdk/core\";\nimport {\n  type AlchemySmartAccountClient,\n  type AlchemySmartAccountClientConfig,\n  type AlchemyTransport,\n} from \"@account-kit/infra\";\nimport {\n  createMultisigModularAccountClient,\n  type AccountLoupeActions,\n  type CreateMultisigModularAccountParams,\n  type LightAccount,\n  type MultisigModularAccount,\n  type MultisigPluginActions,\n  type MultisigUserOperationContext,\n  type PluginManagerActions,\n} from \"@account-kit/smart-contracts\";\nimport { type Chain, type HttpTransport } from \"viem\";\n\n// todo: this file seems somewhat duplicated with ./modularAccountClient.ts, but that file has some multi-owner specific fields. Is there a way to refactor these two to de-dupe?\n\nexport type AlchemyMultisigAccountClientConfig<\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n> = Omit<\n  CreateMultisigModularAccountParams<HttpTransport, TSigner>,\n  \"transport\"\n> &\n  Omit<\n    AlchemySmartAccountClientConfig<\n      Chain,\n      LightAccount<TSigner>,\n      MultisigUserOperationContext\n    >,\n    \"account\"\n  > & { transport: AlchemyTransport };\n\nexport function createMultisigAccountAlchemyClient<\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n>(\n  params: AlchemyMultisigAccountClientConfig<TSigner>\n): Promise<\n  AlchemySmartAccountClient<\n    Chain | undefined,\n    MultisigModularAccount<TSigner>,\n    MultisigPluginActions<MultisigModularAccount<TSigner>> &\n      PluginManagerActions<MultisigModularAccount<TSigner>> &\n      AccountLoupeActions<MultisigModularAccount<TSigner>>,\n    MultisigUserOperationContext\n  >\n>;\n\n/**\n * Creates an Alchemy client for a multisig account using the provided configuration.\n *\n * @example\n * ```ts\n * import { createMultisigAccountAlchemyClient } from \"@account-kit/smart-contracts\";\n * import { sepolia } from \"@account-kit/infra\";\n * import { LocalAccountSigner } from \"@aa-sdk/core\";\n * import { generatePrivateKey } from \"viem\"\n *\n * const alchemyAccountClient = await createMultisigAccountAlchemyClient({\n *  transport: alchemy({ apiKey: \"your-api-key\" }),\n *  chain: sepolia,\n *  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),\n *  owners: [...], // other owners on the account\n *  threshold: 2, // 2 of N signatures\n * });\n * ```\n *\n * @deprecated Use createModularAccountClient instead of this function, we are switching based on the transport\n * @param {AlchemyMultisigAccountClientConfig} config The configuration for the Alchemy multisig account client\n * @returns {Promise<AlchemySmartAccountClient<Transport, Chain | undefined, MultisigModularAccount<SmartAccountSigner>, MultisigPluginActions<MultisigModularAccount<SmartAccountSigner>> & PluginManagerActions<MultisigModularAccount<SmartAccountSigner>> & AccountLoupeActions<MultisigModularAccount<SmartAccountSigner>>, MultisigUserOperationContext>>} A promise that resolves to an Alchemy Smart Account Client for multisig accounts with extended functionalities.\n */\nexport async function createMultisigAccountAlchemyClient(\n  config: AlchemyMultisigAccountClientConfig\n): Promise<\n  AlchemySmartAccountClient<\n    Chain | undefined,\n    MultisigModularAccount<SmartAccountSigner>,\n    MultisigPluginActions<MultisigModularAccount<SmartAccountSigner>> &\n      PluginManagerActions<MultisigModularAccount<SmartAccountSigner>> &\n      AccountLoupeActions<MultisigModularAccount<SmartAccountSigner>>,\n    MultisigUserOperationContext\n  >\n> {\n  return createMultisigModularAccountClient(config);\n}\n"]}