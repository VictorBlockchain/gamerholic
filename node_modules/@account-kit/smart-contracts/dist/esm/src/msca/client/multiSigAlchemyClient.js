import {} from "@aa-sdk/core";
import {} from "@account-kit/infra";
import { createMultisigModularAccountClient, } from "@account-kit/smart-contracts";
import {} from "viem";
/**
 * Creates an Alchemy client for a multisig account using the provided configuration.
 *
 * @example
 * ```ts
 * import { createMultisigAccountAlchemyClient } from "@account-kit/smart-contracts";
 * import { sepolia } from "@account-kit/infra";
 * import { LocalAccountSigner } from "@aa-sdk/core";
 * import { generatePrivateKey } from "viem"
 *
 * const alchemyAccountClient = await createMultisigAccountAlchemyClient({
 *  transport: alchemy({ apiKey: "your-api-key" }),
 *  chain: sepolia,
 *  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey()),
 *  owners: [...], // other owners on the account
 *  threshold: 2, // 2 of N signatures
 * });
 * ```
 *
 * @deprecated Use createModularAccountClient instead of this function, we are switching based on the transport
 * @param {AlchemyMultisigAccountClientConfig} config The configuration for the Alchemy multisig account client
 * @returns {Promise<AlchemySmartAccountClient<Transport, Chain | undefined, MultisigModularAccount<SmartAccountSigner>, MultisigPluginActions<MultisigModularAccount<SmartAccountSigner>> & PluginManagerActions<MultisigModularAccount<SmartAccountSigner>> & AccountLoupeActions<MultisigModularAccount<SmartAccountSigner>>, MultisigUserOperationContext>>} A promise that resolves to an Alchemy Smart Account Client for multisig accounts with extended functionalities.
 */
export async function createMultisigAccountAlchemyClient(config) {
    return createMultisigModularAccountClient(config);
}
//# sourceMappingURL=multiSigAlchemyClient.js.map