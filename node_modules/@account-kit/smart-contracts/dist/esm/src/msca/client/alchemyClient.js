import {} from "@account-kit/infra";
import { createMultiOwnerModularAccountClient, } from "@account-kit/smart-contracts";
import {} from "viem";
/**
 * Creates a modular account Alchemy client with the provided configuration.
 *
 * @example
 * ```ts
 * import { createModularAccountAlchemyClient } from "@account-kit/smart-contracts";
 * import { sepolia, alchemy } from "@account-kit/infra";
 * import { LocalAccountSigner } from "@aa-sdk/core";
 * import { generatePrivateKey } from "viem"
 *
 * const alchemyAccountClient = await createModularAccountAlchemyClient({
 *  transport: alchemy({ apiKey: "your-api-key" }),
 *  chain: sepolia,
 *  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey())
 * });
 * ```
 * @deprecated Use createModularAccountClient instead of this function, we are switching based on the transport
 * @param {AlchemyModularAccountClientConfig} config The configuration for creating the Alchemy client
 * @returns {Promise<AlchemySmartAccountClient>} A promise that resolves to an `AlchemySmartAccountClient` configured with the desired plugins and actions
 */
export async function createModularAccountAlchemyClient(config) {
    return createMultiOwnerModularAccountClient(config);
}
//# sourceMappingURL=alchemyClient.js.map