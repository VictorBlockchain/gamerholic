{"version":3,"file":"multiOwnerAlchemyClient.js","sourceRoot":"","sources":["../../../../../src/light-account/clients/multiOwnerAlchemyClient.ts"],"names":[],"mappings":"AACA,OAAO,EAGN,MAAM,oBAAoB,CAAC;AAC5B,OAAO,EACL,kCAAkC,GAInC,MAAM,8BAA8B,CAAC;AACtC,OAAO,EAAc,MAAM,MAAM,CAAC;AAyBlC;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH,MAAM,CAAC,KAAK,UAAU,yCAAyC,CAAC,EAC9D,IAAI,EACJ,SAAS,EACT,KAAK,EACL,GAAG,MAAM,EACiC;IAC1C,OAAO,kCAAkC,CAAC;QACxC,IAAI;QACJ,SAAS;QACT,KAAK;QACL,GAAG,MAAM;KACV,CAAC,CAAC;AACL,CAAC","sourcesContent":["import type { HttpTransport, SmartAccountSigner } from \"@aa-sdk/core\";\nimport {\n  type AlchemySmartAccountClient,\n  type AlchemySmartAccountClientConfig,\n} from \"@account-kit/infra\";\nimport {\n  createMultiOwnerLightAccountClient,\n  type CreateMultiOwnerLightAccountParams,\n  type MultiOwnerLightAccount,\n  type MultiOwnerLightAccountClientActions,\n} from \"@account-kit/smart-contracts\";\nimport { type Chain } from \"viem\";\n\nexport type AlchemyMultiOwnerLightAccountClientConfig<\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n> = Omit<\n  CreateMultiOwnerLightAccountParams<HttpTransport, TSigner>,\n  \"transport\" | \"type\"\n> &\n  Omit<\n    AlchemySmartAccountClientConfig<Chain, MultiOwnerLightAccount<TSigner>>,\n    \"account\"\n  >;\n\nexport async function createMultiOwnerLightAccountAlchemyClient<\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n>(\n  params: AlchemyMultiOwnerLightAccountClientConfig<TSigner>\n): Promise<\n  AlchemySmartAccountClient<\n    Chain | undefined,\n    MultiOwnerLightAccount<TSigner>,\n    MultiOwnerLightAccountClientActions<TSigner>\n  >\n>;\n\n/**\n * Creates a multi-owner light account Alchemy client using the provided configuration.\n *\n * @example\n * ```ts\n * import { createMultiOwnerLightAccountAlchemyClient } from \"@account-kit/smart-contracts\";\n * import { sepolia, alchemy } from \"@account-kit/infra\";\n * import { LocalAccountSigner } from \"@aa-sdk/core\";\n * import { generatePrivateKey } from \"viem\"\n *\n * const lightAccountClient = await createMultiOwnerLightAccountAlchemyClient({\n *  transport: alchemy({\n *    apiKey: \"your-api-key\",\n *  }),\n *  chain: sepolia\n *  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey())\n * });\n * ```\n *\n * @deprecated Use createMultiOwnerLightAccountAlchemyClient instead now, it should switch depending on the transport\n * @param {AlchemyMultiOwnerLightAccountClientConfig} config The configuration for creating the Alchemy client\n * @returns {Promise<AlchemySmartAccountClient>} A promise that resolves to an `AlchemySmartAccountClient` object containing the created account information and methods\n */\nexport async function createMultiOwnerLightAccountAlchemyClient({\n  opts,\n  transport,\n  chain,\n  ...config\n}: AlchemyMultiOwnerLightAccountClientConfig): Promise<AlchemySmartAccountClient> {\n  return createMultiOwnerLightAccountClient({\n    opts,\n    transport,\n    chain,\n    ...config,\n  });\n}\n"]}