import { createSmartAccountClient, } from "@aa-sdk/core";
import {} from "viem";
import { createLightAccount, } from "@account-kit/smart-contracts";
import { lightAccountClientActions, } from "../decorators/lightAccount.js";
import { isAlchemyTransport, createAlchemySmartAccountClient, } from "@account-kit/infra";
import {} from "./alchemyClient.js";
/**
 * Creates a light account client using the provided parameters, including account information, transport mechanism, blockchain chain, and additional client configurations. This function first creates a light account and then uses it to create a smart account client, extending it with light account client actions.
 *
 * Also, we modified the return type to be the light account alchemy client if the transport is alchemy.
 *
 * @example
 * ```ts
 * import { createLightAccountClient } from "@account-kit/smart-contracts";
 * import { LocalAccountSigner } from "@aa-sdk/core";
 * import { sepolia } from "viem/chains";
 * import { http, generatePrivateKey } from "viem"
 *
 * const account = await createLightAccountClient({
 *  chain: sepolia,
 *  transport: http("RPC_URL"),
 *  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey())
 * });
 * ```
 * @example
 * ```ts
 * import { createLightAccountClient } from "@account-kit/smart-contracts";
 * import { sepolia, alchemy } from "@account-kit/infra";
 * import { LocalAccountSigner } from "@aa-sdk/core";
 * import { generatePrivateKey } from "viem"
 *
 * const lightAlchemyAccountClient = await createLightAccountClient({
 *  transport: alchemy({ apiKey: "your-api-key" }),
 *  chain: sepolia,
 *  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey())
 * });
 * ```
 *
 * @param {CreateLightAccountClientParams} params The parameters for creating a light account client
 * @returns {Promise<SmartAccountClient>} A promise that resolves to a `SmartAccountClient` object containing the created account information and methods
 */
export async function createLightAccountClient(params) {
    const { transport, chain } = params;
    const lightAccount = await createLightAccount({
        ...params,
        transport,
        chain,
    });
    if (isAlchemyTransport(transport, chain)) {
        return createAlchemySmartAccountClient({
            ...params,
            transport,
            chain,
            account: lightAccount,
        }).extend(lightAccountClientActions);
    }
    return createSmartAccountClient({
        ...params,
        transport,
        chain: chain,
        account: lightAccount,
    }).extend(lightAccountClientActions);
}
//# sourceMappingURL=client.js.map