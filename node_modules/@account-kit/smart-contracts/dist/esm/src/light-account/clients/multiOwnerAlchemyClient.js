import {} from "@account-kit/infra";
import { createMultiOwnerLightAccountClient, } from "@account-kit/smart-contracts";
import {} from "viem";
/**
 * Creates a multi-owner light account Alchemy client using the provided configuration.
 *
 * @example
 * ```ts
 * import { createMultiOwnerLightAccountAlchemyClient } from "@account-kit/smart-contracts";
 * import { sepolia, alchemy } from "@account-kit/infra";
 * import { LocalAccountSigner } from "@aa-sdk/core";
 * import { generatePrivateKey } from "viem"
 *
 * const lightAccountClient = await createMultiOwnerLightAccountAlchemyClient({
 *  transport: alchemy({
 *    apiKey: "your-api-key",
 *  }),
 *  chain: sepolia
 *  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey())
 * });
 * ```
 *
 * @deprecated Use createMultiOwnerLightAccountAlchemyClient instead now, it should switch depending on the transport
 * @param {AlchemyMultiOwnerLightAccountClientConfig} config The configuration for creating the Alchemy client
 * @returns {Promise<AlchemySmartAccountClient>} A promise that resolves to an `AlchemySmartAccountClient` object containing the created account information and methods
 */
export async function createMultiOwnerLightAccountAlchemyClient({ opts, transport, chain, ...config }) {
    return createMultiOwnerLightAccountClient({
        opts,
        transport,
        chain,
        ...config,
    });
}
//# sourceMappingURL=multiOwnerAlchemyClient.js.map