{"version":3,"file":"client.js","sourceRoot":"","sources":["../../../../../src/light-account/clients/client.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,wBAAwB,GAOzB,MAAM,cAAc,CAAC;AACtB,OAAO,EAAoD,MAAM,MAAM,CAAC;AACxE,OAAO,EACL,kBAAkB,GAGnB,MAAM,8BAA8B,CAAC;AACtC,OAAO,EACL,yBAAyB,GAE1B,MAAM,+BAA+B,CAAC;AACvC,OAAO,EACL,kBAAkB,EAClB,+BAA+B,GAGhC,MAAM,oBAAoB,CAAC;AAC5B,OAAO,EAAwC,MAAM,oBAAoB,CAAC;AA6C1E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAkCG;AACH,MAAM,CAAC,KAAK,UAAU,wBAAwB,CAC5C,MAAsC;IAEtC,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,GAAG,MAAM,CAAC;IAEpC,MAAM,YAAY,GAAG,MAAM,kBAAkB,CAAC;QAC5C,GAAG,MAAM;QACT,SAAS;QACT,KAAK;KACN,CAAC,CAAC;IACH,IAAI,kBAAkB,CAAC,SAAS,EAAE,KAAK,CAAC,EAAE,CAAC;QACzC,OAAO,+BAA+B,CAAC;YACrC,GAAG,MAAM;YACT,SAAS;YACT,KAAK;YACL,OAAO,EAAE,YAAY;SACtB,CAAC,CAAC,MAAM,CAAC,yBAAyB,CAAC,CAAC;IACvC,CAAC;IAED,OAAO,wBAAwB,CAAC;QAC9B,GAAG,MAAM;QACT,SAAS;QACT,KAAK,EAAE,KAAK;QACZ,OAAO,EAAE,YAAY;KACtB,CAAC,CAAC,MAAM,CAAC,yBAAyB,CAAC,CAAC;AACvC,CAAC","sourcesContent":["import {\n  createSmartAccountClient,\n  type NotType,\n  type SmartAccountClient,\n  type SmartAccountClientActions,\n  type SmartAccountClientConfig,\n  type SmartAccountSigner,\n  type SmartContractAccount,\n} from \"@aa-sdk/core\";\nimport { type Chain, type CustomTransport, type Transport } from \"viem\";\nimport {\n  createLightAccount,\n  type CreateLightAccountParams,\n  type LightAccount,\n} from \"@account-kit/smart-contracts\";\nimport {\n  lightAccountClientActions,\n  type LightAccountClientActions,\n} from \"../decorators/lightAccount.js\";\nimport {\n  isAlchemyTransport,\n  createAlchemySmartAccountClient,\n  type AlchemySmartAccountClient,\n  type AlchemyTransport,\n} from \"@account-kit/infra\";\nimport { type AlchemyLightAccountClientConfig } from \"./alchemyClient.js\";\n\nexport type CreateLightAccountClientParams<\n  TTransport extends Transport | AlchemyTransport = Transport,\n  TChain extends Chain | undefined = Chain | undefined,\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n> = {\n  transport: CreateLightAccountParams<TTransport, TSigner>[\"transport\"];\n  chain: CreateLightAccountParams<TTransport, TSigner>[\"chain\"];\n} & Omit<CreateLightAccountParams<TTransport, TSigner>, \"transport\" | \"chain\"> &\n  Omit<\n    SmartAccountClientConfig<TTransport, TChain>,\n    \"transport\" | \"account\" | \"chain\"\n  >;\n\nexport function createLightAccountClient<\n  TSigner extends SmartAccountSigner = SmartAccountSigner\n>(\n  params: AlchemyLightAccountClientConfig<TSigner> & {\n    transport: AlchemyTransport;\n  }\n): Promise<\n  AlchemySmartAccountClient<\n    Chain | undefined,\n    LightAccount<TSigner>,\n    LightAccountClientActions<TSigner>\n  >\n>;\nexport function createLightAccountClient<\n  TChain extends Chain | undefined = Chain | undefined,\n  TSigner extends SmartAccountSigner = SmartAccountSigner,\n  TTransport extends Transport = Transport\n>(\n  args: CreateLightAccountClientParams<TTransport, TChain, TSigner> &\n    NotType<TTransport, AlchemyTransport>\n): Promise<\n  SmartAccountClient<\n    CustomTransport,\n    TChain,\n    LightAccount<TSigner>,\n    SmartAccountClientActions<Chain, SmartContractAccount> &\n      LightAccountClientActions<TSigner, LightAccount<TSigner>>\n  >\n>;\n\n/**\n * Creates a light account client using the provided parameters, including account information, transport mechanism, blockchain chain, and additional client configurations. This function first creates a light account and then uses it to create a smart account client, extending it with light account client actions.\n *\n * Also, we modified the return type to be the light account alchemy client if the transport is alchemy.\n *\n * @example\n * ```ts\n * import { createLightAccountClient } from \"@account-kit/smart-contracts\";\n * import { LocalAccountSigner } from \"@aa-sdk/core\";\n * import { sepolia } from \"viem/chains\";\n * import { http, generatePrivateKey } from \"viem\"\n *\n * const account = await createLightAccountClient({\n *  chain: sepolia,\n *  transport: http(\"RPC_URL\"),\n *  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey())\n * });\n * ```\n * @example\n * ```ts\n * import { createLightAccountClient } from \"@account-kit/smart-contracts\";\n * import { sepolia, alchemy } from \"@account-kit/infra\";\n * import { LocalAccountSigner } from \"@aa-sdk/core\";\n * import { generatePrivateKey } from \"viem\"\n *\n * const lightAlchemyAccountClient = await createLightAccountClient({\n *  transport: alchemy({ apiKey: \"your-api-key\" }),\n *  chain: sepolia,\n *  signer: LocalAccountSigner.privateKeyToAccountSigner(generatePrivateKey())\n * });\n * ```\n *\n * @param {CreateLightAccountClientParams} params The parameters for creating a light account client\n * @returns {Promise<SmartAccountClient>} A promise that resolves to a `SmartAccountClient` object containing the created account information and methods\n */\nexport async function createLightAccountClient(\n  params: CreateLightAccountClientParams\n): Promise<SmartAccountClient | AlchemySmartAccountClient> {\n  const { transport, chain } = params;\n\n  const lightAccount = await createLightAccount({\n    ...params,\n    transport,\n    chain,\n  });\n  if (isAlchemyTransport(transport, chain)) {\n    return createAlchemySmartAccountClient({\n      ...params,\n      transport,\n      chain,\n      account: lightAccount,\n    }).extend(lightAccountClientActions);\n  }\n\n  return createSmartAccountClient({\n    ...params,\n    transport,\n    chain: chain,\n    account: lightAccount,\n  }).extend(lightAccountClientActions);\n}\n"]}