import { type NotType, type SmartAccountClient, type SmartAccountClientActions, type SmartAccountClientConfig, type SmartAccountSigner, type SmartContractAccount } from "@aa-sdk/core";
import { type Chain, type CustomTransport, type Transport } from "viem";
import { type CreateLightAccountParams, type LightAccount } from "@account-kit/smart-contracts";
import { type LightAccountClientActions } from "../decorators/lightAccount.js";
import { type AlchemySmartAccountClient, type AlchemyTransport } from "@account-kit/infra";
import { type AlchemyLightAccountClientConfig } from "./alchemyClient.js";
export type CreateLightAccountClientParams<TTransport extends Transport | AlchemyTransport = Transport, TChain extends Chain | undefined = Chain | undefined, TSigner extends SmartAccountSigner = SmartAccountSigner> = {
    transport: CreateLightAccountParams<TTransport, TSigner>["transport"];
    chain: CreateLightAccountParams<TTransport, TSigner>["chain"];
} & Omit<CreateLightAccountParams<TTransport, TSigner>, "transport" | "chain"> & Omit<SmartAccountClientConfig<TTransport, TChain>, "transport" | "account" | "chain">;
export declare function createLightAccountClient<TSigner extends SmartAccountSigner = SmartAccountSigner>(params: AlchemyLightAccountClientConfig<TSigner> & {
    transport: AlchemyTransport;
}): Promise<AlchemySmartAccountClient<Chain | undefined, LightAccount<TSigner>, LightAccountClientActions<TSigner>>>;
export declare function createLightAccountClient<TChain extends Chain | undefined = Chain | undefined, TSigner extends SmartAccountSigner = SmartAccountSigner, TTransport extends Transport = Transport>(args: CreateLightAccountClientParams<TTransport, TChain, TSigner> & NotType<TTransport, AlchemyTransport>): Promise<SmartAccountClient<CustomTransport, TChain, LightAccount<TSigner>, SmartAccountClientActions<Chain, SmartContractAccount> & LightAccountClientActions<TSigner, LightAccount<TSigner>>>>;
//# sourceMappingURL=client.d.ts.map