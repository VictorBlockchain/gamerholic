import { type Hex, type Chain, type Address, type Transport } from "viem";
import { type ModularAccountV2 } from "./account/common/modularAccountV2Base.js";
import { type GetAccountParameter, type SmartAccountClient, type SmartAccountSigner, type SmartContractAccountWithSigner, type UpgradeToData } from "@aa-sdk/core";
export declare const DEFAULT_OWNER_ENTITY_ID = 0;
export type PackUOSignatureParams = {
    validationSignature: Hex;
};
export type Pack1271SignatureParams = {
    validationSignature: Hex;
    entityId: number;
};
export declare const packUOSignature: ({ validationSignature, }: PackUOSignatureParams) => Hex;
export declare const pack1271Signature: ({ validationSignature, entityId, }: Pack1271SignatureParams) => Hex;
export declare const getDefaultMAV2FactoryAddress: (chain: Chain) => Address;
export declare const getDefaultSMAV2BytecodeAddress: (chain: Chain) => Address;
export declare const getDefaultSMAV2StorageAddress: (chain: Chain) => Address;
export declare const getDefaultSMAV27702Address: (chain: Chain) => Address;
export declare const getDefaultMAV2Address: (chain: Chain) => Address;
export type GetMAV2UpgradeToData<TSigner extends SmartAccountSigner = SmartAccountSigner, TAccount extends SmartContractAccountWithSigner<string, TSigner> | undefined = SmartContractAccountWithSigner<string, TSigner> | undefined> = GetAccountParameter<TAccount>;
/**
 * Retrieves the data necessary to upgrade to a Modular Account V2 (MA v2).
 * Note that the upgrade will be to the Semi Modular Account Storage variant
 *
 * @example
 * ```ts
 * import { createLightAccountClient, getMAV2UpgradeToData } from "@account-kit/smart-contracts";
 *
 * const client = createLightAccountClient({});
 * const upgradeData = await getMAV2UpgradeToData(client, {});
 * ```
 *
 * @param {SmartAccountClient<TTransport, TChain, TAccount>} client The smart account client
 * @param {GetMAV2UpgradeToData<TSigner, TAccount>} args The arguments required for the upgrade
 * @returns {Promise<UpgradeToData & { createModularAccountV2FromExisting: () => Promise<ModularAccountV2<TSigner>>}>} A promise that resolves to upgrade data augmented with a function to create a Modular Account V2
 */
export declare function getMAV2UpgradeToData<TTransport extends Transport = Transport, TChain extends Chain | undefined = Chain | undefined, TSigner extends SmartAccountSigner = SmartAccountSigner, TAccount extends SmartContractAccountWithSigner<string, TSigner> | undefined = SmartContractAccountWithSigner<string, TSigner> | undefined>(client: SmartAccountClient<TTransport, TChain, TAccount>, args: GetMAV2UpgradeToData<TSigner, TAccount>): Promise<UpgradeToData & {
    createModularAccountV2FromExisting: () => Promise<ModularAccountV2<TSigner>>;
}>;
//# sourceMappingURL=utils.d.ts.map