import { type GetEntryPointFromAccount, type SendUserOperationResult, type UserOperationOverridesParameter, type SmartAccountSigner } from "@aa-sdk/core";
import { type Address, type Hex } from "viem";
import type { HookConfig, ValidationConfig } from "../common/types.js";
import { type ModularAccountV2Client } from "../../client/client.js";
import { type ModularAccountV2 } from "../../account/common/modularAccountV2Base.js";
export type InstallValidationParams<TSigner extends SmartAccountSigner = SmartAccountSigner> = {
    validationConfig: ValidationConfig;
    selectors: Hex[];
    installData: Hex;
    hooks: {
        hookConfig: HookConfig;
        initData: Hex;
    }[];
    account?: ModularAccountV2<TSigner> | undefined;
} & UserOperationOverridesParameter<GetEntryPointFromAccount<ModularAccountV2<TSigner>>>;
export type UninstallValidationParams<TSigner extends SmartAccountSigner = SmartAccountSigner> = {
    moduleAddress: Address;
    entityId: number;
    uninstallData: Hex;
    hookUninstallDatas: Hex[];
    account?: ModularAccountV2<TSigner> | undefined;
} & UserOperationOverridesParameter<GetEntryPointFromAccount<ModularAccountV2<TSigner>>>;
export type InstallValidationActions<TSigner extends SmartAccountSigner = SmartAccountSigner> = {
    installValidation: (args: InstallValidationParams<TSigner>) => Promise<SendUserOperationResult>;
    encodeInstallValidation: (args: InstallValidationParams<TSigner>) => Promise<Hex>;
    uninstallValidation: (args: UninstallValidationParams<TSigner>) => Promise<SendUserOperationResult>;
    encodeUninstallValidation: (args: UninstallValidationParams<TSigner>) => Promise<Hex>;
};
/**
 * Provides validation installation and uninstallation functionalities for a MA v2 client, ensuring compatibility with `SmartAccountClient`.
 *
 * @example
 * ```ts
 * import { createModularAccountV2Client, installValidationActions, getDefaultSingleSignerValidationModuleAddress, SingleSignerValidationModule } from "@account-kit/smart-contracts";
 * import { Address } from "viem";
 *
 * const client = (await createModularAccountV2Client({ ... })).extend(installValidationActions);
 * const sessionKeyAddress: Address = "0x1234";
 * const sessionKeyEntityId: number = 1;
 *
 * await client.installValidation({
 *   validationConfig: {
 *     moduleAddress: getDefaultSingleSignerValidationModuleAddress(
 *       client.chain
 *     ),
 *     entityId: sessionKeyEntityId,
 *     isGlobal: true,
 *     isSignatureValidation: false,
 *     isUserOpValidation: true,
 *   },
 *   selectors: [],
 *   installData: SingleSignerValidationModule.encodeOnInstallData({
 *     entityId: sessionKeyEntityId,
 *     signer: sessionKeyAddress,
 *   }),
 *   hooks: [],
 * });
 *
 * await client.uninstallValidation({
 *   moduleAddress: sessionKeyAddress,
 *   entityId: sessionKeyEntityId,
 *   uninstallData: SingleSignerValidationModule.encodeOnUninstallData({
 *     entityId: sessionKeyEntityId,
 *   }),
 *   hookUninstallDatas: [],
 * });
 *
 * ```
 *
 * @param {object} client - The client instance which provides account and sendUserOperation functionality.
 * @returns {object} - An object containing two methods, `installValidation` and `uninstallValidation`.
 */
export declare const installValidationActions: <TSigner extends SmartAccountSigner = SmartAccountSigner>(client: ModularAccountV2Client<TSigner>) => InstallValidationActions<TSigner>;
//# sourceMappingURL=installValidation.d.ts.map