export declare const semiModularAccountBytecodeAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "entryPoint";
        readonly type: "address";
        readonly internalType: "contract IEntryPoint";
    }, {
        readonly name: "executionInstallDelegate";
        readonly type: "address";
        readonly internalType: "contract ExecutionInstallDelegate";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "fallback";
    readonly stateMutability: "payable";
}, {
    readonly type: "receive";
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly name: "accountId";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "string";
        readonly internalType: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "entryPoint";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "contract IEntryPoint";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "execute";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "value";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "data";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }];
    readonly outputs: readonly [{
        readonly name: "result";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly name: "executeBatch";
    readonly inputs: readonly [{
        readonly name: "calls";
        readonly type: "tuple[]";
        readonly internalType: "struct Call[]";
        readonly components: readonly [{
            readonly name: "target";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "value";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "data";
            readonly type: "bytes";
            readonly internalType: "bytes";
        }];
    }];
    readonly outputs: readonly [{
        readonly name: "results";
        readonly type: "bytes[]";
        readonly internalType: "bytes[]";
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly name: "executeUserOp";
    readonly inputs: readonly [{
        readonly name: "userOp";
        readonly type: "tuple";
        readonly internalType: "struct PackedUserOperation";
        readonly components: readonly [{
            readonly name: "sender";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "nonce";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "initCode";
            readonly type: "bytes";
            readonly internalType: "bytes";
        }, {
            readonly name: "callData";
            readonly type: "bytes";
            readonly internalType: "bytes";
        }, {
            readonly name: "accountGasLimits";
            readonly type: "bytes32";
            readonly internalType: "bytes32";
        }, {
            readonly name: "preVerificationGas";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "gasFees";
            readonly type: "bytes32";
            readonly internalType: "bytes32";
        }, {
            readonly name: "paymasterAndData";
            readonly type: "bytes";
            readonly internalType: "bytes";
        }, {
            readonly name: "signature";
            readonly type: "bytes";
            readonly internalType: "bytes";
        }];
    }, {
        readonly name: "";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "executeWithRuntimeValidation";
    readonly inputs: readonly [{
        readonly name: "data";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }, {
        readonly name: "authorization";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly name: "getExecutionData";
    readonly inputs: readonly [{
        readonly name: "selector";
        readonly type: "bytes4";
        readonly internalType: "bytes4";
    }];
    readonly outputs: readonly [{
        readonly name: "data";
        readonly type: "tuple";
        readonly internalType: "struct ExecutionDataView";
        readonly components: readonly [{
            readonly name: "module";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "skipRuntimeValidation";
            readonly type: "bool";
            readonly internalType: "bool";
        }, {
            readonly name: "allowGlobalValidation";
            readonly type: "bool";
            readonly internalType: "bool";
        }, {
            readonly name: "executionHooks";
            readonly type: "bytes25[]";
            readonly internalType: "HookConfig[]";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getFallbackSignerData";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getValidationData";
    readonly inputs: readonly [{
        readonly name: "validationFunction";
        readonly type: "bytes24";
        readonly internalType: "ModuleEntity";
    }];
    readonly outputs: readonly [{
        readonly name: "data";
        readonly type: "tuple";
        readonly internalType: "struct ValidationDataView";
        readonly components: readonly [{
            readonly name: "validationFlags";
            readonly type: "uint8";
            readonly internalType: "ValidationFlags";
        }, {
            readonly name: "validationHooks";
            readonly type: "bytes25[]";
            readonly internalType: "HookConfig[]";
        }, {
            readonly name: "executionHooks";
            readonly type: "bytes25[]";
            readonly internalType: "HookConfig[]";
        }, {
            readonly name: "selectors";
            readonly type: "bytes4[]";
            readonly internalType: "bytes4[]";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "installExecution";
    readonly inputs: readonly [{
        readonly name: "module";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "manifest";
        readonly type: "tuple";
        readonly internalType: "struct ExecutionManifest";
        readonly components: readonly [{
            readonly name: "executionFunctions";
            readonly type: "tuple[]";
            readonly internalType: "struct ManifestExecutionFunction[]";
            readonly components: readonly [{
                readonly name: "executionSelector";
                readonly type: "bytes4";
                readonly internalType: "bytes4";
            }, {
                readonly name: "skipRuntimeValidation";
                readonly type: "bool";
                readonly internalType: "bool";
            }, {
                readonly name: "allowGlobalValidation";
                readonly type: "bool";
                readonly internalType: "bool";
            }];
        }, {
            readonly name: "executionHooks";
            readonly type: "tuple[]";
            readonly internalType: "struct ManifestExecutionHook[]";
            readonly components: readonly [{
                readonly name: "executionSelector";
                readonly type: "bytes4";
                readonly internalType: "bytes4";
            }, {
                readonly name: "entityId";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "isPreHook";
                readonly type: "bool";
                readonly internalType: "bool";
            }, {
                readonly name: "isPostHook";
                readonly type: "bool";
                readonly internalType: "bool";
            }];
        }, {
            readonly name: "interfaceIds";
            readonly type: "bytes4[]";
            readonly internalType: "bytes4[]";
        }];
    }, {
        readonly name: "moduleInstallData";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "installValidation";
    readonly inputs: readonly [{
        readonly name: "validationConfig";
        readonly type: "bytes25";
        readonly internalType: "ValidationConfig";
    }, {
        readonly name: "selectors";
        readonly type: "bytes4[]";
        readonly internalType: "bytes4[]";
    }, {
        readonly name: "installData";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }, {
        readonly name: "hooks";
        readonly type: "bytes[]";
        readonly internalType: "bytes[]";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "isValidSignature";
    readonly inputs: readonly [{
        readonly name: "hash";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "signature";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes4";
        readonly internalType: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "onERC1155BatchReceived";
    readonly inputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "";
        readonly type: "uint256[]";
        readonly internalType: "uint256[]";
    }, {
        readonly name: "";
        readonly type: "uint256[]";
        readonly internalType: "uint256[]";
    }, {
        readonly name: "";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes4";
        readonly internalType: "bytes4";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "onERC1155Received";
    readonly inputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes4";
        readonly internalType: "bytes4";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "onERC721Received";
    readonly inputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes4";
        readonly internalType: "bytes4";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "performCreate";
    readonly inputs: readonly [{
        readonly name: "value";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "initCode";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }, {
        readonly name: "isCreate2";
        readonly type: "bool";
        readonly internalType: "bool";
    }, {
        readonly name: "salt";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
    readonly outputs: readonly [{
        readonly name: "createdAddr";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly name: "proxiableUUID";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "supportsInterface";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly type: "bytes4";
        readonly internalType: "bytes4";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "uninstallExecution";
    readonly inputs: readonly [{
        readonly name: "module";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "manifest";
        readonly type: "tuple";
        readonly internalType: "struct ExecutionManifest";
        readonly components: readonly [{
            readonly name: "executionFunctions";
            readonly type: "tuple[]";
            readonly internalType: "struct ManifestExecutionFunction[]";
            readonly components: readonly [{
                readonly name: "executionSelector";
                readonly type: "bytes4";
                readonly internalType: "bytes4";
            }, {
                readonly name: "skipRuntimeValidation";
                readonly type: "bool";
                readonly internalType: "bool";
            }, {
                readonly name: "allowGlobalValidation";
                readonly type: "bool";
                readonly internalType: "bool";
            }];
        }, {
            readonly name: "executionHooks";
            readonly type: "tuple[]";
            readonly internalType: "struct ManifestExecutionHook[]";
            readonly components: readonly [{
                readonly name: "executionSelector";
                readonly type: "bytes4";
                readonly internalType: "bytes4";
            }, {
                readonly name: "entityId";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "isPreHook";
                readonly type: "bool";
                readonly internalType: "bool";
            }, {
                readonly name: "isPostHook";
                readonly type: "bool";
                readonly internalType: "bool";
            }];
        }, {
            readonly name: "interfaceIds";
            readonly type: "bytes4[]";
            readonly internalType: "bytes4[]";
        }];
    }, {
        readonly name: "moduleUninstallData";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "uninstallValidation";
    readonly inputs: readonly [{
        readonly name: "validationFunction";
        readonly type: "bytes24";
        readonly internalType: "ModuleEntity";
    }, {
        readonly name: "uninstallData";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }, {
        readonly name: "hookUninstallData";
        readonly type: "bytes[]";
        readonly internalType: "bytes[]";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "updateFallbackSignerData";
    readonly inputs: readonly [{
        readonly name: "fallbackSigner";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "isDisabled";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "upgradeToAndCall";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "data";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly name: "validateUserOp";
    readonly inputs: readonly [{
        readonly name: "userOp";
        readonly type: "tuple";
        readonly internalType: "struct PackedUserOperation";
        readonly components: readonly [{
            readonly name: "sender";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "nonce";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "initCode";
            readonly type: "bytes";
            readonly internalType: "bytes";
        }, {
            readonly name: "callData";
            readonly type: "bytes";
            readonly internalType: "bytes";
        }, {
            readonly name: "accountGasLimits";
            readonly type: "bytes32";
            readonly internalType: "bytes32";
        }, {
            readonly name: "preVerificationGas";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "gasFees";
            readonly type: "bytes32";
            readonly internalType: "bytes32";
        }, {
            readonly name: "paymasterAndData";
            readonly type: "bytes";
            readonly internalType: "bytes";
        }, {
            readonly name: "signature";
            readonly type: "bytes";
            readonly internalType: "bytes";
        }];
    }, {
        readonly name: "userOpHash";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "missingAccountFunds";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly outputs: readonly [{
        readonly name: "validationData";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "event";
    readonly name: "ExecutionInstalled";
    readonly inputs: readonly [{
        readonly name: "module";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "manifest";
        readonly type: "tuple";
        readonly indexed: false;
        readonly internalType: "struct ExecutionManifest";
        readonly components: readonly [{
            readonly name: "executionFunctions";
            readonly type: "tuple[]";
            readonly internalType: "struct ManifestExecutionFunction[]";
            readonly components: readonly [{
                readonly name: "executionSelector";
                readonly type: "bytes4";
                readonly internalType: "bytes4";
            }, {
                readonly name: "skipRuntimeValidation";
                readonly type: "bool";
                readonly internalType: "bool";
            }, {
                readonly name: "allowGlobalValidation";
                readonly type: "bool";
                readonly internalType: "bool";
            }];
        }, {
            readonly name: "executionHooks";
            readonly type: "tuple[]";
            readonly internalType: "struct ManifestExecutionHook[]";
            readonly components: readonly [{
                readonly name: "executionSelector";
                readonly type: "bytes4";
                readonly internalType: "bytes4";
            }, {
                readonly name: "entityId";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "isPreHook";
                readonly type: "bool";
                readonly internalType: "bool";
            }, {
                readonly name: "isPostHook";
                readonly type: "bool";
                readonly internalType: "bool";
            }];
        }, {
            readonly name: "interfaceIds";
            readonly type: "bytes4[]";
            readonly internalType: "bytes4[]";
        }];
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "ExecutionUninstalled";
    readonly inputs: readonly [{
        readonly name: "module";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "onUninstallSucceeded";
        readonly type: "bool";
        readonly indexed: false;
        readonly internalType: "bool";
    }, {
        readonly name: "manifest";
        readonly type: "tuple";
        readonly indexed: false;
        readonly internalType: "struct ExecutionManifest";
        readonly components: readonly [{
            readonly name: "executionFunctions";
            readonly type: "tuple[]";
            readonly internalType: "struct ManifestExecutionFunction[]";
            readonly components: readonly [{
                readonly name: "executionSelector";
                readonly type: "bytes4";
                readonly internalType: "bytes4";
            }, {
                readonly name: "skipRuntimeValidation";
                readonly type: "bool";
                readonly internalType: "bool";
            }, {
                readonly name: "allowGlobalValidation";
                readonly type: "bool";
                readonly internalType: "bool";
            }];
        }, {
            readonly name: "executionHooks";
            readonly type: "tuple[]";
            readonly internalType: "struct ManifestExecutionHook[]";
            readonly components: readonly [{
                readonly name: "executionSelector";
                readonly type: "bytes4";
                readonly internalType: "bytes4";
            }, {
                readonly name: "entityId";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }, {
                readonly name: "isPreHook";
                readonly type: "bool";
                readonly internalType: "bool";
            }, {
                readonly name: "isPostHook";
                readonly type: "bool";
                readonly internalType: "bool";
            }];
        }, {
            readonly name: "interfaceIds";
            readonly type: "bytes4[]";
            readonly internalType: "bytes4[]";
        }];
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "FallbackSignerUpdated";
    readonly inputs: readonly [{
        readonly name: "newFallbackSigner";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "isDisabled";
        readonly type: "bool";
        readonly indexed: false;
        readonly internalType: "bool";
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "Initialized";
    readonly inputs: readonly [{
        readonly name: "version";
        readonly type: "uint64";
        readonly indexed: false;
        readonly internalType: "uint64";
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "Upgraded";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "ValidationInstalled";
    readonly inputs: readonly [{
        readonly name: "module";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "entityId";
        readonly type: "uint32";
        readonly indexed: true;
        readonly internalType: "uint32";
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "ValidationUninstalled";
    readonly inputs: readonly [{
        readonly name: "module";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "entityId";
        readonly type: "uint32";
        readonly indexed: true;
        readonly internalType: "uint32";
    }, {
        readonly name: "onUninstallSucceeded";
        readonly type: "bool";
        readonly indexed: false;
        readonly internalType: "bool";
    }];
    readonly anonymous: false;
}, {
    readonly type: "error";
    readonly name: "ArrayLengthMismatch";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "CreateFailed";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "DeferredActionSignatureInvalid";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "DeferredValidationHasValidationHooks";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "ExecutionHookAlreadySet";
    readonly inputs: readonly [{
        readonly name: "hookConfig";
        readonly type: "bytes25";
        readonly internalType: "HookConfig";
    }];
}, {
    readonly type: "error";
    readonly name: "FallbackSignerDisabled";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "FallbackSignerMismatch";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "FallbackValidationInstallationNotAllowed";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "InterfaceNotSupported";
    readonly inputs: readonly [{
        readonly name: "module";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "InvalidInitialization";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "InvalidSignatureType";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "ModuleInstallCallbackFailed";
    readonly inputs: readonly [{
        readonly name: "module";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "revertReason";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }];
}, {
    readonly type: "error";
    readonly name: "NonCanonicalEncoding";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "NotEntryPoint";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "PreValidationHookDuplicate";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "RequireUserOperationContext";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "SegmentOutOfOrder";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "SelfCallRecursionDepthExceeded";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "SignatureValidationInvalid";
    readonly inputs: readonly [{
        readonly name: "validationFunction";
        readonly type: "bytes24";
        readonly internalType: "ModuleEntity";
    }];
}, {
    readonly type: "error";
    readonly name: "UnauthorizedCallContext";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "UnexpectedAggregator";
    readonly inputs: readonly [{
        readonly name: "validationFunction";
        readonly type: "bytes24";
        readonly internalType: "ModuleEntity";
    }, {
        readonly name: "aggregator";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "UnrecognizedFunction";
    readonly inputs: readonly [{
        readonly name: "selector";
        readonly type: "bytes4";
        readonly internalType: "bytes4";
    }];
}, {
    readonly type: "error";
    readonly name: "UpgradeFailed";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "UserOpValidationInvalid";
    readonly inputs: readonly [{
        readonly name: "validationFunction";
        readonly type: "bytes24";
        readonly internalType: "ModuleEntity";
    }];
}, {
    readonly type: "error";
    readonly name: "ValidationAlreadySet";
    readonly inputs: readonly [{
        readonly name: "selector";
        readonly type: "bytes4";
        readonly internalType: "bytes4";
    }, {
        readonly name: "validationFunction";
        readonly type: "bytes24";
        readonly internalType: "ModuleEntity";
    }];
}, {
    readonly type: "error";
    readonly name: "ValidationAssocHookLimitExceeded";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "ValidationEntityIdInUse";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "ValidationFunctionMissing";
    readonly inputs: readonly [{
        readonly name: "selector";
        readonly type: "bytes4";
        readonly internalType: "bytes4";
    }];
}, {
    readonly type: "error";
    readonly name: "ValidationSignatureSegmentMissing";
    readonly inputs: readonly [];
}];
//# sourceMappingURL=semiModularAccountBytecodeAbi.d.ts.map