{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/types.ts"],"names":[],"mappings":"","sourcesContent":["export type EventsSchema = readonly {\n  EventName: string;\n  EventData?: Record<string, any>;\n}[];\n\ntype Prettify<T> = {\n  [K in keyof T]: T[K];\n} & {};\n\nexport type TrackEventParameters<Schema extends EventsSchema> = {\n  [K in keyof Schema]: Prettify<\n    { name: Schema[K][\"EventName\"] } & ([undefined] extends [\n      Schema[K][\"EventData\"]\n    ]\n      ? { data?: undefined }\n      : { data: Schema[K][\"EventData\"] })\n  >;\n}[number];\n\nexport interface EventLogger<Schema extends EventsSchema = []> {\n  trackEvent(\n    params: TrackEventParameters<[...Schema, PerformanceEvent]>\n  ): Promise<void>;\n  profiled<TArgs extends any[], TRet>(\n    name: string,\n    func: (...args: TArgs) => TRet\n  ): (...args: TArgs) => TRet;\n  _internal: {\n    ready: Promise<unknown>;\n    anonId: string;\n  };\n}\n\nexport type InnerLogger<Schema extends EventsSchema> = Omit<\n  EventLogger<Schema>,\n  \"profiled\"\n>;\n\nexport type LoggerContext = {\n  package: string;\n  version: string;\n  [key: string]: string;\n};\n\nexport type PerformanceEvent = {\n  EventName: \"performance\";\n  EventData: {\n    executionTimeMs: number;\n    functionName: string;\n  };\n};\n"]}