{"version":3,"file":"client.js","sourceRoot":"","sources":["../../src/client.ts"],"names":[],"mappings":"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","sourcesContent":["import { AnalyticsBrowser } from \"@segment/analytics-next\";\nimport { v4 as uuid } from \"uuid\";\nimport { WRITE_IN_DEV } from \"./_writeKey.js\";\nimport { fetchRemoteWriteKey } from \"./fetchRemoteWriteKey.js\";\nimport { noopLogger } from \"./noop.js\";\nimport { ContextAllowlistPlugin } from \"./plugins/contextAllowlist.js\";\nimport { DevDestinationPlugin } from \"./plugins/devDestination.js\";\nimport type { EventsSchema, InnerLogger, LoggerContext } from \"./types\";\nimport { isClientDevMode } from \"./utils.js\";\n\nconst ANON_ID_STORAGE_KEY = \"account-kit:anonId\";\n\ntype AnonId = { id: string; expiresMs: number };\n\nfunction getOrCreateAnonId(): AnonId {\n  let anon: AnonId | null = JSON.parse(\n    localStorage.getItem(ANON_ID_STORAGE_KEY) ?? \"null\"\n  );\n\n  if (!anon || anon.expiresMs < Date.now()) {\n    anon = {\n      id: uuid(),\n      // expires a month from now (30days * 24hrs/day * 60min/hr * 60sec/min * 1000ms/sec)\n      expiresMs: Date.now() + 30 * 24 * 60 * 60 * 1000,\n    };\n    localStorage.setItem(ANON_ID_STORAGE_KEY, JSON.stringify(anon));\n  }\n\n  return anon;\n}\n\nexport function createClientLogger<Schema extends EventsSchema = []>(\n  context: LoggerContext\n): InnerLogger<Schema> {\n  const isDev = isClientDevMode();\n  if (isDev && !WRITE_IN_DEV) {\n    // If we don't have a write key, we don't want to log anything\n    // This is useful for dev so we don't log dev metrics\n    //\n    // We also don't allow logging on localhost unless WRITE_IN_DEV is set to true\n    // WRITE_IN_DEV is only ever true if you're building from source with env vars set to true\n    return noopLogger;\n  }\n\n  const analytics = new AnalyticsBrowser();\n  const writeKey = fetchRemoteWriteKey();\n\n  const { id: anonId } = getOrCreateAnonId();\n  analytics.setAnonymousId(anonId);\n  analytics.register(ContextAllowlistPlugin);\n  analytics.debug(isDev);\n\n  if (isDev) {\n    // Super weird behaviour, but if I don't add some kind of log here,\n    // then I don't actually get logs in the console\n    console.log(`[Metrics] metrics initialized for ${context.package}`);\n  }\n\n  // This lets us log events in the console\n  if (isDev) {\n    analytics.register(DevDestinationPlugin);\n  }\n\n  const ready: Promise<unknown> = writeKey.then((writeKey) => {\n    if (writeKey == null) {\n      return;\n    }\n\n    analytics.load(\n      {\n        writeKey,\n        // we disable these settings in dev so we don't fetch anything from segment\n        cdnSettings: isDev\n          ? {\n              integrations: {},\n            }\n          : undefined,\n      },\n      // further we disable the segment integration dev\n      {\n        disableClientPersistence: true,\n        integrations: {\n          \"Segment.io\": !isDev,\n        },\n      }\n    );\n\n    return analytics.ready();\n  });\n\n  return {\n    _internal: {\n      ready,\n      anonId,\n    },\n    trackEvent: async ({ name, data }) => {\n      if (!(await writeKey)) {\n        return noopLogger.trackEvent({\n          name,\n          // @ts-expect-error\n          data,\n        });\n      }\n\n      await analytics.track(name, { ...data, ...context });\n    },\n  };\n}\n"]}