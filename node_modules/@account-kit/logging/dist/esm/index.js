import { createClientLogger } from "./client.js";
import { noopLogger } from "./noop.js";
import { createServerLogger } from "./server.js";
export function createLogger(context) {
    const innerLogger = (() => {
        try {
            return typeof window === "undefined"
                ? createServerLogger(context)
                : createClientLogger(context);
        }
        catch (e) {
            console.error("[Safe to ignore] failed to initialize metrics", e);
            return noopLogger;
        }
    })();
    const logger = {
        ...innerLogger,
        profiled(name, func) {
            return function (...args) {
                const start = Date.now();
                const result = func.apply(this, args);
                if (result instanceof Promise) {
                    return result.then((res) => {
                        innerLogger.trackEvent({
                            name: "performance",
                            data: {
                                executionTimeMs: Date.now() - start,
                                functionName: name,
                            },
                        });
                        return res;
                    });
                }
                innerLogger.trackEvent({
                    name: "performance",
                    data: {
                        executionTimeMs: Date.now() - start,
                        functionName: name,
                    },
                });
                return result;
            };
        },
    };
    return logger;
}
//# sourceMappingURL=index.js.map