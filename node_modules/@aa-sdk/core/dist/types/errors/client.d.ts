import type { Client } from "viem";
import { BaseError } from "./base.js";
/**
 * Represents an error thrown when a client is not compatible with the expected client type for a specific method. The error message provides guidance on how to create a compatible client.
 */
export declare class IncompatibleClientError extends BaseError {
    name: string;
    /**
     * Throws an error when the client type does not match the expected client type.
     *
     * @param {string} expectedClient The expected type of the client.
     * @param {string} method The method that was called.
     * @param {Client} client The client instance.
     */
    constructor(expectedClient: string, method: string, client: Client);
}
/**
 * Represents an error that occurs when an invalid RPC URL is provided. This class extends the `BaseError` class and includes the invalid URL in the error message.
 */
export declare class InvalidRpcUrlError extends BaseError {
    name: string;
    /**
     * Creates an instance of an error with a message indicating an invalid RPC URL.
     *
     * @param {string} [rpcUrl] The invalid RPC URL that caused the error
     */
    constructor(rpcUrl?: string);
}
/**
 * Error class representing a "Chain Not Found" error, typically thrown when no chain is supplied to the client.
 */
export declare class ChainNotFoundError extends BaseError {
    name: string;
    /**
     * Initializes a new instance of the error message with a default message indicating that no chain was supplied to the client.
     */
    constructor();
}
/**
 * Error class denoting that the provided entity id is invalid because it's too large.
 */
export declare class InvalidEntityIdError extends BaseError {
    name: string;
    /**
     * Initializes a new instance of the error message with a default message indicating that the entity id is invalid because it's too large.
     *
     * @param {number} entityId the invalid entityId used
     */
    constructor(entityId: number);
}
/**
 * Error class denoting that the nonce key is invalid because its too large.
 */
export declare class InvalidNonceKeyError extends BaseError {
    name: string;
    /**
     * Initializes a new instance of the error message with a default message indicating that the nonce key is invalid.
     *
     * @param {bigint} nonceKey the invalid nonceKey used
     */
    constructor(nonceKey: bigint);
}
/**
 * Error class denoting that the provided entity id is invalid because it's overriding the native entity id.
 */
export declare class EntityIdOverrideError extends BaseError {
    name: string;
    /**
     * Initializes a new instance of the error message with a default message indicating that the nonce key is invalid.
     */
    constructor();
}
/**
 * Error class denoting that the provided ma v2 account mode is invalid.
 */
export declare class InvalidModularAccountV2Mode extends BaseError {
    name: string;
    /**
     * Initializes a new instance of the error message with a default message indicating that the provided ma v2 account mode is invalid.
     */
    constructor();
}
//# sourceMappingURL=client.d.ts.map