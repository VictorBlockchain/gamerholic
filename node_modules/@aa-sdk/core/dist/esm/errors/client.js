import { BaseError } from "./base.js";
/**
 * Represents an error thrown when a client is not compatible with the expected client type for a specific method. The error message provides guidance on how to create a compatible client.
 */
export class IncompatibleClientError extends BaseError {
    /**
     * Throws an error when the client type does not match the expected client type.
     *
     * @param {string} expectedClient The expected type of the client.
     * @param {string} method The method that was called.
     * @param {Client} client The client instance.
     */
    constructor(expectedClient, method, client) {
        super([
            `Client of type (${client.type}) is not a ${expectedClient}.`,
            `Create one with \`createSmartAccountClient\` first before using \`${method}\``,
        ].join("\n"));
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "IncompatibleClientError"
        });
    }
}
/**
 * Represents an error that occurs when an invalid RPC URL is provided. This class extends the `BaseError` class and includes the invalid URL in the error message.
 */
export class InvalidRpcUrlError extends BaseError {
    /**
     * Creates an instance of an error with a message indicating an invalid RPC URL.
     *
     * @param {string} [rpcUrl] The invalid RPC URL that caused the error
     */
    constructor(rpcUrl) {
        super(`Invalid RPC URL ${rpcUrl}`);
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "InvalidRpcUrlError"
        });
    }
}
/**
 * Error class representing a "Chain Not Found" error, typically thrown when no chain is supplied to the client.
 */
export class ChainNotFoundError extends BaseError {
    /**
     * Initializes a new instance of the error message with a default message indicating that no chain was supplied to the client.
     */
    constructor() {
        super("No chain supplied to the client");
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "ChainNotFoundError"
        });
    }
}
/**
 * Error class denoting that the provided entity id is invalid because it's too large.
 */
export class InvalidEntityIdError extends BaseError {
    /**
     * Initializes a new instance of the error message with a default message indicating that the entity id is invalid because it's too large.
     *
     * @param {number} entityId the invalid entityId used
     */
    constructor(entityId) {
        super(`Entity ID used is ${entityId}, but must be less than or equal to uint32.max`);
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "InvalidEntityIdError"
        });
    }
}
/**
 * Error class denoting that the nonce key is invalid because its too large.
 */
export class InvalidNonceKeyError extends BaseError {
    /**
     * Initializes a new instance of the error message with a default message indicating that the nonce key is invalid.
     *
     * @param {bigint} nonceKey the invalid nonceKey used
     */
    constructor(nonceKey) {
        super(`Nonce key is ${nonceKey} but has to be less than or equal to 2**152`);
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "InvalidNonceKeyError"
        });
    }
}
/**
 * Error class denoting that the provided entity id is invalid because it's overriding the native entity id.
 */
export class EntityIdOverrideError extends BaseError {
    /**
     * Initializes a new instance of the error message with a default message indicating that the nonce key is invalid.
     */
    constructor() {
        super(`EntityId of 0 is reserved for the owner and cannot be used`);
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "EntityIdOverrideError"
        });
    }
}
/**
 * Error class denoting that the provided ma v2 account mode is invalid.
 */
export class InvalidModularAccountV2Mode extends BaseError {
    /**
     * Initializes a new instance of the error message with a default message indicating that the provided ma v2 account mode is invalid.
     */
    constructor() {
        super(`The provided account mode is invalid for ModularAccount V2`);
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "InvalidModularAccountV2Mode"
        });
    }
}
//# sourceMappingURL=client.js.map