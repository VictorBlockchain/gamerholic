{"version":3,"file":"7702signer.js","sourceRoot":"","sources":["../../../../src/middleware/defaults/7702signer.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,MAAM,CAAC;AAC7B,OAAO,EAAE,wBAAwB,EAAE,MAAM,uCAAuC,CAAC;AACjF,OAAO,EAAE,oBAAoB,EAAE,MAAM,yBAAyB,CAAC;AAC/D,OAAO,EAAE,kBAAkB,EAAE,MAAM,wBAAwB,CAAC;AAE5D,OAAO,EAAE,mBAAmB,EAAE,MAAM,mBAAmB,CAAC;AAExD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAkCG;AACH,MAAM,CAAC,MAAM,uBAAuB,GAGlC,CAAC,YAAiC,EAAE,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE;IAC9D,MAAM,aAAa,GAAG,YAAY,IAAI,mBAAmB,CAAC;IAE1D,MAAM,EAAE,GAAG,MAAM,aAAa,CAC5B;QACE,GAAG,MAAM;QACT,sCAAsC;QACtC,WAAW,EAAE,SAAS;KACvB,EACD,MAAM,CACP,CAAC;IAEF,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC;IACxD,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC;IAE1B,IAAI,CAAC,OAAO,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,EAAE,CAAC;QACnD,MAAM,IAAI,oBAAoB,EAAE,CAAC;IACnC,CAAC;IAED,MAAM,MAAM,GAAG,OAAO,CAAC,SAAS,EAAE,CAAC;IAEnC,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC;QAC9B,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;QAClB,MAAM,IAAI,kBAAkB,EAAE,CAAC;IACjC,CAAC;IAED,MAAM,IAAI,GAAG,CAAC,MAAM,MAAM,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,IAAI,IAAI,CAAC;IAE1E,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,wBAAwB,EAAE,CAAC;IAE7D,MAAM,YAAY,GAAG,UAAU,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAEvD,IAAI,IAAI,CAAC,WAAW,EAAE,KAAK,YAAY,CAAC,WAAW,EAAE,EAAE,CAAC;QACtD,iHAAiH;QACjH,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,MAAM,YAAY,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,mBAAmB,CAAC;QAC3D,OAAO,EAAE,OAAO,CAAC,OAAO;KACzB,CAAC,CAAC;IAEH,MAAM,aAAa,GAAG,MAAM,MAAM,CAAC,iBAAiB,CAAC;QACnD,OAAO,EAAE,MAAM,CAAC,KAAK,CAAC,EAAE;QACxB,eAAe,EAAE,WAAW;QAC5B,KAAK,EAAE,YAAY;KACpB,CAAC,CAAC;IAEH,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,aAAa,CAAC;IAE/B,MAAM,OAAO,GAAG,aAAa,CAAC,OAAO,IAAI,aAAa,CAAC,CAAC,GAAG,GAAG,CAAC;IAE/D,OAAO;QACL,GAAG,EAAE;QACL,WAAW,EAAE;YACX,kEAAkE;YAClE,OAAO,EAAE,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;YAC/B,KAAK,EAAE,KAAK,CAAC,YAAY,CAAC;YAC1B,OAAO,EAAE,WAAW;YACpB,CAAC;YACD,CAAC;YACD,OAAO,EAAE,KAAK,CAAC,OAAO,CAAC;SACxB;KACF,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { toHex } from \"viem\";\nimport { isSmartAccountWithSigner } from \"../../account/smartContractAccount.js\";\nimport { AccountNotFoundError } from \"../../errors/account.js\";\nimport { ChainNotFoundError } from \"../../errors/client.js\";\nimport type { ClientMiddlewareFn } from \"../types\";\nimport { defaultUserOpSigner } from \"./userOpSigner.js\";\n\n/**\n * Provides a default middleware function for signing user operations with a client account when using EIP-7702 delegated accounts.\n * If the signer doesn't support `signAuthorization`, then this just runs the provided `signUserOperation` middleware.\n * This function is only compatible with accounts using EntryPoint v0.7.0, and the account must have an implementation address defined in `getImplementationAddress()`.\n *\n * @example\n * ```ts twoslash\n * import {\n *   default7702GasEstimator,\n *   default7702UserOpSigner,\n *   createSmartAccountClient,\n *   type SmartAccountClient,\n * } from \"@aa-sdk/core\";\n * import {\n *   createModularAccountV2,\n *   type CreateModularAccountV2ClientParams,\n * } from \"@account-kit/smart-contracts\";\n *\n * async function createSMA7702AccountClient(\n *   config: CreateModularAccountV2ClientParams\n * ): Promise<SmartAccountClient> {\n *   const sma7702Account = await createModularAccountV2({ ...config, mode: \"7702\" });\n *\n *   return createSmartAccountClient({\n *     account: sma7702Account,\n *     gasEstimator: default7702GasEstimator(config.gasEstimator),\n *     signUserOperation: default7702UserOpSigner(config.signUserOperation),\n *     ...config,\n *   });\n * }\n * ```\n *\n * @param {ClientMiddlewareFn} [userOpSigner] Optional user operation signer function\n * @returns {Function} A middleware function that signs EIP-7702 authorization tuples if necessary, and also uses the provided or default user operation signer to generate the user op signature.\n */\nexport const default7702UserOpSigner: (\n  userOpSigner?: ClientMiddlewareFn\n) => ClientMiddlewareFn =\n  (userOpSigner?: ClientMiddlewareFn) => async (struct, params) => {\n    const userOpSigner_ = userOpSigner ?? defaultUserOpSigner;\n\n    const uo = await userOpSigner_(\n      {\n        ...struct,\n        // Strip out the dummy eip7702 fields.\n        eip7702Auth: undefined,\n      },\n      params\n    );\n\n    const account = params.account ?? params.client.account;\n    const { client } = params;\n\n    if (!account || !isSmartAccountWithSigner(account)) {\n      throw new AccountNotFoundError();\n    }\n\n    const signer = account.getSigner();\n\n    if (!signer.signAuthorization) {\n      return uo;\n    }\n\n    if (!client.chain) {\n      throw new ChainNotFoundError();\n    }\n\n    const code = (await client.getCode({ address: account.address })) ?? \"0x\";\n\n    const implAddress = await account.getImplementationAddress();\n\n    const expectedCode = \"0xef0100\" + implAddress.slice(2);\n\n    if (code.toLowerCase() === expectedCode.toLowerCase()) {\n      // If the delegation already matches the expected, then we don't need to sign and include an authorization tuple.\n      return uo;\n    }\n\n    const accountNonce = await params.client.getTransactionCount({\n      address: account.address,\n    });\n\n    const authSignature = await signer.signAuthorization({\n      chainId: client.chain.id,\n      contractAddress: implAddress,\n      nonce: accountNonce,\n    });\n\n    const { r, s } = authSignature;\n\n    const yParity = authSignature.yParity ?? authSignature.v - 27n;\n\n    return {\n      ...uo,\n      eip7702Auth: {\n        // deepHexlify doesn't encode number(0) correctly, it returns \"0x\"\n        chainId: toHex(client.chain.id),\n        nonce: toHex(accountNonce),\n        address: implAddress,\n        r,\n        s,\n        yParity: toHex(yParity),\n      },\n    };\n  };\n"]}