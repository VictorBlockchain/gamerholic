{"version":3,"file":"7702gasEstimator.js","sourceRoot":"","sources":["../../../../src/middleware/defaults/7702gasEstimator.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,MAAM,CAAC;AAChC,OAAO,EAAE,oBAAoB,EAAE,MAAM,yBAAyB,CAAC;AAG/D,OAAO,EAAE,mBAAmB,EAAE,MAAM,mBAAmB,CAAC;AAExD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiCG;AACH,MAAM,CAAC,MAAM,uBAAuB,GAGlC,CAAC,YAAiC,EAAE,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE;IAC9D,MAAM,aAAa,GAAG,YAAY,IAAI,mBAAmB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAEzE,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC;IACxD,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,MAAM,IAAI,oBAAoB,EAAE,CAAC;IACnC,CAAC;IAED,MAAM,UAAU,GAAG,OAAO,CAAC,aAAa,EAAE,CAAC;IAC3C,IAAI,UAAU,CAAC,OAAO,KAAK,OAAO,EAAE,CAAC;QACnC,MAAM,IAAI,KAAK,CACb,2DAA2D,CAC5D,CAAC;IACJ,CAAC;IAED,MAAM,qBAAqB,GAAG,MAAM,OAAO,CAAC,wBAAwB,EAAE,CAAC;IAEvE,+FAA+F;IAE9F,MAAuC,CAAC,WAAW,GAAG;QACrD,OAAO,EAAE,KAAK;QACd,KAAK,EAAE,KAAK;QACZ,OAAO,EAAE,qBAAqB;QAC9B,CAAC,EAAE,QAAQ,EAAE,mBAAmB;QAChC,CAAC,EAAE,QAAQ;QACX,OAAO,EAAE,KAAK;KACf,CAAC;IAEF,OAAO,aAAa,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACvC,CAAC,CAAC","sourcesContent":["import { zeroHash } from \"viem\";\nimport { AccountNotFoundError } from \"../../errors/account.js\";\nimport type { UserOperationStruct } from \"../../types.js\";\nimport type { ClientMiddlewareFn } from \"../types\";\nimport { defaultGasEstimator } from \"./gasEstimator.js\";\n\n/**\n * A middleware function to estimate the gas usage of a user operation when using an EIP-7702 delegated account. Has an optional custom gas estimator.\n * This function is only compatible with accounts using EntryPoint v0.7.0, and the account must have an implementation address defined in `getImplementationAddress()`.\n *\n * @example\n * ```ts twoslash\n * import {\n *   default7702GasEstimator,\n *   default7702UserOpSigner,\n *   createSmartAccountClient,\n *   type SmartAccountClient,\n * } from \"@aa-sdk/core\";\n * import {\n *   createModularAccountV2,\n *   type CreateModularAccountV2ClientParams,\n * } from \"@account-kit/smart-contracts\";\n *\n * async function createSMA7702AccountClient(\n *   config: CreateModularAccountV2ClientParams\n * ): Promise<SmartAccountClient> {\n *   const sma7702Account = await createModularAccountV2({ ...config, mode: \"7702\" });\n *\n *   return createSmartAccountClient({\n *     account: sma7702Account,\n *     gasEstimator: default7702GasEstimator(config.gasEstimator),\n *     signUserOperation: default7702UserOpSigner(config.signUserOperation),\n *     ...config,\n *   });\n * }\n * ```\n *\n * @param {ClientMiddlewareFn} [gasEstimator] Optional custom gas estimator function\n * @returns {Function} A function that takes user operation struct and parameters, estimates gas usage, and returns the user operation with gas limits.\n */\nexport const default7702GasEstimator: (\n  gasEstimator?: ClientMiddlewareFn\n) => ClientMiddlewareFn =\n  (gasEstimator?: ClientMiddlewareFn) => async (struct, params) => {\n    const gasEstimator_ = gasEstimator ?? defaultGasEstimator(params.client);\n\n    const account = params.account ?? params.client.account;\n    if (!account) {\n      throw new AccountNotFoundError();\n    }\n\n    const entryPoint = account.getEntryPoint();\n    if (entryPoint.version !== \"0.7.0\") {\n      throw new Error(\n        \"This middleware is only compatible with EntryPoint v0.7.0\"\n      );\n    }\n\n    const implementationAddress = await account.getImplementationAddress();\n\n    // Note: does not omit the delegation from estimation if the account is already 7702 delegated.\n\n    (struct as UserOperationStruct<\"0.7.0\">).eip7702Auth = {\n      chainId: \"0x0\",\n      nonce: \"0x0\",\n      address: implementationAddress,\n      r: zeroHash, // aka `bytes32(0)`\n      s: zeroHash,\n      yParity: \"0x0\",\n    };\n\n    return gasEstimator_(struct, params);\n  };\n"]}